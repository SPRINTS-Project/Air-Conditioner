
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00001882  00001916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008000fa  008000fa  000019b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dce  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ca  00000000  00000000  00004a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001eac  00000000  00000000  00005ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  00007990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce1  00000000  00000000  00007f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bb1  00000000  00000000  00008bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000a7a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	36 09       	sbc	r19, r6
      56:	41 09       	sbc	r20, r1
      58:	4c 09       	sbc	r20, r12
      5a:	5c 0a       	sbc	r5, r28
      5c:	57 09       	sbc	r21, r7
      5e:	5c 0a       	sbc	r5, r28
      60:	62 09       	sbc	r22, r2
      62:	6d 09       	sbc	r22, r13
      64:	78 09       	sbc	r23, r8
      66:	83 09       	sbc	r24, r3
      68:	99 09       	sbc	r25, r9
      6a:	a4 09       	sbc	r26, r4
      6c:	af 09       	sbc	r26, r15
      6e:	5e 0a       	sbc	r5, r30
      70:	ba 09       	sbc	r27, r10
      72:	5e 0a       	sbc	r5, r30
      74:	c5 09       	sbc	r28, r5
      76:	d0 09       	sbc	r29, r0
      78:	db 09       	sbc	r29, r11
      7a:	e6 09       	sbc	r30, r6
      7c:	fc 09       	sbc	r31, r12
      7e:	07 0a       	sbc	r0, r23
      80:	12 0a       	sbc	r1, r18
      82:	1d 0a       	sbc	r1, r29
      84:	28 0a       	sbc	r2, r24
      86:	33 0a       	sbc	r3, r19
      88:	3e 0a       	sbc	r3, r30
      8a:	49 0a       	sbc	r4, r25

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e2 e8       	ldi	r30, 0x82	; 130
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	aa 3f       	cpi	r26, 0xFA	; 250
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	aa ef       	ldi	r26, 0xFA	; 250
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	aa 33       	cpi	r26, 0x3A	; 58
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 75 06 	call	0xcea	; 0xcea <main>
      c2:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
      ca:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <u8_delay>
      ce:	8f 5f       	subi	r24, 0xFF	; 255
      d0:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <u8_delay>
	//PORTD = ~PORTD;
	TIMER_Manager_reset(&st_gs_timer_1_config);
      d4:	82 e0       	ldi	r24, 0x02	; 2
      d6:	91 e0       	ldi	r25, 0x01	; 1
      d8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <TIMER_Manager_reset>
      dc:	08 95       	ret

000000de <APP_init>:
	}
}


void APP_init(void)
{
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	0f 93       	push	r16
      e4:	1f 93       	push	r17
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_1_config.u8_timerNum = TIMER_1;
      ea:	e2 e0       	ldi	r30, 0x02	; 2
      ec:	f1 e0       	ldi	r31, 0x01	; 1
      ee:	d1 e0       	ldi	r29, 0x01	; 1
      f0:	d0 83       	st	Z, r29
	st_gs_timer_1_config.u8_timer_ovf_int_enable = TIMER_INTERRUPT_FEATURE_ENABLE;
      f2:	d4 83       	std	Z+4, r29	; 0x04
	st_gs_timer_1_config.u16_timer_InitialValue = APP_TIMER_1_INIT_VALUE;
      f4:	88 e0       	ldi	r24, 0x08	; 8
      f6:	90 ef       	ldi	r25, 0xF0	; 240
      f8:	93 83       	std	Z+3, r25	; 0x03
      fa:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_1_config.callBackFunction =  APP_timer0OvfHandeler;
      fc:	85 e6       	ldi	r24, 0x65	; 101
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	96 83       	std	Z+6, r25	; 0x06
     102:	85 83       	std	Z+5, r24	; 0x05
	st_gs_timer_1_config.u8_timerClock = TIMER_F_CPU_1024;
     104:	c7 e0       	ldi	r28, 0x07	; 7
     106:	c1 83       	std	Z+1, r28	; 0x01
	TIMER_Manager_init(&st_gs_timer_1_config);
     108:	cf 01       	movw	r24, r30
     10a:	0e 94 31 06 	call	0xc62	; 0xc62 <TIMER_Manager_init>
	
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
     10e:	ef ef       	ldi	r30, 0xFF	; 255
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
     114:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
     116:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
     118:	cf 01       	movw	r24, r30
     11a:	0e 94 84 05 	call	0xb08	; 0xb08 <TEMP_SENSOR_init>
	
	
	
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
     11e:	e5 e1       	ldi	r30, 0x15	; 21
     120:	f1 e0       	ldi	r31, 0x01	; 1
     122:	10 82       	st	Z, r1
	
	st_gs_lcdConfig.u8_d4Pin[APP_PORT]	 = porta;
     124:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[APP_PIN]	 = pin0;
     126:	12 86       	std	Z+10, r1	; 0x0a
	
	st_gs_lcdConfig.u8_d5Pin[APP_PORT]	 = porta;
     128:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[APP_PIN]	 = pin1;
     12a:	d4 87       	std	Z+12, r29	; 0x0c
	
	st_gs_lcdConfig.u8_d6Pin[APP_PORT]	 = porta;
     12c:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[APP_PIN]	 = pin2;
     12e:	c2 e0       	ldi	r28, 0x02	; 2
     130:	c6 87       	std	Z+14, r28	; 0x0e
	
	st_gs_lcdConfig.u8_d7Pin[APP_PORT]	 = porta;
     132:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[APP_PIN]	 = pin3;
     134:	0f 2e       	mov	r0, r31
     136:	f3 e0       	ldi	r31, 0x03	; 3
     138:	ef 2e       	mov	r14, r31
     13a:	f0 2d       	mov	r31, r0
     13c:	e0 8a       	std	Z+16, r14	; 0x10
	
	st_gs_lcdConfig.u8_RSpin[APP_PORT]	 = porta;
     13e:	11 8a       	std	Z+17, r1	; 0x11
	st_gs_lcdConfig.u8_RSpin[APP_PIN]	 = pin4;
     140:	68 94       	set
     142:	ff 24       	eor	r15, r15
     144:	f2 f8       	bld	r15, 2
     146:	f2 8a       	std	Z+18, r15	; 0x12
	
	st_gs_lcdConfig.u8_RWpin[APP_PORT]	 = porta;
     148:	13 8a       	std	Z+19, r1	; 0x13
	st_gs_lcdConfig.u8_RWpin[APP_PIN]	 = pin5;
     14a:	05 e0       	ldi	r16, 0x05	; 5
     14c:	04 8b       	std	Z+20, r16	; 0x14
	
	st_gs_lcdConfig.u8_Epin[APP_PORT]	 = porta;
     14e:	15 8a       	std	Z+21, r1	; 0x15
	st_gs_lcdConfig.u8_Epin[APP_PIN]	 = pin6;
     150:	16 e0       	ldi	r17, 0x06	; 6
     152:	16 8b       	std	Z+22, r17	; 0x16
	
	LCD_init(&st_gs_lcdConfig);
     154:	cf 01       	movw	r24, r30
     156:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_init>
	
	
	
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[APP_PORT]	 = portc;
     15a:	ec e2       	ldi	r30, 0x2C	; 44
     15c:	f1 e0       	ldi	r31, 0x01	; 1
     15e:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[APP_PIN]	 = pin3;
     160:	e7 82       	std	Z+7, r14	; 0x07
	
	st_gs_keypadConfig.u8_col2Pin[APP_PORT]	 = portc;
     162:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[APP_PIN]	 = pin4;
     164:	f1 86       	std	Z+9, r15	; 0x09
	
	st_gs_keypadConfig.u8_col3Pin[APP_PORT]  = portc;
     166:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[APP_PIN]	 = pin5;
     168:	03 87       	std	Z+11, r16	; 0x0b
	
	st_gs_keypadConfig.u8_col4Pin[APP_PORT]	 = portc;
     16a:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[APP_PIN]	 = pin6;
     16c:	15 87       	std	Z+13, r17	; 0x0d
	
	st_gs_keypadConfig.u8_row1Pin[APP_PORT]	 = portc;
     16e:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[APP_PIN]	 = pin0 ;
     170:	11 82       	std	Z+1, r1	; 0x01
	
	st_gs_keypadConfig.u8_row2Pin[APP_PORT]  = portc;
     172:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[APP_PIN]	 = pin1 ;
     174:	d3 83       	std	Z+3, r29	; 0x03
	
	st_gs_keypadConfig.u8_row3Pin[APP_PORT]	 = portc;
     176:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[APP_PIN]	 = pin2 ;
     178:	c5 83       	std	Z+5, r28	; 0x05
	
	KEYPAD_init(&st_gs_keypadConfig);
     17a:	cf 01       	movw	r24, r30
     17c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
     180:	ed ef       	ldi	r30, 0xFD	; 253
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
     186:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
     188:	cf 01       	movw	r24, r30
     18a:	0e 94 99 02 	call	0x532	; 0x532 <BUZZER_init>
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	08 95       	ret

0000019c <APP_welcome>:


void APP_welcome(void)
{
	LCD_clear();
     19c:	0e 94 a7 04 	call	0x94e	; 0x94e <LCD_clear>
	LCD_setCursor(1,1);
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
	u8_delay = 0;
     1a8:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <u8_delay>
	LCD_writeString((uint8_t*)"Welcome");
     1ac:	8c e6       	ldi	r24, 0x6C	; 108
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	//u8_delay = 0 ;
	while(u8_delay <= 2);
     1b4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <u8_delay>
     1b8:	83 30       	cpi	r24, 0x03	; 3
     1ba:	e0 f3       	brcs	.-8      	; 0x1b4 <APP_welcome+0x18>
	//_delay_ms(1000);
	LCD_clear();
     1bc:	0e 94 a7 04 	call	0x94e	; 0x94e <LCD_clear>
	LCD_setCursor(1,1);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
	LCD_writeString((uint8_t*)"default Temp is");
     1c8:	84 e7       	ldi	r24, 0x74	; 116
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	LCD_setCursor(2,1);
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
	u8_delay = 0;
     1d8:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <u8_delay>
	LCD_writeString((uint8_t*)"20");
     1dc:	8e ec       	ldi	r24, 0xCE	; 206
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	//u8_delay = 0;
	while(u8_delay <= 2);
     1e4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <u8_delay>
     1e8:	83 30       	cpi	r24, 0x03	; 3
     1ea:	e0 f3       	brcs	.-8      	; 0x1e4 <APP_welcome+0x48>
	//_delay_ms(1000);
	
	u8_gs_programTemp = u8_gc_defaultTemp;
     1ec:	84 e1       	ldi	r24, 0x14	; 20
     1ee:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
	u8_en_gs_programState = APP_SET_TEMP;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <u8_en_gs_programState>
     1f8:	08 95       	ret

000001fa <APP_set>:




void APP_set(void)
{
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	27 97       	sbiw	r28, 0x07	; 7
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_loadingChar[] = "|";
     210:	8c e7       	ldi	r24, 0x7C	; 124
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	9a 83       	std	Y+2, r25	; 0x02
     216:	89 83       	std	Y+1, r24	; 0x01
	uint8_t u8_emptyChar[] = " ";
     218:	80 e2       	ldi	r24, 0x20	; 32
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	9c 83       	std	Y+4, r25	; 0x04
     21e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_keypadData = 0;
     220:	1d 82       	std	Y+5, r1	; 0x05
	char ch_arrs_curTempToString[2];
	//u8_delay = 0;
	LCD_clear();
     222:	0e 94 a7 04 	call	0x94e	; 0x94e <LCD_clear>
	LCD_setCursor(1,1);
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
	u8_delay = 0;
     22e:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <u8_delay>
	LCD_writeString((uint8_t*)"Set Initial Temp");
     232:	84 e8       	ldi	r24, 0x84	; 132
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	while(u8_delay <= 1);
     23a:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <u8_delay>
     23e:	82 30       	cpi	r24, 0x02	; 2
     240:	e0 f3       	brcs	.-8      	; 0x23a <APP_set+0x40>
	//_delay_ms(500);
	LCD_clear();
     242:	0e 94 a7 04 	call	0x94e	; 0x94e <LCD_clear>
	LCD_setCursor(1,1);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
     24e:	85 e9       	ldi	r24, 0x95	; 149
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	//LCD_setCursor(1,8);
	//LCD_writeString((uint8_t*)ch_arrs_curTempToString);
	LCD_setCursor(1,11);
     256:	6b e0       	ldi	r22, 0x0B	; 11
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
	LCD_writeString((uint8_t*)"Max=35");
     25e:	8c e9       	ldi	r24, 0x9C	; 156
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	for (uint8_t u8_index = 19 ; u8_index <= u8_gs_programTemp ;u8_index++)
     266:	13 e1       	ldi	r17, 0x13	; 19
     268:	0a c0       	rjmp	.+20     	; 0x27e <APP_set+0x84>
	{
		LCD_setCursor(2,u8_index-18);
     26a:	6e ee       	ldi	r22, 0xEE	; 238
     26c:	61 0f       	add	r22, r17
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
		LCD_writeString((uint8_t*)u8_loadingChar);
     274:	ce 01       	movw	r24, r28
     276:	01 96       	adiw	r24, 0x01	; 1
     278:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	LCD_writeString((uint8_t*)"Min=18");
	//LCD_setCursor(1,8);
	//LCD_writeString((uint8_t*)ch_arrs_curTempToString);
	LCD_setCursor(1,11);
	LCD_writeString((uint8_t*)"Max=35");
	for (uint8_t u8_index = 19 ; u8_index <= u8_gs_programTemp ;u8_index++)
     27c:	1f 5f       	subi	r17, 0xFF	; 255
     27e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     282:	81 17       	cp	r24, r17
     284:	90 f7       	brcc	.-28     	; 0x26a <APP_set+0x70>
		LCD_setCursor(2,u8_index-18);
		LCD_writeString((uint8_t*)u8_loadingChar);
	}
	while(1)
	{
		itoa(u8_gs_programTemp,ch_arrs_curTempToString,10);
     286:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     28a:	4a e0       	ldi	r20, 0x0A	; 10
     28c:	be 01       	movw	r22, r28
     28e:	6a 5f       	subi	r22, 0xFA	; 250
     290:	7f 4f       	sbci	r23, 0xFF	; 255
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__itoa_ncheck>
		LCD_setCursor(1,8);
     298:	68 e0       	ldi	r22, 0x08	; 8
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
     2a0:	ce 01       	movw	r24, r28
     2a2:	06 96       	adiw	r24, 0x06	; 6
     2a4:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
		{
			LCD_setCursor(2,u8_index);
			LCD_writeString(" ");
		}*/
		
		KEYPAD_read(&u8_keypadData);
     2a8:	ce 01       	movw	r24, r28
     2aa:	05 96       	adiw	r24, 0x05	; 5
     2ac:	0e 94 0f 03 	call	0x61e	; 0x61e <KEYPAD_read>
		
		if (u8_keypadData == APP_INCREMENT_BTN)
     2b0:	8d 81       	ldd	r24, Y+5	; 0x05
     2b2:	81 33       	cpi	r24, 0x31	; 49
     2b4:	89 f4       	brne	.+34     	; 0x2d8 <APP_set+0xde>
		{
		
			// Increment
			if (u8_gs_programTemp < 35)
     2b6:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <__data_end>
     2ba:	63 32       	cpi	r22, 0x23	; 35
     2bc:	20 f7       	brcc	.-56     	; 0x286 <APP_set+0x8c>
			{
				u8_gs_programTemp++;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	86 0f       	add	r24, r22
     2c2:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
				LCD_setCursor(2,u8_gs_programTemp-18);
     2c6:	61 51       	subi	r22, 0x11	; 17
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
				LCD_writeString((uint8_t*)u8_loadingChar);
     2ce:	ce 01       	movw	r24, r28
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
     2d6:	d7 cf       	rjmp	.-82     	; 0x286 <APP_set+0x8c>
			}
		}
		else if (u8_keypadData == APP_DECREMENT_BTN)
     2d8:	82 33       	cpi	r24, 0x32	; 50
     2da:	89 f4       	brne	.+34     	; 0x2fe <APP_set+0x104>
		{
			// Decrement
			if (u8_gs_programTemp >18)
     2dc:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <__data_end>
     2e0:	63 31       	cpi	r22, 0x13	; 19
     2e2:	88 f2       	brcs	.-94     	; 0x286 <APP_set+0x8c>
			{
				u8_gs_programTemp--;
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	86 0f       	add	r24, r22
     2e8:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
				LCD_setCursor(2,u8_gs_programTemp-17);
     2ec:	62 51       	subi	r22, 0x12	; 18
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
				LCD_writeString((uint8_t*)u8_emptyChar);
     2f4:	ce 01       	movw	r24, r28
     2f6:	03 96       	adiw	r24, 0x03	; 3
     2f8:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
     2fc:	c4 cf       	rjmp	.-120    	; 0x286 <APP_set+0x8c>
			}
		}
		else if (u8_keypadData == APP_SET_BTN)
     2fe:	83 33       	cpi	r24, 0x33	; 51
     300:	11 f6       	brne	.-124    	; 0x286 <APP_set+0x8c>
		{
			// Set
			u8_en_gs_programState = APP_WORKING;
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <u8_en_gs_programState>
		else{
			// do nothing
		}
	}
	
}
     308:	27 96       	adiw	r28, 0x07	; 7
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	08 95       	ret

0000031c <APP_printString>:
}



void APP_printString(float f32_temp)
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <APP_printString+0x6>
     322:	1f 92       	push	r1
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch_arrs_curTempToString[3] = {'0','\0','\0'};
     328:	20 e3       	ldi	r18, 0x30	; 48
     32a:	29 83       	std	Y+1, r18	; 0x01
     32c:	1a 82       	std	Y+2, r1	; 0x02
     32e:	1b 82       	std	Y+3, r1	; 0x03
	if (((uint8_t)f32_temp)<10)
     330:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fixunssfsi>
     334:	6a 30       	cpi	r22, 0x0A	; 10
     336:	28 f4       	brcc	.+10     	; 0x342 <APP_printString+0x26>
	{
		ch_arrs_curTempToString[0] =  ((uint8_t)f32_temp)+48;
     338:	60 5d       	subi	r22, 0xD0	; 208
     33a:	69 83       	std	Y+1, r22	; 0x01
		ch_arrs_curTempToString[1] = ' ';
     33c:	80 e2       	ldi	r24, 0x20	; 32
     33e:	8a 83       	std	Y+2, r24	; 0x02
     340:	16 c0       	rjmp	.+44     	; 0x36e <APP_printString+0x52>
	}
	else if (((uint8_t)f32_temp)>=10 && (((uint8_t)f32_temp)<100))
     342:	86 ef       	ldi	r24, 0xF6	; 246
     344:	86 0f       	add	r24, r22
     346:	8a 35       	cpi	r24, 0x5A	; 90
     348:	90 f4       	brcc	.+36     	; 0x36e <APP_printString+0x52>
	{
		ch_arrs_curTempToString[0] =  (((uint8_t)f32_temp)/10)+48;
     34a:	8d ec       	ldi	r24, 0xCD	; 205
     34c:	68 9f       	mul	r22, r24
     34e:	81 2d       	mov	r24, r1
     350:	11 24       	eor	r1, r1
     352:	86 95       	lsr	r24
     354:	86 95       	lsr	r24
     356:	86 95       	lsr	r24
     358:	90 e3       	ldi	r25, 0x30	; 48
     35a:	98 0f       	add	r25, r24
     35c:	99 83       	std	Y+1, r25	; 0x01
		//ch_arrs_curTempToString[0] = 'x';
		ch_arrs_curTempToString[1] =  (((uint8_t)f32_temp)%10)+48;
     35e:	88 0f       	add	r24, r24
     360:	98 2f       	mov	r25, r24
     362:	99 0f       	add	r25, r25
     364:	99 0f       	add	r25, r25
     366:	89 0f       	add	r24, r25
     368:	68 1b       	sub	r22, r24
     36a:	60 5d       	subi	r22, 0xD0	; 208
     36c:	6a 83       	std	Y+2, r22	; 0x02
	}
	else{
		// do nothing
	}
	LCD_writeString(ch_arrs_curTempToString);
     36e:	ce 01       	movw	r24, r28
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <APP_working>:
}



void APP_working(void)
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	1f 92       	push	r1
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
     38c:	19 82       	std	Y+1, r1	; 0x01
	//char ch_arrs_curTempToString[2];
	
	
	
	// print current temp
	LCD_clear();
     38e:	0e 94 a7 04 	call	0x94e	; 0x94e <LCD_clear>
	LCD_setCursor(1,1);
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
	LCD_writeString((uint8_t*)"Current Temp = ");
     39a:	83 ea       	ldi	r24, 0xA3	; 163
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	
	
	while(u8_en_gs_programState == APP_WORKING)
     3a2:	a1 c0       	rjmp	.+322    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	{
		// read the temp from the sensor
		TEMP_SENSOR_read(&st_gs_tempSensorConfig,&f32_gs_curTemp);
     3a4:	60 e6       	ldi	r22, 0x60	; 96
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 a7 05 	call	0xb4e	; 0xb4e <TEMP_SENSOR_read>
		
		f32_gs_curTemp /= 4.0 ;
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5e e3       	ldi	r21, 0x3E	; 62
     3b8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3bc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     3c4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     3c8:	0e 94 6f 0b 	call	0x16de	; 0x16de <__mulsf3>
     3cc:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     3d0:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     3d8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		// convert int to string
		//itoa((uint8_t)f32_gs_curTemp,ch_arrs_curTempToString,10);
		//APP_printString(f32_gs_curTemp);
		
		
		LCD_setCursor(2,2);
     3dc:	62 e0       	ldi	r22, 0x02	; 2
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
		APP_printString(f32_gs_curTemp);
     3e4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3e8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     3f0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     3f4:	0e 94 8e 01 	call	0x31c	; 0x31c <APP_printString>
		//LCD_writeString((uint8_t*)ch_arrs_curTempToString);
		if (f32_gs_curTemp > u8_gs_programTemp)
     3f8:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <__data_end>
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__floatsisf>
     406:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     40a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     40e:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     412:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     416:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__cmpsf2>
     41a:	88 23       	and	r24, r24
     41c:	34 f4       	brge	.+12     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			// print the bell shape 
			//LCD_setCursor(2,3);
			LCD_writeSpChar(LCD_BELL);
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	0e 94 40 05 	call	0xa80	; 0xa80 <LCD_writeSpChar>
			
			
			// start the BUZZER
			BUZZER_start();
     424:	0e 94 b4 02 	call	0x568	; 0x568 <BUZZER_start>
     428:	08 c0       	rjmp	.+16     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		}
		else{
			LCD_setCursor(2,1);
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
			LCD_writeString((uint8_t*)" ");
     432:	81 eb       	ldi	r24, 0xB1	; 177
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
		}
		KEYPAD_read(&u8_keypadData);
     43a:	ce 01       	movw	r24, r28
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	0e 94 0f 03 	call	0x61e	; 0x61e <KEYPAD_read>
		switch(u8_keypadData)
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	85 33       	cpi	r24, 0x35	; 53
     446:	31 f0       	breq	.+12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     448:	8e 34       	cpi	r24, 0x4E	; 78
     44a:	09 f4       	brne	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44c:	4c c0       	rjmp	.+152    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     44e:	84 33       	cpi	r24, 0x34	; 52
     450:	41 f5       	brne	.+80     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     452:	21 c0       	rjmp	.+66     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			case  APP_NO_BTN :
				break;
			case  APP_RESET_BTN :
				// reset
				// Stop the BUZZER
				BUZZER_stop();
     454:	0e 94 c3 02 	call	0x586	; 0x586 <BUZZER_stop>
				
				// Set the program temp with the default temp
				u8_gs_programTemp = u8_gc_defaultTemp;
     458:	84 e1       	ldi	r24, 0x14	; 20
     45a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
				
				// clear LCD and print Temp value is resettled to 20
				LCD_clear();
     45e:	0e 94 a7 04 	call	0x94e	; 0x94e <LCD_clear>
				LCD_setCursor(1,1);
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
				LCD_writeString((uint8_t*)"Temp value is");
     46a:	83 eb       	ldi	r24, 0xB3	; 179
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
				LCD_setCursor(2,1);
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
				u8_delay = 0;
     47a:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <u8_delay>
				LCD_writeString((uint8_t*)"resettled to 20");
     47e:	81 ec       	ldi	r24, 0xC1	; 193
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
				
				// 1s timeout
				while(u8_delay <= 2);
     486:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <u8_delay>
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	e0 f3       	brcs	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <u8_en_gs_programState>
				break;
     494:	28 c0       	rjmp	.+80     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			
			case APP_ADJUST_BTN : 
				// adjust
				
				// Stop the BUZZER
				BUZZER_stop();
     496:	0e 94 c3 02 	call	0x586	; 0x586 <BUZZER_stop>
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <u8_en_gs_programState>
				break;
     4a0:	22 c0       	rjmp	.+68     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			default:
				
				// Invalid button
				LCD_clear();
     4a2:	0e 94 a7 04 	call	0x94e	; 0x94e <LCD_clear>
				LCD_setCursor(1,1);
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
				LCD_writeString((uint8_t*)"the operation is");
     4ae:	81 ed       	ldi	r24, 0xD1	; 209
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
				LCD_setCursor(2,1);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
				u8_delay = 0;
     4be:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <u8_delay>
				LCD_writeString((uint8_t*)"not allowed");
     4c2:	82 ee       	ldi	r24, 0xE2	; 226
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
			
				// 1s timeout
				while(u8_delay <= 2);
     4ca:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <u8_delay>
     4ce:	83 30       	cpi	r24, 0x03	; 3
     4d0:	e0 f3       	brcs	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
				
				// print current temp
				LCD_clear();
     4d2:	0e 94 a7 04 	call	0x94e	; 0x94e <LCD_clear>
				LCD_setCursor(1,1);
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_setCursor>
				LCD_writeString((uint8_t*)"Current Temp = ");
     4de:	83 ea       	ldi	r24, 0xA3	; 163
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_writeString>
	LCD_clear();
	LCD_setCursor(1,1);
	LCD_writeString((uint8_t*)"Current Temp = ");
	
	
	while(u8_en_gs_programState == APP_WORKING)
     4e6:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <u8_en_gs_programState>
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
     4ee:	5a cf       	rjmp	.-332    	; 0x3a4 <APP_working+0x22>
				LCD_writeString((uint8_t*)"Current Temp = ");
				break;
		}
	}
	
}
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <APP_start>:


void APP_start(void)
{
	//DDRD = 0xff;
	APP_init();
     4f8:	0e 94 6f 00 	call	0xde	; 0xde <APP_init>
	sei();													// Enable global interrupt 
     4fc:	78 94       	sei
	TIMER_Manager_start(&st_gs_timer_1_config);
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 51 06 	call	0xca2	; 0xca2 <TIMER_Manager_start>
     506:	02 c0       	rjmp	.+4      	; 0x50c <APP_start+0x14>
	
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
     508:	0e 94 ce 00 	call	0x19c	; 0x19c <APP_welcome>
	sei();													// Enable global interrupt 
	TIMER_Manager_start(&st_gs_timer_1_config);
	
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
     50c:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <u8_en_gs_programState>
     510:	81 11       	cpse	r24, r1
     512:	03 c0       	rjmp	.+6      	; 0x51a <APP_start+0x22>
     514:	f9 cf       	rjmp	.-14     	; 0x508 <APP_start+0x10>
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
     516:	0e 94 fd 00 	call	0x1fa	; 0x1fa <APP_set>
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
     51a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <u8_en_gs_programState>
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	d1 f3       	breq	.-12     	; 0x516 <APP_start+0x1e>
     522:	02 c0       	rjmp	.+4      	; 0x528 <APP_start+0x30>
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
		{
			APP_working();
     524:	0e 94 c1 01 	call	0x382	; 0x382 <APP_working>
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
     528:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <u8_en_gs_programState>
     52c:	82 30       	cpi	r24, 0x02	; 2
     52e:	d1 f3       	breq	.-12     	; 0x524 <APP_start+0x2c>
     530:	ed cf       	rjmp	.-38     	; 0x50c <APP_start+0x14>

00000532 <BUZZER_init>:
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	99 f0       	breq	.+38     	; 0x560 <BUZZER_init+0x2e>
     53a:	ec 01       	movw	r28, r24
     53c:	68 81       	ld	r22, Y
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     546:	81 11       	cpse	r24, r1
     548:	0c c0       	rjmp	.+24     	; 0x562 <BUZZER_init+0x30>
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	ea e0       	ldi	r30, 0x0A	; 10
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	81 83       	std	Z+1, r24	; 0x01
     552:	88 81       	ld	r24, Y
     554:	80 83       	st	Z, r24
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <u8_gs_buzzerState>
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	01 c0       	rjmp	.+2      	; 0x562 <BUZZER_init+0x30>
     560:	86 e0       	ldi	r24, 0x06	; 6
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <BUZZER_start>:
     568:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <u8_gs_buzzerState>
     56c:	88 23       	and	r24, r24
     56e:	49 f0       	breq	.+18     	; 0x582 <BUZZER_start+0x1a>
     570:	ea e0       	ldi	r30, 0x0A	; 10
     572:	f1 e0       	ldi	r31, 0x01	; 1
     574:	60 81       	ld	r22, Z
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	81 81       	ldd	r24, Z+1	; 0x01
     57a:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	08 95       	ret
     582:	86 e0       	ldi	r24, 0x06	; 6
     584:	08 95       	ret

00000586 <BUZZER_stop>:
     586:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <u8_gs_buzzerState>
     58a:	88 23       	and	r24, r24
     58c:	49 f0       	breq	.+18     	; 0x5a0 <BUZZER_stop+0x1a>
     58e:	ea e0       	ldi	r30, 0x0A	; 10
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	60 81       	ld	r22, Z
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	81 81       	ldd	r24, Z+1	; 0x01
     598:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	08 95       	ret
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	08 95       	ret

000005a4 <KEYPAD_init>:
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	a9 f1       	breq	.+106    	; 0x616 <KEYPAD_init+0x72>
     5ac:	ec 01       	movw	r28, r24
     5ae:	69 81       	ldd	r22, Y+1	; 0x01
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	88 81       	ld	r24, Y
     5b4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     5b8:	6b 81       	ldd	r22, Y+3	; 0x03
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     5c2:	6d 81       	ldd	r22, Y+5	; 0x05
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     5cc:	69 81       	ldd	r22, Y+1	; 0x01
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	88 81       	ld	r24, Y
     5d2:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     5d6:	6b 81       	ldd	r22, Y+3	; 0x03
     5d8:	41 e0       	ldi	r20, 0x01	; 1
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     5e0:	6d 81       	ldd	r22, Y+5	; 0x05
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	8c 81       	ldd	r24, Y+4	; 0x04
     5e6:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     5ea:	6f 81       	ldd	r22, Y+7	; 0x07
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	8e 81       	ldd	r24, Y+6	; 0x06
     5f0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     5f4:	69 85       	ldd	r22, Y+9	; 0x09
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	88 85       	ldd	r24, Y+8	; 0x08
     5fa:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     5fe:	6b 85       	ldd	r22, Y+11	; 0x0b
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	8a 85       	ldd	r24, Y+10	; 0x0a
     604:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     608:	6d 85       	ldd	r22, Y+13	; 0x0d
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	8c 85       	ldd	r24, Y+12	; 0x0c
     60e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	01 c0       	rjmp	.+2      	; 0x618 <KEYPAD_init+0x74>
     616:	87 e0       	ldi	r24, 0x07	; 7
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <KEYPAD_read>:
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	1f 92       	push	r1
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	7c 01       	movw	r14, r24
     634:	0c e2       	ldi	r16, 0x2C	; 44
     636:	11 e0       	ldi	r17, 0x01	; 1
     638:	f8 01       	movw	r30, r16
     63a:	67 81       	ldd	r22, Z+7	; 0x07
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	86 81       	ldd	r24, Z+6	; 0x06
     640:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     644:	f8 01       	movw	r30, r16
     646:	61 85       	ldd	r22, Z+9	; 0x09
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	80 85       	ldd	r24, Z+8	; 0x08
     64c:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     650:	f8 01       	movw	r30, r16
     652:	63 85       	ldd	r22, Z+11	; 0x0b
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	82 85       	ldd	r24, Z+10	; 0x0a
     658:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     65c:	f8 01       	movw	r30, r16
     65e:	65 85       	ldd	r22, Z+13	; 0x0d
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	84 85       	ldd	r24, Z+12	; 0x0c
     664:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     668:	00 e0       	ldi	r16, 0x00	; 0
     66a:	d1 2c       	mov	r13, r1
     66c:	42 c0       	rjmp	.+132    	; 0x6f2 <KEYPAD_read+0xd4>
     66e:	ec e2       	ldi	r30, 0x2C	; 44
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	67 81       	ldd	r22, Z+7	; 0x07
     674:	60 0f       	add	r22, r16
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	86 81       	ldd	r24, Z+6	; 0x06
     67a:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	2d c0       	rjmp	.+90     	; 0x6dc <KEYPAD_read+0xbe>
     682:	ec e2       	ldi	r30, 0x2C	; 44
     684:	f1 e0       	ldi	r31, 0x01	; 1
     686:	61 81       	ldd	r22, Z+1	; 0x01
     688:	61 0f       	add	r22, r17
     68a:	ae 01       	movw	r20, r28
     68c:	4f 5f       	subi	r20, 0xFF	; 255
     68e:	5f 4f       	sbci	r21, 0xFF	; 255
     690:	80 81       	ld	r24, Z
     692:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_readPIN>
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	81 11       	cpse	r24, r1
     69a:	1f c0       	rjmp	.+62     	; 0x6da <KEYPAD_read+0xbc>
     69c:	0a c0       	rjmp	.+20     	; 0x6b2 <KEYPAD_read+0x94>
     69e:	ec e2       	ldi	r30, 0x2C	; 44
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	61 81       	ldd	r22, Z+1	; 0x01
     6a4:	61 0f       	add	r22, r17
     6a6:	ae 01       	movw	r20, r28
     6a8:	4f 5f       	subi	r20, 0xFF	; 255
     6aa:	5f 4f       	sbci	r21, 0xFF	; 255
     6ac:	80 81       	ld	r24, Z
     6ae:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_readPIN>
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	88 23       	and	r24, r24
     6b6:	99 f3       	breq	.-26     	; 0x69e <KEYPAD_read+0x80>
     6b8:	80 2f       	mov	r24, r16
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	fc 01       	movw	r30, r24
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	e2 51       	subi	r30, 0x12	; 18
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	e1 0f       	add	r30, r17
     6cc:	f1 1d       	adc	r31, r1
     6ce:	80 81       	ld	r24, Z
     6d0:	f7 01       	movw	r30, r14
     6d2:	80 83       	st	Z, r24
     6d4:	dd 24       	eor	r13, r13
     6d6:	d3 94       	inc	r13
     6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <KEYPAD_read+0xc2>
     6da:	1f 5f       	subi	r17, 0xFF	; 255
     6dc:	13 30       	cpi	r17, 0x03	; 3
     6de:	88 f2       	brcs	.-94     	; 0x682 <KEYPAD_read+0x64>
     6e0:	ec e2       	ldi	r30, 0x2C	; 44
     6e2:	f1 e0       	ldi	r31, 0x01	; 1
     6e4:	67 81       	ldd	r22, Z+7	; 0x07
     6e6:	60 0f       	add	r22, r16
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	86 81       	ldd	r24, Z+6	; 0x06
     6ec:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
     6f0:	0f 5f       	subi	r16, 0xFF	; 255
     6f2:	04 30       	cpi	r16, 0x04	; 4
     6f4:	08 f4       	brcc	.+2      	; 0x6f8 <KEYPAD_read+0xda>
     6f6:	bb cf       	rjmp	.-138    	; 0x66e <KEYPAD_read+0x50>
     6f8:	f1 e0       	ldi	r31, 0x01	; 1
     6fa:	df 16       	cp	r13, r31
     6fc:	19 f0       	breq	.+6      	; 0x704 <KEYPAD_read+0xe6>
     6fe:	8e e4       	ldi	r24, 0x4E	; 78
     700:	f7 01       	movw	r30, r14
     702:	80 83       	st	Z, r24
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	08 95       	ret

00000718 <ENABLE>:
	{
		//do nothing
	}
}
void ENABLE(void)
{
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
	
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_HIGH);
     71c:	c5 e1       	ldi	r28, 0x15	; 21
     71e:	d1 e0       	ldi	r29, 0x01	; 1
     720:	6e 89       	ldd	r22, Y+22	; 0x16
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	8d 89       	ldd	r24, Y+21	; 0x15
     726:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	8a 95       	dec	r24
     72e:	f1 f7       	brne	.-4      	; 0x72c <ENABLE+0x14>
     730:	00 c0       	rjmp	.+0      	; 0x732 <ENABLE+0x1a>
	_delay_us(1);
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_LOW);
     732:	6e 89       	ldd	r22, Y+22	; 0x16
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	8d 89       	ldd	r24, Y+21	; 0x15
     738:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	//_delay_us(1);

     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <LCD_cmd>:
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ec 01       	movw	r28, r24
     74a:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
     74c:	6e 89       	ldd	r22, Y+22	; 0x16
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	8d 89       	ldd	r24, Y+21	; 0x15
     752:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_LOW);
     756:	6a 89       	ldd	r22, Y+18	; 0x12
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	89 89       	ldd	r24, Y+17	; 0x11
     75c:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
     760:	6c 89       	ldd	r22, Y+20	; 0x14
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	8b 89       	ldd	r24, Y+19	; 0x13
     766:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
     76a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
     76e:	81 11       	cpse	r24, r1
     770:	4a c0       	rjmp	.+148    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
     772:	68 89       	ldd	r22, Y+16	; 0x10
     774:	41 2f       	mov	r20, r17
     776:	44 1f       	adc	r20, r20
     778:	44 27       	eor	r20, r20
     77a:	44 1f       	adc	r20, r20
     77c:	8f 85       	ldd	r24, Y+15	; 0x0f
     77e:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
     782:	6e 85       	ldd	r22, Y+14	; 0x0e
     784:	16 fb       	bst	r17, 6
     786:	44 27       	eor	r20, r20
     788:	40 f9       	bld	r20, 0
     78a:	8d 85       	ldd	r24, Y+13	; 0x0d
     78c:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
     790:	6c 85       	ldd	r22, Y+12	; 0x0c
     792:	15 fb       	bst	r17, 5
     794:	44 27       	eor	r20, r20
     796:	40 f9       	bld	r20, 0
     798:	8b 85       	ldd	r24, Y+11	; 0x0b
     79a:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
     79e:	6a 85       	ldd	r22, Y+10	; 0x0a
     7a0:	14 fb       	bst	r17, 4
     7a2:	44 27       	eor	r20, r20
     7a4:	40 f9       	bld	r20, 0
     7a6:	89 85       	ldd	r24, Y+9	; 0x09
     7a8:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		ENABLE();
     7ac:	0e 94 8c 03 	call	0x718	; 0x718 <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b0:	8f e6       	ldi	r24, 0x6F	; 111
     7b2:	97 e1       	ldi	r25, 0x17	; 23
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <LCD_cmd+0x72>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <LCD_cmd+0x78>
     7ba:	00 00       	nop
		_delay_ms(3);
	    DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
     7bc:	68 89       	ldd	r22, Y+16	; 0x10
     7be:	13 fb       	bst	r17, 3
     7c0:	44 27       	eor	r20, r20
     7c2:	40 f9       	bld	r20, 0
     7c4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c6:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
     7ca:	6e 85       	ldd	r22, Y+14	; 0x0e
     7cc:	12 fb       	bst	r17, 2
     7ce:	44 27       	eor	r20, r20
     7d0:	40 f9       	bld	r20, 0
     7d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     7d4:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
     7d8:	6c 85       	ldd	r22, Y+12	; 0x0c
     7da:	11 fb       	bst	r17, 1
     7dc:	44 27       	eor	r20, r20
     7de:	40 f9       	bld	r20, 0
     7e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e2:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
     7e6:	6a 85       	ldd	r22, Y+10	; 0x0a
     7e8:	41 2f       	mov	r20, r17
     7ea:	41 70       	andi	r20, 0x01	; 1
     7ec:	89 85       	ldd	r24, Y+9	; 0x09
     7ee:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		ENABLE();
     7f2:	0e 94 8c 03 	call	0x718	; 0x718 <ENABLE>
     7f6:	8f e6       	ldi	r24, 0x6F	; 111
     7f8:	97 e1       	ldi	r25, 0x17	; 23
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCD_cmd+0xb8>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	00 00       	nop
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	05 c0       	rjmp	.+10     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
		ENABLE();
		_delay_ms(3);
	}
	else if(mode==LCD_8_BIT_MODE)
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	11 f4       	brne	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	01 c0       	rjmp	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		
	}
	else
	{
		//do nothing
		ret_val=LCD_E_NOT_OK;
     80e:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ret_val;
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	08 95       	ret

00000818 <LCD_init>:
#include<util/delay.h>
extern st_lcdConfigType st_gs_lcdConfig;
static uint8_t mode;
static void ENABLE(void);
u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	ec 01       	movw	r28, r24
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=DIO_init(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_OUTPUT);
     820:	6a 89       	ldd	r22, Y+18	; 0x12
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	89 89       	ldd	r24, Y+17	; 0x11
     826:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     82a:	18 2f       	mov	r17, r24
	ret_val |=DIO_init(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_OUTPUT);
     82c:	6c 89       	ldd	r22, Y+20	; 0x14
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	8b 89       	ldd	r24, Y+19	; 0x13
     832:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     836:	18 2b       	or	r17, r24
	ret_val |=DIO_init(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_OUTPUT);
     838:	6e 89       	ldd	r22, Y+22	; 0x16
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	8d 89       	ldd	r24, Y+21	; 0x15
     83e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     842:	18 2b       	or	r17, r24
	switch(st_config->u8_mode)
     844:	88 81       	ld	r24, Y
     846:	88 23       	and	r24, r24
     848:	19 f0       	breq	.+6      	; 0x850 <LCD_init+0x38>
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	99 f1       	breq	.+102    	; 0x8b4 <__stack+0x55>
     84e:	77 c0       	rjmp	.+238    	; 0x93e <__stack+0xdf>
	{
		case LCD_4_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x02);
     850:	62 e0       	ldi	r22, 0x02	; 2
     852:	85 e1       	ldi	r24, 0x15	; 21
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x28);
     85a:	68 e2       	ldi	r22, 0x28	; 40
     85c:	85 e1       	ldi	r24, 0x15	; 21
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
     864:	6c e0       	ldi	r22, 0x0C	; 12
     866:	85 e1       	ldi	r24, 0x15	; 21
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
     86e:	66 e0       	ldi	r22, 0x06	; 6
     870:	85 e1       	ldi	r24, 0x15	; 21
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	85 e1       	ldi	r24, 0x15	; 21
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
     882:	6a 85       	ldd	r22, Y+10	; 0x0a
     884:	41 e0       	ldi	r20, 0x01	; 1
     886:	89 85       	ldd	r24, Y+9	; 0x09
     888:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     88c:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
     88e:	6c 85       	ldd	r22, Y+12	; 0x0c
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	8b 85       	ldd	r24, Y+11	; 0x0b
     894:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     898:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
     89a:	6e 85       	ldd	r22, Y+14	; 0x0e
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     8a4:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
     8a6:	68 89       	ldd	r22, Y+16	; 0x10
     8a8:	41 e0       	ldi	r20, 0x01	; 1
     8aa:	8f 85       	ldd	r24, Y+15	; 0x0f
     8ac:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     8b0:	81 2b       	or	r24, r17
								break;
     8b2:	46 c0       	rjmp	.+140    	; 0x940 <__stack+0xe1>
								
	case LCD_8_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x38);
     8b4:	68 e3       	ldi	r22, 0x38	; 56
     8b6:	85 e1       	ldi	r24, 0x15	; 21
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
     8be:	6c e0       	ldi	r22, 0x0C	; 12
     8c0:	85 e1       	ldi	r24, 0x15	; 21
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
     8c8:	66 e0       	ldi	r22, 0x06	; 6
     8ca:	85 e1       	ldi	r24, 0x15	; 21
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	85 e1       	ldi	r24, 0x15	; 21
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
		                        ret_val |=DIO_init(st_config->u8_d0Pin[0],st_config->u8_d0Pin[1],STD_OUTPUT);
     8dc:	6a 81       	ldd	r22, Y+2	; 0x02
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     8e6:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d1Pin[0],st_config->u8_d1Pin[1],STD_OUTPUT);
     8e8:	6c 81       	ldd	r22, Y+4	; 0x04
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     8f2:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d2Pin[0],st_config->u8_d2Pin[1],STD_OUTPUT);
     8f4:	6e 81       	ldd	r22, Y+6	; 0x06
     8f6:	41 e0       	ldi	r20, 0x01	; 1
     8f8:	8d 81       	ldd	r24, Y+5	; 0x05
     8fa:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     8fe:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d3Pin[0],st_config->u8_d3Pin[1],STD_OUTPUT);
     900:	68 85       	ldd	r22, Y+8	; 0x08
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	8f 81       	ldd	r24, Y+7	; 0x07
     906:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     90a:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
     90c:	6a 85       	ldd	r22, Y+10	; 0x0a
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	89 85       	ldd	r24, Y+9	; 0x09
     912:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     916:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
     918:	6c 85       	ldd	r22, Y+12	; 0x0c
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	8b 85       	ldd	r24, Y+11	; 0x0b
     91e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     922:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
     924:	6e 85       	ldd	r22, Y+14	; 0x0e
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	8d 85       	ldd	r24, Y+13	; 0x0d
     92a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     92e:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
     930:	68 89       	ldd	r22, Y+16	; 0x10
     932:	41 e0       	ldi	r20, 0x01	; 1
     934:	8f 85       	ldd	r24, Y+15	; 0x0f
     936:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     93a:	81 2b       	or	r24, r17
								break;
     93c:	01 c0       	rjmp	.+2      	; 0x940 <__stack+0xe1>
	default: ret_val=LCD_E_NOT_OK;
     93e:	85 e0       	ldi	r24, 0x05	; 5
				break;
								
	}
	mode=st_config->u8_mode;
     940:	98 81       	ld	r25, Y
     942:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <mode>
	return ret_val;
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	08 95       	ret

0000094e <LCD_clear>:
u8_en_lcdErrorsType LCD_clear (void)
{

	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=LCD_cmd(&st_gs_lcdConfig,0x01);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	85 e1       	ldi	r24, 0x15	; 21
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
	return ret_val;

}
     958:	08 95       	ret

0000095a <LCD_setCursor>:
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	switch(u8_row)
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	19 f0       	breq	.+6      	; 0x964 <LCD_setCursor+0xa>
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	41 f0       	breq	.+16     	; 0x972 <LCD_setCursor+0x18>
     962:	0e c0       	rjmp	.+28     	; 0x980 <LCD_setCursor+0x26>
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
     964:	61 58       	subi	r22, 0x81	; 129
     966:	85 e1       	ldi	r24, 0x15	; 21
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     96e:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
     970:	08 95       	ret
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
     972:	61 54       	subi	r22, 0x41	; 65
     974:	85 e1       	ldi	r24, 0x15	; 21
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     97c:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
     97e:	08 95       	ret
		default:ret_val=LCD_E_NOT_OK;break;
     980:	85 e0       	ldi	r24, 0x05	; 5
	}

	return ret_val;

}
     982:	08 95       	ret

00000984 <LCD_char>:
		ret_val=LCD_E_NOT_OK;
	}
	return ret_val;
}
  void LCD_char(st_lcdConfigType* st_config,uint8_t cmd)
{
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ec 01       	movw	r28, r24
     98c:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
     98e:	6e 89       	ldd	r22, Y+22	; 0x16
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	8d 89       	ldd	r24, Y+21	; 0x15
     994:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_HIGH);
     998:	6a 89       	ldd	r22, Y+18	; 0x12
     99a:	41 e0       	ldi	r20, 0x01	; 1
     99c:	89 89       	ldd	r24, Y+17	; 0x11
     99e:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
     9a2:	6c 89       	ldd	r22, Y+20	; 0x14
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	8b 89       	ldd	r24, Y+19	; 0x13
     9a8:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
     9ac:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
     9b0:	81 11       	cpse	r24, r1
     9b2:	48 c0       	rjmp	.+144    	; 0xa44 <LCD_char+0xc0>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
     9b4:	68 89       	ldd	r22, Y+16	; 0x10
     9b6:	41 2f       	mov	r20, r17
     9b8:	44 1f       	adc	r20, r20
     9ba:	44 27       	eor	r20, r20
     9bc:	44 1f       	adc	r20, r20
     9be:	8f 85       	ldd	r24, Y+15	; 0x0f
     9c0:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
     9c4:	6e 85       	ldd	r22, Y+14	; 0x0e
     9c6:	16 fb       	bst	r17, 6
     9c8:	44 27       	eor	r20, r20
     9ca:	40 f9       	bld	r20, 0
     9cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ce:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
     9d2:	6c 85       	ldd	r22, Y+12	; 0x0c
     9d4:	15 fb       	bst	r17, 5
     9d6:	44 27       	eor	r20, r20
     9d8:	40 f9       	bld	r20, 0
     9da:	8b 85       	ldd	r24, Y+11	; 0x0b
     9dc:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
     9e0:	6a 85       	ldd	r22, Y+10	; 0x0a
     9e2:	14 fb       	bst	r17, 4
     9e4:	44 27       	eor	r20, r20
     9e6:	40 f9       	bld	r20, 0
     9e8:	89 85       	ldd	r24, Y+9	; 0x09
     9ea:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		ENABLE();
     9ee:	0e 94 8c 03 	call	0x718	; 0x718 <ENABLE>
     9f2:	8f e6       	ldi	r24, 0x6F	; 111
     9f4:	97 e1       	ldi	r25, 0x17	; 23
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCD_char+0x72>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <LCD_char+0x78>
     9fc:	00 00       	nop
		_delay_ms(3);
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
     9fe:	68 89       	ldd	r22, Y+16	; 0x10
     a00:	13 fb       	bst	r17, 3
     a02:	44 27       	eor	r20, r20
     a04:	40 f9       	bld	r20, 0
     a06:	8f 85       	ldd	r24, Y+15	; 0x0f
     a08:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
     a0c:	6e 85       	ldd	r22, Y+14	; 0x0e
     a0e:	12 fb       	bst	r17, 2
     a10:	44 27       	eor	r20, r20
     a12:	40 f9       	bld	r20, 0
     a14:	8d 85       	ldd	r24, Y+13	; 0x0d
     a16:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
     a1a:	6c 85       	ldd	r22, Y+12	; 0x0c
     a1c:	11 fb       	bst	r17, 1
     a1e:	44 27       	eor	r20, r20
     a20:	40 f9       	bld	r20, 0
     a22:	8b 85       	ldd	r24, Y+11	; 0x0b
     a24:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
     a28:	6a 85       	ldd	r22, Y+10	; 0x0a
     a2a:	41 2f       	mov	r20, r17
     a2c:	41 70       	andi	r20, 0x01	; 1
     a2e:	89 85       	ldd	r24, Y+9	; 0x09
     a30:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_writePIN>
		ENABLE();
     a34:	0e 94 8c 03 	call	0x718	; 0x718 <ENABLE>
     a38:	8f e6       	ldi	r24, 0x6F	; 111
     a3a:	97 e1       	ldi	r25, 0x17	; 23
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <LCD_char+0xb8>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <LCD_char+0xbe>
     a42:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	08 95       	ret

00000a4c <LCD_writeString>:

	return ret_val;

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	if(u8_data==(void*)0)
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	81 f0       	breq	.+32     	; 0xa76 <LCD_writeString+0x2a>
     a56:	8c 01       	movw	r16, r24
     a58:	c0 e0       	ldi	r28, 0x00	; 0
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <LCD_writeString+0x1a>

	else
	{
		while(u8_data[i] !='\0')
		{
			LCD_char(&st_gs_lcdConfig,u8_data[i]);
     a5c:	85 e1       	ldi	r24, 0x15	; 21
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 c2 04 	call	0x984	; 0x984 <LCD_char>
			i++;
     a64:	cf 5f       	subi	r28, 0xFF	; 255
		ret_val=LCD_E_NOT_OK;
	}

	else
	{
		while(u8_data[i] !='\0')
     a66:	f8 01       	movw	r30, r16
     a68:	ec 0f       	add	r30, r28
     a6a:	f1 1d       	adc	r31, r1
     a6c:	60 81       	ld	r22, Z
     a6e:	61 11       	cpse	r22, r1
     a70:	f5 cf       	rjmp	.-22     	; 0xa5c <LCD_writeString+0x10>

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <LCD_writeString+0x2c>
	if(u8_data==(void*)0)
	{
		ret_val=LCD_E_NOT_OK;
     a76:	85 e0       	ldi	r24, 0x05	; 5
		}
	}
	return ret_val;
	

}
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <LCD_writeSpChar>:
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	28 97       	sbiw	r28, 0x08	; 8
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
     a96:	98 e0       	ldi	r25, 0x08	; 8
     a98:	e4 e6       	ldi	r30, 0x64	; 100
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	de 01       	movw	r26, r28
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	01 90       	ld	r0, Z+
     aa2:	0d 92       	st	X+, r0
     aa4:	9a 95       	dec	r25
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <LCD_writeSpChar+0x20>
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	68 5f       	subi	r22, 0xF8	; 248
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	66 0f       	add	r22, r22
     ab2:	66 0f       	add	r22, r22
     ab4:	66 0f       	add	r22, r22
     ab6:	85 e1       	ldi	r24, 0x15	; 21
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
	for(i=0;i<8;i++)
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	0c c0       	rjmp	.+24     	; 0xada <LCD_writeSpChar+0x5a>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
     ac2:	e1 e0       	ldi	r30, 0x01	; 1
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	ec 0f       	add	r30, r28
     ac8:	fd 1f       	adc	r31, r29
     aca:	e1 0f       	add	r30, r17
     acc:	f1 1d       	adc	r31, r1
     ace:	60 81       	ld	r22, Z
     ad0:	85 e1       	ldi	r24, 0x15	; 21
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 c2 04 	call	0x984	; 0x984 <LCD_char>
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
	for(i=0;i<8;i++)
     ad8:	1f 5f       	subi	r17, 0xFF	; 255
     ada:	18 30       	cpi	r17, 0x08	; 8
     adc:	90 f3       	brcs	.-28     	; 0xac2 <LCD_writeSpChar+0x42>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
	}	
	
	LCD_cmd(&st_gs_lcdConfig,0xc0);
     ade:	60 ec       	ldi	r22, 0xC0	; 192
     ae0:	85 e1       	ldi	r24, 0x15	; 21
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_cmd>
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
     ae8:	63 e0       	ldi	r22, 0x03	; 3
     aea:	85 e1       	ldi	r24, 0x15	; 21
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 c2 04 	call	0x984	; 0x984 <LCD_char>
	return ret_val;
}
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	28 96       	adiw	r28, 0x08	; 8
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	08 95       	ret

00000b08 <TEMP_SENSOR_init>:
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	b9 f0       	breq	.+46     	; 0xb3e <TEMP_SENSOR_init+0x36>
     b10:	fc 01       	movw	r30, r24
     b12:	22 81       	ldd	r18, Z+2	; 0x02
     b14:	28 30       	cpi	r18, 0x08	; 8
     b16:	a8 f4       	brcc	.+42     	; 0xb42 <TEMP_SENSOR_init+0x3a>
     b18:	21 81       	ldd	r18, Z+1	; 0x01
     b1a:	28 30       	cpi	r18, 0x08	; 8
     b1c:	a0 f4       	brcc	.+40     	; 0xb46 <TEMP_SENSOR_init+0x3e>
     b1e:	ec 01       	movw	r28, r24
     b20:	ed e0       	ldi	r30, 0x0D	; 13
     b22:	f1 e0       	ldi	r31, 0x01	; 1
     b24:	21 83       	std	Z+1, r18	; 0x01
     b26:	88 81       	ld	r24, Y
     b28:	80 83       	st	Z, r24
     b2a:	cf 01       	movw	r24, r30
     b2c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <ADC_init>
     b30:	6a 81       	ldd	r22, Y+2	; 0x02
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	05 c0       	rjmp	.+10     	; 0xb48 <TEMP_SENSOR_init+0x40>
     b3e:	88 e0       	ldi	r24, 0x08	; 8
     b40:	03 c0       	rjmp	.+6      	; 0xb48 <TEMP_SENSOR_init+0x40>
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <TEMP_SENSOR_init+0x40>
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <TEMP_SENSOR_read>:
     b4e:	8f 92       	push	r8
     b50:	9f 92       	push	r9
     b52:	af 92       	push	r10
     b54:	bf 92       	push	r11
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	00 d0       	rcall	.+0      	; 0xb62 <TEMP_SENSOR_read+0x14>
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	1a 82       	std	Y+2, r1	; 0x02
     b68:	19 82       	std	Y+1, r1	; 0x01
     b6a:	61 15       	cp	r22, r1
     b6c:	71 05       	cpc	r23, r1
     b6e:	09 f4       	brne	.+2      	; 0xb72 <TEMP_SENSOR_read+0x24>
     b70:	64 c0       	rjmp	.+200    	; 0xc3a <TEMP_SENSOR_read+0xec>
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	09 f4       	brne	.+2      	; 0xb78 <TEMP_SENSOR_read+0x2a>
     b76:	63 c0       	rjmp	.+198    	; 0xc3e <TEMP_SENSOR_read+0xf0>
     b78:	fc 01       	movw	r30, r24
     b7a:	22 81       	ldd	r18, Z+2	; 0x02
     b7c:	28 30       	cpi	r18, 0x08	; 8
     b7e:	08 f0       	brcs	.+2      	; 0xb82 <TEMP_SENSOR_read+0x34>
     b80:	60 c0       	rjmp	.+192    	; 0xc42 <TEMP_SENSOR_read+0xf4>
     b82:	31 81       	ldd	r19, Z+1	; 0x01
     b84:	38 30       	cpi	r19, 0x08	; 8
     b86:	08 f0       	brcs	.+2      	; 0xb8a <TEMP_SENSOR_read+0x3c>
     b88:	5e c0       	rjmp	.+188    	; 0xc46 <TEMP_SENSOR_read+0xf8>
     b8a:	7b 01       	movw	r14, r22
     b8c:	5c 01       	movw	r10, r24
     b8e:	be 01       	movw	r22, r28
     b90:	6f 5f       	subi	r22, 0xFF	; 255
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	82 2f       	mov	r24, r18
     b96:	0e 94 91 06 	call	0xd22	; 0xd22 <ADC_read>
     b9a:	18 2f       	mov	r17, r24
     b9c:	81 11       	cpse	r24, r1
     b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <TEMP_SENSOR_read+0x66>
     ba0:	f5 01       	movw	r30, r10
     ba2:	80 81       	ld	r24, Z
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	51 f0       	breq	.+20     	; 0xbbc <TEMP_SENSOR_read+0x6e>
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	99 f0       	breq	.+38     	; 0xbd2 <TEMP_SENSOR_read+0x84>
     bac:	81 2c       	mov	r8, r1
     bae:	91 2c       	mov	r9, r1
     bb0:	54 01       	movw	r10, r8
     bb2:	17 c0       	rjmp	.+46     	; 0xbe2 <TEMP_SENSOR_read+0x94>
     bb4:	81 2c       	mov	r8, r1
     bb6:	91 2c       	mov	r9, r1
     bb8:	54 01       	movw	r10, r8
     bba:	13 c0       	rjmp	.+38     	; 0xbe2 <TEMP_SENSOR_read+0x94>
     bbc:	0f 2e       	mov	r0, r31
     bbe:	fa e0       	ldi	r31, 0x0A	; 10
     bc0:	8f 2e       	mov	r8, r31
     bc2:	f7 ed       	ldi	r31, 0xD7	; 215
     bc4:	9f 2e       	mov	r9, r31
     bc6:	f3 e2       	ldi	r31, 0x23	; 35
     bc8:	af 2e       	mov	r10, r31
     bca:	fb e3       	ldi	r31, 0x3B	; 59
     bcc:	bf 2e       	mov	r11, r31
     bce:	f0 2d       	mov	r31, r0
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <TEMP_SENSOR_read+0x94>
     bd2:	0f 2e       	mov	r0, r31
     bd4:	81 2c       	mov	r8, r1
     bd6:	91 2c       	mov	r9, r1
     bd8:	f0 ea       	ldi	r31, 0xA0	; 160
     bda:	af 2e       	mov	r10, r31
     bdc:	fb e3       	ldi	r31, 0x3B	; 59
     bde:	bf 2e       	mov	r11, r31
     be0:	f0 2d       	mov	r31, r0
     be2:	69 81       	ldd	r22, Y+1	; 0x01
     be4:	7a 81       	ldd	r23, Y+2	; 0x02
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__floatunsisf>
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
     bf2:	c5 01       	movw	r24, r10
     bf4:	b4 01       	movw	r22, r8
     bf6:	0e 94 6f 0b 	call	0x16de	; 0x16de <__mulsf3>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	48 ec       	ldi	r20, 0xC8	; 200
     c00:	52 e4       	ldi	r21, 0x42	; 66
     c02:	0e 94 6f 0b 	call	0x16de	; 0x16de <__mulsf3>
     c06:	4b 01       	movw	r8, r22
     c08:	5c 01       	movw	r10, r24
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	46 e1       	ldi	r20, 0x16	; 22
     c10:	53 e4       	ldi	r21, 0x43	; 67
     c12:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__gesf2>
     c16:	88 23       	and	r24, r24
     c18:	54 f0       	brlt	.+20     	; 0xc2e <TEMP_SENSOR_read+0xe0>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a6 e1       	ldi	r26, 0x16	; 22
     c20:	b3 e4       	ldi	r27, 0x43	; 67
     c22:	f7 01       	movw	r30, r14
     c24:	80 83       	st	Z, r24
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	a2 83       	std	Z+2, r26	; 0x02
     c2a:	b3 83       	std	Z+3, r27	; 0x03
     c2c:	0d c0       	rjmp	.+26     	; 0xc48 <TEMP_SENSOR_read+0xfa>
     c2e:	f7 01       	movw	r30, r14
     c30:	80 82       	st	Z, r8
     c32:	91 82       	std	Z+1, r9	; 0x01
     c34:	a2 82       	std	Z+2, r10	; 0x02
     c36:	b3 82       	std	Z+3, r11	; 0x03
     c38:	07 c0       	rjmp	.+14     	; 0xc48 <TEMP_SENSOR_read+0xfa>
     c3a:	18 e0       	ldi	r17, 0x08	; 8
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <TEMP_SENSOR_read+0xfa>
     c3e:	18 e0       	ldi	r17, 0x08	; 8
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <TEMP_SENSOR_read+0xfa>
     c42:	18 e0       	ldi	r17, 0x08	; 8
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <TEMP_SENSOR_read+0xfa>
     c46:	18 e0       	ldi	r17, 0x08	; 8
     c48:	81 2f       	mov	r24, r17
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	bf 90       	pop	r11
     c5a:	af 90       	pop	r10
     c5c:	9f 90       	pop	r9
     c5e:	8f 90       	pop	r8
     c60:	08 95       	ret

00000c62 <TIMER_Manager_init>:
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	91 f0       	breq	.+36     	; 0xc90 <TIMER_Manager_init+0x2e>
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 81       	ld	r18, Z
     c70:	23 30       	cpi	r18, 0x03	; 3
     c72:	80 f4       	brcc	.+32     	; 0xc94 <TIMER_Manager_init+0x32>
     c74:	21 81       	ldd	r18, Z+1	; 0x01
     c76:	2a 30       	cpi	r18, 0x0A	; 10
     c78:	78 f4       	brcc	.+30     	; 0xc98 <TIMER_Manager_init+0x36>
     c7a:	ec 01       	movw	r28, r24
     c7c:	0e 94 89 08 	call	0x1112	; 0x1112 <TIMER_init>
     c80:	18 2f       	mov	r17, r24
     c82:	68 81       	ld	r22, Y
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	0e 94 8a 0a 	call	0x1514	; 0x1514 <TIMER_setCallBack>
     c8c:	81 2b       	or	r24, r17
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <TIMER_Manager_init+0x38>
     c90:	83 e0       	ldi	r24, 0x03	; 3
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <TIMER_Manager_init+0x38>
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <TIMER_Manager_init+0x38>
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	08 95       	ret

00000ca2 <TIMER_Manager_start>:
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	51 f0       	breq	.+20     	; 0xcba <TIMER_Manager_start+0x18>
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 81       	ld	r18, Z
     caa:	23 30       	cpi	r18, 0x03	; 3
     cac:	40 f4       	brcc	.+16     	; 0xcbe <TIMER_Manager_start+0x1c>
     cae:	21 81       	ldd	r18, Z+1	; 0x01
     cb0:	2a 30       	cpi	r18, 0x0A	; 10
     cb2:	38 f4       	brcc	.+14     	; 0xcc2 <TIMER_Manager_start+0x20>
     cb4:	0e 94 16 09 	call	0x122c	; 0x122c <TIMER_start>
     cb8:	08 95       	ret
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	08 95       	ret
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	08 95       	ret
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	08 95       	ret

00000cc6 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	51 f0       	breq	.+20     	; 0xcde <TIMER_Manager_reset+0x18>
     cca:	fc 01       	movw	r30, r24
     ccc:	20 81       	ld	r18, Z
     cce:	23 30       	cpi	r18, 0x03	; 3
     cd0:	40 f4       	brcc	.+16     	; 0xce2 <TIMER_Manager_reset+0x1c>
     cd2:	21 81       	ldd	r18, Z+1	; 0x01
     cd4:	2a 30       	cpi	r18, 0x0A	; 10
     cd6:	38 f4       	brcc	.+14     	; 0xce6 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
     cd8:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <TIMER_reset>
     cdc:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	08 95       	ret
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	08 95       	ret
     ce6:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
     ce8:	08 95       	ret

00000cea <main>:
     cea:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <APP_start>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	08 95       	ret

00000cf4 <ADC_init>:

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(st_config == NULL){
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	99 f0       	breq	.+38     	; 0xd1e <ADC_init+0x2a>
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
     cf8:	fc 01       	movw	r30, r24
     cfa:	21 81       	ldd	r18, Z+1	; 0x01
     cfc:	20 68       	ori	r18, 0x80	; 128
     cfe:	26 b9       	out	0x06, r18	; 6
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
     d00:	80 81       	ld	r24, Z
     d02:	82 95       	swap	r24
     d04:	88 0f       	add	r24, r24
     d06:	88 0f       	add	r24, r24
     d08:	80 7c       	andi	r24, 0xC0	; 192
     d0a:	87 b9       	out	0x07, r24	; 7
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <ADC_init+0x20>
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	8a 30       	cpi	r24, 0x0A	; 10
     d16:	91 05       	cpc	r25, r1
     d18:	e4 f3       	brlt	.-8      	; 0xd12 <ADC_init+0x1e>
#include "adc.h"

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	08 95       	ret
	if(st_config == NULL){
		ret = ADC_E_NOT_OK;
     d1e:	84 e0       	ldi	r24, 0x04	; 4
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
		
	}
	return ret;
	
}
     d20:	08 95       	ret

00000d22 <ADC_read>:
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, uint16_t * u16_data)
{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
     d28:	88 30       	cpi	r24, 0x08	; 8
     d2a:	e0 f5       	brcc	.+120    	; 0xda4 <ADC_read+0x82>
     d2c:	61 15       	cp	r22, r1
     d2e:	71 05       	cpc	r23, r1
     d30:	d9 f1       	breq	.+118    	; 0xda8 <ADC_read+0x86>
     d32:	8b 01       	movw	r16, r22
     d34:	c8 2f       	mov	r28, r24
		ret =	ADC_E_NOT_OK;
	}
	else{
		if(((DDRA & (1U<<u8_channelID))>>u8_channelID) != 0)
     d36:	4a b3       	in	r20, 0x1a	; 26
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	9c 01       	movw	r18, r24
     d3e:	0c 2e       	mov	r0, r28
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <ADC_read+0x24>
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <ADC_read+0x20>
     d4a:	84 2f       	mov	r24, r20
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	82 23       	and	r24, r18
     d50:	93 23       	and	r25, r19
     d52:	0c 2e       	mov	r0, r28
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <ADC_read+0x38>
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <ADC_read+0x34>
     d5e:	89 2b       	or	r24, r25
     d60:	29 f0       	breq	.+10     	; 0xd6c <ADC_read+0x4a>
		{
			DIO_init (porta, u8_channelID, STD_INPUT);
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	6c 2f       	mov	r22, r28
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_init>
		}
		
		while(READ_BIT(ADCSRA_ADD, ADC_START_CONVERSION) == 1);
     d6c:	36 99       	sbic	0x06, 6	; 6
     d6e:	fe cf       	rjmp	.-4      	; 0xd6c <ADC_read+0x4a>
		
		ADMUX_ADD  = (0xf8 & ADMUX_ADD) | u8_channelID;
     d70:	87 b1       	in	r24, 0x07	; 7
     d72:	88 7f       	andi	r24, 0xF8	; 248
     d74:	8c 2b       	or	r24, r28
     d76:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADCSRA_ADD, ADC_START_CONVERSION);
     d78:	86 b1       	in	r24, 0x06	; 6
     d7a:	80 64       	ori	r24, 0x40	; 64
     d7c:	86 b9       	out	0x06, r24	; 6
     d7e:	8f e1       	ldi	r24, 0x1F	; 31
     d80:	9e e4       	ldi	r25, 0x4E	; 78
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <ADC_read+0x60>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <ADC_read+0x66>
     d88:	00 00       	nop
		_delay_ms(10);
		while(READ_BIT(ADCSRA_ADD, ADC_INT_FLAG) == 0);
     d8a:	34 9b       	sbis	0x06, 4	; 6
     d8c:	fe cf       	rjmp	.-4      	; 0xd8a <ADC_read+0x68>
		uint16_t	adc_data_temp=0;	
		adc_data_temp = ADCL_ADD;
     d8e:	24 b1       	in	r18, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
     d90:	85 b1       	in	r24, 0x05	; 5
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	98 2f       	mov	r25, r24
     d96:	88 27       	eor	r24, r24
     d98:	82 2b       	or	r24, r18
		*u16_data  = adc_data_temp;
     d9a:	f8 01       	movw	r30, r16
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
	return ret;
	
}
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, uint16_t * u16_data)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <ADC_read+0x88>
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
		ret =	ADC_E_NOT_OK;
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <ADC_read+0x88>
     da8:	84 e0       	ldi	r24, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
		*u16_data  = adc_data_temp;
	}
	
	return ret;
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <DIO_init>:
     db2:	68 30       	cpi	r22, 0x08	; 8
     db4:	a0 f5       	brcc	.+104    	; 0xe1e <DIO_init+0x6c>
     db6:	81 11       	cpse	r24, r1
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <DIO_init+0x1e>
     dba:	8a b3       	in	r24, 0x1a	; 26
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_init+0x12>
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	6a 95       	dec	r22
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_init+0xe>
     dc8:	48 2b       	or	r20, r24
     dca:	4a bb       	out	0x1a, r20	; 26
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	08 95       	ret
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	59 f4       	brne	.+22     	; 0xdea <DIO_init+0x38>
     dd4:	87 b3       	in	r24, 0x17	; 23
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_init+0x2c>
     dda:	44 0f       	add	r20, r20
     ddc:	55 1f       	adc	r21, r21
     dde:	6a 95       	dec	r22
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_init+0x28>
     de2:	48 2b       	or	r20, r24
     de4:	47 bb       	out	0x17, r20	; 23
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	08 95       	ret
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	59 f4       	brne	.+22     	; 0xe04 <DIO_init+0x52>
     dee:	84 b3       	in	r24, 0x14	; 20
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_init+0x46>
     df4:	44 0f       	add	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	6a 95       	dec	r22
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_init+0x42>
     dfc:	48 2b       	or	r20, r24
     dfe:	44 bb       	out	0x14, r20	; 20
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	08 95       	ret
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	69 f4       	brne	.+26     	; 0xe22 <DIO_init+0x70>
     e08:	81 b3       	in	r24, 0x11	; 17
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_init+0x60>
     e0e:	44 0f       	add	r20, r20
     e10:	55 1f       	adc	r21, r21
     e12:	6a 95       	dec	r22
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_init+0x5c>
     e16:	48 2b       	or	r20, r24
     e18:	41 bb       	out	0x11, r20	; 17
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	08 95       	ret
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	08 95       	ret
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	08 95       	ret

00000e26 <DIO_writePIN>:
     e26:	68 30       	cpi	r22, 0x08	; 8
     e28:	08 f0       	brcs	.+2      	; 0xe2c <DIO_writePIN+0x6>
     e2a:	74 c0       	rjmp	.+232    	; 0xf14 <DIO_writePIN+0xee>
     e2c:	81 11       	cpse	r24, r1
     e2e:	1b c0       	rjmp	.+54     	; 0xe66 <DIO_writePIN+0x40>
     e30:	41 30       	cpi	r20, 0x01	; 1
     e32:	61 f4       	brne	.+24     	; 0xe4c <DIO_writePIN+0x26>
     e34:	2b b3       	in	r18, 0x1b	; 27
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_writePIN+0x1a>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	6a 95       	dec	r22
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_writePIN+0x16>
     e44:	82 2b       	or	r24, r18
     e46:	8b bb       	out	0x1b, r24	; 27
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	08 95       	ret
     e4c:	2b b3       	in	r18, 0x1b	; 27
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_writePIN+0x32>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	6a 95       	dec	r22
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_writePIN+0x2e>
     e5c:	80 95       	com	r24
     e5e:	82 23       	and	r24, r18
     e60:	8b bb       	out	0x1b, r24	; 27
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	08 95       	ret
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	d9 f4       	brne	.+54     	; 0xea0 <DIO_writePIN+0x7a>
     e6a:	41 30       	cpi	r20, 0x01	; 1
     e6c:	61 f4       	brne	.+24     	; 0xe86 <DIO_writePIN+0x60>
     e6e:	28 b3       	in	r18, 0x18	; 24
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_writePIN+0x54>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	6a 95       	dec	r22
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_writePIN+0x50>
     e7e:	82 2b       	or	r24, r18
     e80:	88 bb       	out	0x18, r24	; 24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	08 95       	ret
     e86:	28 b3       	in	r18, 0x18	; 24
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_writePIN+0x6c>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	6a 95       	dec	r22
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_writePIN+0x68>
     e96:	80 95       	com	r24
     e98:	82 23       	and	r24, r18
     e9a:	88 bb       	out	0x18, r24	; 24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	08 95       	ret
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	d9 f4       	brne	.+54     	; 0xeda <DIO_writePIN+0xb4>
     ea4:	41 30       	cpi	r20, 0x01	; 1
     ea6:	61 f4       	brne	.+24     	; 0xec0 <DIO_writePIN+0x9a>
     ea8:	25 b3       	in	r18, 0x15	; 21
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_writePIN+0x8e>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	6a 95       	dec	r22
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_writePIN+0x8a>
     eb8:	82 2b       	or	r24, r18
     eba:	85 bb       	out	0x15, r24	; 21
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	08 95       	ret
     ec0:	25 b3       	in	r18, 0x15	; 21
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_writePIN+0xa6>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	6a 95       	dec	r22
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_writePIN+0xa2>
     ed0:	80 95       	com	r24
     ed2:	82 23       	and	r24, r18
     ed4:	85 bb       	out	0x15, r24	; 21
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	08 95       	ret
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	e9 f4       	brne	.+58     	; 0xf18 <DIO_writePIN+0xf2>
     ede:	41 30       	cpi	r20, 0x01	; 1
     ee0:	61 f4       	brne	.+24     	; 0xefa <DIO_writePIN+0xd4>
     ee2:	22 b3       	in	r18, 0x12	; 18
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_writePIN+0xc8>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	6a 95       	dec	r22
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_writePIN+0xc4>
     ef2:	82 2b       	or	r24, r18
     ef4:	82 bb       	out	0x12, r24	; 18
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret
     efa:	22 b3       	in	r18, 0x12	; 18
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_writePIN+0xe0>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	6a 95       	dec	r22
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_writePIN+0xdc>
     f0a:	80 95       	com	r24
     f0c:	82 23       	and	r24, r18
     f0e:	82 bb       	out	0x12, r24	; 18
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	08 95       	ret
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	08 95       	ret
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	08 95       	ret

00000f1c <DIO_readPIN>:
     f1c:	68 30       	cpi	r22, 0x08	; 8
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <DIO_readPIN+0x6>
     f20:	64 c0       	rjmp	.+200    	; 0xfea <DIO_readPIN+0xce>
     f22:	81 11       	cpse	r24, r1
     f24:	17 c0       	rjmp	.+46     	; 0xf54 <DIO_readPIN+0x38>
     f26:	79 b3       	in	r23, 0x19	; 25
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9c 01       	movw	r18, r24
     f2e:	06 2e       	mov	r0, r22
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_readPIN+0x1a>
     f32:	22 0f       	add	r18, r18
     f34:	33 1f       	adc	r19, r19
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_readPIN+0x16>
     f3a:	87 2f       	mov	r24, r23
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	82 23       	and	r24, r18
     f40:	93 23       	and	r25, r19
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_readPIN+0x2c>
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	6a 95       	dec	r22
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_readPIN+0x28>
     f4c:	fa 01       	movw	r30, r20
     f4e:	80 83       	st	Z, r24
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	08 95       	ret
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	b9 f4       	brne	.+46     	; 0xf86 <DIO_readPIN+0x6a>
     f58:	76 b3       	in	r23, 0x16	; 22
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9c 01       	movw	r18, r24
     f60:	06 2e       	mov	r0, r22
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_readPIN+0x4c>
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_readPIN+0x48>
     f6c:	87 2f       	mov	r24, r23
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	82 23       	and	r24, r18
     f72:	93 23       	and	r25, r19
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_readPIN+0x5e>
     f76:	96 95       	lsr	r25
     f78:	87 95       	ror	r24
     f7a:	6a 95       	dec	r22
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_readPIN+0x5a>
     f7e:	fa 01       	movw	r30, r20
     f80:	80 83       	st	Z, r24
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	08 95       	ret
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	b9 f4       	brne	.+46     	; 0xfb8 <DIO_readPIN+0x9c>
     f8a:	73 b3       	in	r23, 0x13	; 19
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9c 01       	movw	r18, r24
     f92:	06 2e       	mov	r0, r22
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_readPIN+0x7e>
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_readPIN+0x7a>
     f9e:	87 2f       	mov	r24, r23
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	82 23       	and	r24, r18
     fa4:	93 23       	and	r25, r19
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_readPIN+0x90>
     fa8:	96 95       	lsr	r25
     faa:	87 95       	ror	r24
     fac:	6a 95       	dec	r22
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_readPIN+0x8c>
     fb0:	fa 01       	movw	r30, r20
     fb2:	80 83       	st	Z, r24
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	08 95       	ret
     fb8:	83 30       	cpi	r24, 0x03	; 3
     fba:	c9 f4       	brne	.+50     	; 0xfee <DIO_readPIN+0xd2>
     fbc:	70 b3       	in	r23, 0x10	; 16
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9c 01       	movw	r18, r24
     fc4:	06 2e       	mov	r0, r22
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_readPIN+0xb0>
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_readPIN+0xac>
     fd0:	87 2f       	mov	r24, r23
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	82 23       	and	r24, r18
     fd6:	93 23       	and	r25, r19
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_readPIN+0xc2>
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	6a 95       	dec	r22
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_readPIN+0xbe>
     fe2:	fa 01       	movw	r30, r20
     fe4:	80 83       	st	Z, r24
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	08 95       	ret
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	08 95       	ret
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	08 95       	ret

00000ff2 <__vector_11>:
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    1014:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sg_Timer0_callBackPtr>
    1018:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <sg_Timer0_callBackPtr+0x1>
    101c:	89 2b       	or	r24, r25
    101e:	41 f0       	breq	.+16     	; 0x1030 <__vector_11+0x3e>
    1020:	88 b7       	in	r24, 0x38	; 56
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	88 bf       	out	0x38, r24	; 56
    1026:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <sg_Timer0_callBackPtr>
    102a:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <sg_Timer0_callBackPtr+0x1>
    102e:	09 95       	icall
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_9>:
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
    1074:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sg_Timer1_callBackPtr>
    1078:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sg_Timer1_callBackPtr+0x1>
    107c:	89 2b       	or	r24, r25
    107e:	41 f0       	breq	.+16     	; 0x1090 <__vector_9+0x3e>
    1080:	88 b7       	in	r24, 0x38	; 56
    1082:	8b 7f       	andi	r24, 0xFB	; 251
    1084:	88 bf       	out	0x38, r24	; 56
    1086:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <sg_Timer1_callBackPtr>
    108a:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <sg_Timer1_callBackPtr+0x1>
    108e:	09 95       	icall
    1090:	ff 91       	pop	r31
    1092:	ef 91       	pop	r30
    1094:	bf 91       	pop	r27
    1096:	af 91       	pop	r26
    1098:	9f 91       	pop	r25
    109a:	8f 91       	pop	r24
    109c:	7f 91       	pop	r23
    109e:	6f 91       	pop	r22
    10a0:	5f 91       	pop	r21
    10a2:	4f 91       	pop	r20
    10a4:	3f 91       	pop	r19
    10a6:	2f 91       	pop	r18
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <__vector_5>:
    10b2:	1f 92       	push	r1
    10b4:	0f 92       	push	r0
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	0f 92       	push	r0
    10ba:	11 24       	eor	r1, r1
    10bc:	2f 93       	push	r18
    10be:	3f 93       	push	r19
    10c0:	4f 93       	push	r20
    10c2:	5f 93       	push	r21
    10c4:	6f 93       	push	r22
    10c6:	7f 93       	push	r23
    10c8:	8f 93       	push	r24
    10ca:	9f 93       	push	r25
    10cc:	af 93       	push	r26
    10ce:	bf 93       	push	r27
    10d0:	ef 93       	push	r30
    10d2:	ff 93       	push	r31
    10d4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sg_Timer2_callBackPtr>
    10d8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <sg_Timer2_callBackPtr+0x1>
    10dc:	89 2b       	or	r24, r25
    10de:	41 f0       	breq	.+16     	; 0x10f0 <__vector_5+0x3e>
    10e0:	88 b7       	in	r24, 0x38	; 56
    10e2:	8f 7b       	andi	r24, 0xBF	; 191
    10e4:	88 bf       	out	0x38, r24	; 56
    10e6:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <sg_Timer2_callBackPtr>
    10ea:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <sg_Timer2_callBackPtr+0x1>
    10ee:	09 95       	icall
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <TIMER_init>:
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	09 f4       	brne	.+2      	; 0x1118 <TIMER_init+0x6>
    1116:	7c c0       	rjmp	.+248    	; 0x1210 <TIMER_init+0xfe>
    1118:	fc 01       	movw	r30, r24
    111a:	20 81       	ld	r18, Z
    111c:	23 30       	cpi	r18, 0x03	; 3
    111e:	08 f0       	brcs	.+2      	; 0x1122 <TIMER_init+0x10>
    1120:	79 c0       	rjmp	.+242    	; 0x1214 <TIMER_init+0x102>
    1122:	31 81       	ldd	r19, Z+1	; 0x01
    1124:	3a 30       	cpi	r19, 0x0A	; 10
    1126:	08 f0       	brcs	.+2      	; 0x112a <TIMER_init+0x18>
    1128:	77 c0       	rjmp	.+238    	; 0x1218 <TIMER_init+0x106>
    112a:	21 30       	cpi	r18, 0x01	; 1
    112c:	19 f1       	breq	.+70     	; 0x1174 <TIMER_init+0x62>
    112e:	20 f0       	brcs	.+8      	; 0x1138 <TIMER_init+0x26>
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	09 f4       	brne	.+2      	; 0x1136 <TIMER_init+0x24>
    1134:	50 c0       	rjmp	.+160    	; 0x11d6 <TIMER_init+0xc4>
    1136:	72 c0       	rjmp	.+228    	; 0x121c <TIMER_init+0x10a>
    1138:	12 be       	out	0x32, r1	; 50
    113a:	13 be       	out	0x33, r1	; 51
    113c:	1c be       	out	0x3c, r1	; 60
    113e:	fc 01       	movw	r30, r24
    1140:	22 81       	ldd	r18, Z+2	; 0x02
    1142:	22 bf       	out	0x32, r18	; 50
    1144:	23 b7       	in	r18, 0x33	; 51
    1146:	20 68       	ori	r18, 0x80	; 128
    1148:	23 bf       	out	0x33, r18	; 51
    114a:	23 b7       	in	r18, 0x33	; 51
    114c:	2f 7b       	andi	r18, 0xBF	; 191
    114e:	23 bf       	out	0x33, r18	; 51
    1150:	23 b7       	in	r18, 0x33	; 51
    1152:	27 7f       	andi	r18, 0xF7	; 247
    1154:	23 bf       	out	0x33, r18	; 51
    1156:	23 b7       	in	r18, 0x33	; 51
    1158:	2f 7e       	andi	r18, 0xEF	; 239
    115a:	23 bf       	out	0x33, r18	; 51
    115c:	23 b7       	in	r18, 0x33	; 51
    115e:	2f 7d       	andi	r18, 0xDF	; 223
    1160:	23 bf       	out	0x33, r18	; 51
    1162:	84 81       	ldd	r24, Z+4	; 0x04
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	09 f0       	breq	.+2      	; 0x116a <TIMER_init+0x58>
    1168:	5b c0       	rjmp	.+182    	; 0x1220 <TIMER_init+0x10e>
    116a:	89 b7       	in	r24, 0x39	; 57
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	89 bf       	out	0x39, r24	; 57
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	08 95       	ret
    1174:	1c bc       	out	0x2c, r1	; 44
    1176:	1d bc       	out	0x2d, r1	; 45
    1178:	1f bc       	out	0x2f, r1	; 47
    117a:	1e bc       	out	0x2e, r1	; 46
    117c:	1b bc       	out	0x2b, r1	; 43
    117e:	1a bc       	out	0x2a, r1	; 42
    1180:	fc 01       	movw	r30, r24
    1182:	22 81       	ldd	r18, Z+2	; 0x02
    1184:	33 81       	ldd	r19, Z+3	; 0x03
    1186:	3d bd       	out	0x2d, r19	; 45
    1188:	2c bd       	out	0x2c, r18	; 44
    118a:	2f b5       	in	r18, 0x2f	; 47
    118c:	28 60       	ori	r18, 0x08	; 8
    118e:	2f bd       	out	0x2f, r18	; 47
    1190:	2f b5       	in	r18, 0x2f	; 47
    1192:	24 60       	ori	r18, 0x04	; 4
    1194:	2f bd       	out	0x2f, r18	; 47
    1196:	2f b5       	in	r18, 0x2f	; 47
    1198:	2e 7f       	andi	r18, 0xFE	; 254
    119a:	2f bd       	out	0x2f, r18	; 47
    119c:	2f b5       	in	r18, 0x2f	; 47
    119e:	2d 7f       	andi	r18, 0xFD	; 253
    11a0:	2f bd       	out	0x2f, r18	; 47
    11a2:	2e b5       	in	r18, 0x2e	; 46
    11a4:	2f 7e       	andi	r18, 0xEF	; 239
    11a6:	2e bd       	out	0x2e, r18	; 46
    11a8:	2e b5       	in	r18, 0x2e	; 46
    11aa:	27 7f       	andi	r18, 0xF7	; 247
    11ac:	2e bd       	out	0x2e, r18	; 46
    11ae:	2f b5       	in	r18, 0x2f	; 47
    11b0:	2f 7b       	andi	r18, 0xBF	; 191
    11b2:	2f bd       	out	0x2f, r18	; 47
    11b4:	2f b5       	in	r18, 0x2f	; 47
    11b6:	2f 77       	andi	r18, 0x7F	; 127
    11b8:	2f bd       	out	0x2f, r18	; 47
    11ba:	2f b5       	in	r18, 0x2f	; 47
    11bc:	2f 7e       	andi	r18, 0xEF	; 239
    11be:	2f bd       	out	0x2f, r18	; 47
    11c0:	2f b5       	in	r18, 0x2f	; 47
    11c2:	2f 7d       	andi	r18, 0xDF	; 223
    11c4:	2f bd       	out	0x2f, r18	; 47
    11c6:	84 81       	ldd	r24, Z+4	; 0x04
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	61 f5       	brne	.+88     	; 0x1224 <TIMER_init+0x112>
    11cc:	89 b7       	in	r24, 0x39	; 57
    11ce:	84 60       	ori	r24, 0x04	; 4
    11d0:	89 bf       	out	0x39, r24	; 57
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	08 95       	ret
    11d6:	14 bc       	out	0x24, r1	; 36
    11d8:	15 bc       	out	0x25, r1	; 37
    11da:	13 bc       	out	0x23, r1	; 35
    11dc:	fc 01       	movw	r30, r24
    11de:	22 81       	ldd	r18, Z+2	; 0x02
    11e0:	24 bd       	out	0x24, r18	; 36
    11e2:	25 b5       	in	r18, 0x25	; 37
    11e4:	20 68       	ori	r18, 0x80	; 128
    11e6:	25 bd       	out	0x25, r18	; 37
    11e8:	25 b5       	in	r18, 0x25	; 37
    11ea:	2f 7b       	andi	r18, 0xBF	; 191
    11ec:	25 bd       	out	0x25, r18	; 37
    11ee:	25 b5       	in	r18, 0x25	; 37
    11f0:	27 7f       	andi	r18, 0xF7	; 247
    11f2:	25 bd       	out	0x25, r18	; 37
    11f4:	25 b5       	in	r18, 0x25	; 37
    11f6:	2f 7e       	andi	r18, 0xEF	; 239
    11f8:	25 bd       	out	0x25, r18	; 37
    11fa:	25 b5       	in	r18, 0x25	; 37
    11fc:	2f 7d       	andi	r18, 0xDF	; 223
    11fe:	25 bd       	out	0x25, r18	; 37
    1200:	84 81       	ldd	r24, Z+4	; 0x04
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	89 f4       	brne	.+34     	; 0x1228 <TIMER_init+0x116>
    1206:	89 b7       	in	r24, 0x39	; 57
    1208:	80 64       	ori	r24, 0x40	; 64
    120a:	89 bf       	out	0x39, r24	; 57
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	08 95       	ret
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	08 95       	ret
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	08 95       	ret
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	08 95       	ret
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	08 95       	ret
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	08 95       	ret
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	08 95       	ret
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	08 95       	ret

0000122c <TIMER_start>:
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	09 f4       	brne	.+2      	; 0x1232 <TIMER_start+0x6>
    1230:	3b c1       	rjmp	.+630    	; 0x14a8 <TIMER_start+0x27c>
    1232:	dc 01       	movw	r26, r24
    1234:	2c 91       	ld	r18, X
    1236:	23 30       	cpi	r18, 0x03	; 3
    1238:	08 f0       	brcs	.+2      	; 0x123c <TIMER_start+0x10>
    123a:	38 c1       	rjmp	.+624    	; 0x14ac <TIMER_start+0x280>
    123c:	11 96       	adiw	r26, 0x01	; 1
    123e:	ec 91       	ld	r30, X
    1240:	ea 30       	cpi	r30, 0x0A	; 10
    1242:	08 f0       	brcs	.+2      	; 0x1246 <TIMER_start+0x1a>
    1244:	35 c1       	rjmp	.+618    	; 0x14b0 <TIMER_start+0x284>
    1246:	21 30       	cpi	r18, 0x01	; 1
    1248:	09 f4       	brne	.+2      	; 0x124c <TIMER_start+0x20>
    124a:	68 c0       	rjmp	.+208    	; 0x131c <TIMER_start+0xf0>
    124c:	20 f0       	brcs	.+8      	; 0x1256 <TIMER_start+0x2a>
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	09 f4       	brne	.+2      	; 0x1254 <TIMER_start+0x28>
    1252:	c7 c0       	rjmp	.+398    	; 0x13e2 <TIMER_start+0x1b6>
    1254:	2f c1       	rjmp	.+606    	; 0x14b4 <TIMER_start+0x288>
    1256:	8e 2f       	mov	r24, r30
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	8a 30       	cpi	r24, 0x0A	; 10
    125c:	91 05       	cpc	r25, r1
    125e:	08 f0       	brcs	.+2      	; 0x1262 <TIMER_start+0x36>
    1260:	2b c1       	rjmp	.+598    	; 0x14b8 <TIMER_start+0x28c>
    1262:	fc 01       	movw	r30, r24
    1264:	e6 5d       	subi	r30, 0xD6	; 214
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__tablejump2__>
    126c:	83 b7       	in	r24, 0x33	; 51
    126e:	8e 7f       	andi	r24, 0xFE	; 254
    1270:	83 bf       	out	0x33, r24	; 51
    1272:	83 b7       	in	r24, 0x33	; 51
    1274:	8d 7f       	andi	r24, 0xFD	; 253
    1276:	83 bf       	out	0x33, r24	; 51
    1278:	83 b7       	in	r24, 0x33	; 51
    127a:	8b 7f       	andi	r24, 0xFB	; 251
    127c:	83 bf       	out	0x33, r24	; 51
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	08 95       	ret
    1282:	83 b7       	in	r24, 0x33	; 51
    1284:	81 60       	ori	r24, 0x01	; 1
    1286:	83 bf       	out	0x33, r24	; 51
    1288:	83 b7       	in	r24, 0x33	; 51
    128a:	8d 7f       	andi	r24, 0xFD	; 253
    128c:	83 bf       	out	0x33, r24	; 51
    128e:	83 b7       	in	r24, 0x33	; 51
    1290:	8b 7f       	andi	r24, 0xFB	; 251
    1292:	83 bf       	out	0x33, r24	; 51
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret
    1298:	83 b7       	in	r24, 0x33	; 51
    129a:	8e 7f       	andi	r24, 0xFE	; 254
    129c:	83 bf       	out	0x33, r24	; 51
    129e:	83 b7       	in	r24, 0x33	; 51
    12a0:	82 60       	ori	r24, 0x02	; 2
    12a2:	83 bf       	out	0x33, r24	; 51
    12a4:	83 b7       	in	r24, 0x33	; 51
    12a6:	8b 7f       	andi	r24, 0xFB	; 251
    12a8:	83 bf       	out	0x33, r24	; 51
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	08 95       	ret
    12ae:	83 b7       	in	r24, 0x33	; 51
    12b0:	81 60       	ori	r24, 0x01	; 1
    12b2:	83 bf       	out	0x33, r24	; 51
    12b4:	83 b7       	in	r24, 0x33	; 51
    12b6:	82 60       	ori	r24, 0x02	; 2
    12b8:	83 bf       	out	0x33, r24	; 51
    12ba:	83 b7       	in	r24, 0x33	; 51
    12bc:	8b 7f       	andi	r24, 0xFB	; 251
    12be:	83 bf       	out	0x33, r24	; 51
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	08 95       	ret
    12c4:	83 b7       	in	r24, 0x33	; 51
    12c6:	8e 7f       	andi	r24, 0xFE	; 254
    12c8:	83 bf       	out	0x33, r24	; 51
    12ca:	83 b7       	in	r24, 0x33	; 51
    12cc:	8d 7f       	andi	r24, 0xFD	; 253
    12ce:	83 bf       	out	0x33, r24	; 51
    12d0:	83 b7       	in	r24, 0x33	; 51
    12d2:	84 60       	ori	r24, 0x04	; 4
    12d4:	83 bf       	out	0x33, r24	; 51
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	08 95       	ret
    12da:	83 b7       	in	r24, 0x33	; 51
    12dc:	81 60       	ori	r24, 0x01	; 1
    12de:	83 bf       	out	0x33, r24	; 51
    12e0:	83 b7       	in	r24, 0x33	; 51
    12e2:	8d 7f       	andi	r24, 0xFD	; 253
    12e4:	83 bf       	out	0x33, r24	; 51
    12e6:	83 b7       	in	r24, 0x33	; 51
    12e8:	84 60       	ori	r24, 0x04	; 4
    12ea:	83 bf       	out	0x33, r24	; 51
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	08 95       	ret
    12f0:	83 b7       	in	r24, 0x33	; 51
    12f2:	8e 7f       	andi	r24, 0xFE	; 254
    12f4:	83 bf       	out	0x33, r24	; 51
    12f6:	83 b7       	in	r24, 0x33	; 51
    12f8:	82 60       	ori	r24, 0x02	; 2
    12fa:	83 bf       	out	0x33, r24	; 51
    12fc:	83 b7       	in	r24, 0x33	; 51
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	83 bf       	out	0x33, r24	; 51
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	08 95       	ret
    1306:	83 b7       	in	r24, 0x33	; 51
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	83 bf       	out	0x33, r24	; 51
    130c:	83 b7       	in	r24, 0x33	; 51
    130e:	82 60       	ori	r24, 0x02	; 2
    1310:	83 bf       	out	0x33, r24	; 51
    1312:	83 b7       	in	r24, 0x33	; 51
    1314:	84 60       	ori	r24, 0x04	; 4
    1316:	83 bf       	out	0x33, r24	; 51
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	08 95       	ret
    131c:	8e 2f       	mov	r24, r30
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	8a 30       	cpi	r24, 0x0A	; 10
    1322:	91 05       	cpc	r25, r1
    1324:	08 f0       	brcs	.+2      	; 0x1328 <TIMER_start+0xfc>
    1326:	ca c0       	rjmp	.+404    	; 0x14bc <TIMER_start+0x290>
    1328:	fc 01       	movw	r30, r24
    132a:	ec 5c       	subi	r30, 0xCC	; 204
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__tablejump2__>
    1332:	8e b5       	in	r24, 0x2e	; 46
    1334:	8e 7f       	andi	r24, 0xFE	; 254
    1336:	8e bd       	out	0x2e, r24	; 46
    1338:	8e b5       	in	r24, 0x2e	; 46
    133a:	8d 7f       	andi	r24, 0xFD	; 253
    133c:	8e bd       	out	0x2e, r24	; 46
    133e:	8e b5       	in	r24, 0x2e	; 46
    1340:	8b 7f       	andi	r24, 0xFB	; 251
    1342:	8e bd       	out	0x2e, r24	; 46
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	08 95       	ret
    1348:	8e b5       	in	r24, 0x2e	; 46
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	8e bd       	out	0x2e, r24	; 46
    134e:	8e b5       	in	r24, 0x2e	; 46
    1350:	8d 7f       	andi	r24, 0xFD	; 253
    1352:	8e bd       	out	0x2e, r24	; 46
    1354:	8e b5       	in	r24, 0x2e	; 46
    1356:	8b 7f       	andi	r24, 0xFB	; 251
    1358:	8e bd       	out	0x2e, r24	; 46
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	08 95       	ret
    135e:	8e b5       	in	r24, 0x2e	; 46
    1360:	8e 7f       	andi	r24, 0xFE	; 254
    1362:	8e bd       	out	0x2e, r24	; 46
    1364:	8e b5       	in	r24, 0x2e	; 46
    1366:	82 60       	ori	r24, 0x02	; 2
    1368:	8e bd       	out	0x2e, r24	; 46
    136a:	8e b5       	in	r24, 0x2e	; 46
    136c:	8b 7f       	andi	r24, 0xFB	; 251
    136e:	8e bd       	out	0x2e, r24	; 46
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	08 95       	ret
    1374:	8e b5       	in	r24, 0x2e	; 46
    1376:	81 60       	ori	r24, 0x01	; 1
    1378:	8e bd       	out	0x2e, r24	; 46
    137a:	8e b5       	in	r24, 0x2e	; 46
    137c:	82 60       	ori	r24, 0x02	; 2
    137e:	8e bd       	out	0x2e, r24	; 46
    1380:	8e b5       	in	r24, 0x2e	; 46
    1382:	8b 7f       	andi	r24, 0xFB	; 251
    1384:	8e bd       	out	0x2e, r24	; 46
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	08 95       	ret
    138a:	8e b5       	in	r24, 0x2e	; 46
    138c:	8e 7f       	andi	r24, 0xFE	; 254
    138e:	8e bd       	out	0x2e, r24	; 46
    1390:	8e b5       	in	r24, 0x2e	; 46
    1392:	8d 7f       	andi	r24, 0xFD	; 253
    1394:	8e bd       	out	0x2e, r24	; 46
    1396:	8e b5       	in	r24, 0x2e	; 46
    1398:	84 60       	ori	r24, 0x04	; 4
    139a:	8e bd       	out	0x2e, r24	; 46
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	08 95       	ret
    13a0:	8e b5       	in	r24, 0x2e	; 46
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	8e bd       	out	0x2e, r24	; 46
    13a6:	8e b5       	in	r24, 0x2e	; 46
    13a8:	8d 7f       	andi	r24, 0xFD	; 253
    13aa:	8e bd       	out	0x2e, r24	; 46
    13ac:	8e b5       	in	r24, 0x2e	; 46
    13ae:	84 60       	ori	r24, 0x04	; 4
    13b0:	8e bd       	out	0x2e, r24	; 46
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret
    13b6:	8e b5       	in	r24, 0x2e	; 46
    13b8:	8e 7f       	andi	r24, 0xFE	; 254
    13ba:	8e bd       	out	0x2e, r24	; 46
    13bc:	8e b5       	in	r24, 0x2e	; 46
    13be:	82 60       	ori	r24, 0x02	; 2
    13c0:	8e bd       	out	0x2e, r24	; 46
    13c2:	8e b5       	in	r24, 0x2e	; 46
    13c4:	84 60       	ori	r24, 0x04	; 4
    13c6:	8e bd       	out	0x2e, r24	; 46
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	08 95       	ret
    13cc:	8e b5       	in	r24, 0x2e	; 46
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	8e bd       	out	0x2e, r24	; 46
    13d2:	8e b5       	in	r24, 0x2e	; 46
    13d4:	82 60       	ori	r24, 0x02	; 2
    13d6:	8e bd       	out	0x2e, r24	; 46
    13d8:	8e b5       	in	r24, 0x2e	; 46
    13da:	84 60       	ori	r24, 0x04	; 4
    13dc:	8e bd       	out	0x2e, r24	; 46
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	08 95       	ret
    13e2:	8e 2f       	mov	r24, r30
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	91 05       	cpc	r25, r1
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <TIMER_start+0x1c2>
    13ec:	69 c0       	rjmp	.+210    	; 0x14c0 <TIMER_start+0x294>
    13ee:	fc 01       	movw	r30, r24
    13f0:	e2 5c       	subi	r30, 0xC2	; 194
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__tablejump2__>
    13f8:	85 b5       	in	r24, 0x25	; 37
    13fa:	8b 7f       	andi	r24, 0xFB	; 251
    13fc:	85 bd       	out	0x25, r24	; 37
    13fe:	85 b5       	in	r24, 0x25	; 37
    1400:	8d 7f       	andi	r24, 0xFD	; 253
    1402:	85 bd       	out	0x25, r24	; 37
    1404:	85 b5       	in	r24, 0x25	; 37
    1406:	8e 7f       	andi	r24, 0xFE	; 254
    1408:	85 bd       	out	0x25, r24	; 37
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	08 95       	ret
    140e:	85 b5       	in	r24, 0x25	; 37
    1410:	84 60       	ori	r24, 0x04	; 4
    1412:	85 bd       	out	0x25, r24	; 37
    1414:	85 b5       	in	r24, 0x25	; 37
    1416:	8d 7f       	andi	r24, 0xFD	; 253
    1418:	85 bd       	out	0x25, r24	; 37
    141a:	85 b5       	in	r24, 0x25	; 37
    141c:	8e 7f       	andi	r24, 0xFE	; 254
    141e:	85 bd       	out	0x25, r24	; 37
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	08 95       	ret
    1424:	85 b5       	in	r24, 0x25	; 37
    1426:	8b 7f       	andi	r24, 0xFB	; 251
    1428:	85 bd       	out	0x25, r24	; 37
    142a:	85 b5       	in	r24, 0x25	; 37
    142c:	82 60       	ori	r24, 0x02	; 2
    142e:	85 bd       	out	0x25, r24	; 37
    1430:	85 b5       	in	r24, 0x25	; 37
    1432:	8e 7f       	andi	r24, 0xFE	; 254
    1434:	85 bd       	out	0x25, r24	; 37
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	08 95       	ret
    143a:	85 b5       	in	r24, 0x25	; 37
    143c:	84 60       	ori	r24, 0x04	; 4
    143e:	85 bd       	out	0x25, r24	; 37
    1440:	85 b5       	in	r24, 0x25	; 37
    1442:	82 60       	ori	r24, 0x02	; 2
    1444:	85 bd       	out	0x25, r24	; 37
    1446:	85 b5       	in	r24, 0x25	; 37
    1448:	8e 7f       	andi	r24, 0xFE	; 254
    144a:	85 bd       	out	0x25, r24	; 37
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	08 95       	ret
    1450:	85 b5       	in	r24, 0x25	; 37
    1452:	8b 7f       	andi	r24, 0xFB	; 251
    1454:	85 bd       	out	0x25, r24	; 37
    1456:	85 b5       	in	r24, 0x25	; 37
    1458:	8d 7f       	andi	r24, 0xFD	; 253
    145a:	85 bd       	out	0x25, r24	; 37
    145c:	85 b5       	in	r24, 0x25	; 37
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	85 bd       	out	0x25, r24	; 37
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	08 95       	ret
    1466:	85 b5       	in	r24, 0x25	; 37
    1468:	84 60       	ori	r24, 0x04	; 4
    146a:	85 bd       	out	0x25, r24	; 37
    146c:	85 b5       	in	r24, 0x25	; 37
    146e:	8d 7f       	andi	r24, 0xFD	; 253
    1470:	85 bd       	out	0x25, r24	; 37
    1472:	85 b5       	in	r24, 0x25	; 37
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	85 bd       	out	0x25, r24	; 37
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	08 95       	ret
    147c:	85 b5       	in	r24, 0x25	; 37
    147e:	8b 7f       	andi	r24, 0xFB	; 251
    1480:	85 bd       	out	0x25, r24	; 37
    1482:	85 b5       	in	r24, 0x25	; 37
    1484:	82 60       	ori	r24, 0x02	; 2
    1486:	85 bd       	out	0x25, r24	; 37
    1488:	85 b5       	in	r24, 0x25	; 37
    148a:	81 60       	ori	r24, 0x01	; 1
    148c:	85 bd       	out	0x25, r24	; 37
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	08 95       	ret
    1492:	85 b5       	in	r24, 0x25	; 37
    1494:	84 60       	ori	r24, 0x04	; 4
    1496:	85 bd       	out	0x25, r24	; 37
    1498:	85 b5       	in	r24, 0x25	; 37
    149a:	82 60       	ori	r24, 0x02	; 2
    149c:	85 bd       	out	0x25, r24	; 37
    149e:	85 b5       	in	r24, 0x25	; 37
    14a0:	81 60       	ori	r24, 0x01	; 1
    14a2:	85 bd       	out	0x25, r24	; 37
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	08 95       	ret
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	08 95       	ret
    14ac:	83 e0       	ldi	r24, 0x03	; 3
    14ae:	08 95       	ret
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	08 95       	ret
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	08 95       	ret
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	08 95       	ret
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	08 95       	ret
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	08 95       	ret

000014c4 <TIMER_reset>:

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	f1 f0       	breq	.+60     	; 0x1504 <TIMER_reset+0x40>
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 81       	ld	r18, Z
    14cc:	23 30       	cpi	r18, 0x03	; 3
    14ce:	e0 f4       	brcc	.+56     	; 0x1508 <TIMER_reset+0x44>
    14d0:	31 81       	ldd	r19, Z+1	; 0x01
    14d2:	3a 30       	cpi	r19, 0x0A	; 10
    14d4:	d8 f4       	brcc	.+54     	; 0x150c <TIMER_reset+0x48>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
    14d6:	21 30       	cpi	r18, 0x01	; 1
    14d8:	49 f0       	breq	.+18     	; 0x14ec <TIMER_reset+0x28>
    14da:	18 f0       	brcs	.+6      	; 0x14e2 <TIMER_reset+0x1e>
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	69 f0       	breq	.+26     	; 0x14fa <TIMER_reset+0x36>
    14e0:	17 c0       	rjmp	.+46     	; 0x1510 <TIMER_reset+0x4c>
		{
			case TIMER_0:
				
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue;
    14e2:	fc 01       	movw	r30, r24
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	82 bf       	out	0x32, r24	; 50
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    14e8:	80 e0       	ldi	r24, 0x00	; 0
		{
			case TIMER_0:
				
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue;
				break;
    14ea:	08 95       	ret
				
			case TIMER_1:
			
				/*Configure initial value in TCNT1(high&low) for Timer1 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
    14ec:	fc 01       	movw	r30, r24
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	9d bd       	out	0x2d, r25	; 45
    14f4:	8c bd       	out	0x2c, r24	; 44
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    14f6:	80 e0       	ldi	r24, 0x00	; 0
				
			case TIMER_1:
			
				/*Configure initial value in TCNT1(high&low) for Timer1 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
				break;
    14f8:	08 95       	ret
				
			case TIMER_2:
				
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
    14fa:	fc 01       	movw	r30, r24
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	84 bd       	out	0x24, r24	; 36
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1500:	80 e0       	ldi	r24, 0x00	; 0
				
			case TIMER_2:
				
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
				break;
    1502:	08 95       	ret
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	08 95       	ret
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	08 95       	ret
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	08 95       	ret
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
    1510:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
    1512:	08 95       	ret

00001514 <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	d1 f0       	breq	.+52     	; 0x154c <TIMER_setCallBack+0x38>
    1518:	63 30       	cpi	r22, 0x03	; 3
    151a:	d0 f4       	brcc	.+52     	; 0x1550 <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
    151c:	61 30       	cpi	r22, 0x01	; 1
    151e:	51 f0       	breq	.+20     	; 0x1534 <TIMER_setCallBack+0x20>
    1520:	18 f0       	brcs	.+6      	; 0x1528 <TIMER_setCallBack+0x14>
    1522:	62 30       	cpi	r22, 0x02	; 2
    1524:	69 f0       	breq	.+26     	; 0x1540 <TIMER_setCallBack+0x2c>
    1526:	16 c0       	rjmp	.+44     	; 0x1554 <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
    1528:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <sg_Timer0_callBackPtr+0x1>
    152c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1530:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
    1532:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
    1534:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <sg_Timer1_callBackPtr+0x1>
    1538:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    153c:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
    153e:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
    1540:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <sg_Timer2_callBackPtr+0x1>
    1544:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1548:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
    154a:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	08 95       	ret
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
    1554:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
    1556:	08 95       	ret

00001558 <__cmpsf2>:
    1558:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_cmp>
    155c:	08 f4       	brcc	.+2      	; 0x1560 <__cmpsf2+0x8>
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	08 95       	ret

00001562 <__fixunssfsi>:
    1562:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_splitA>
    1566:	88 f0       	brcs	.+34     	; 0x158a <__fixunssfsi+0x28>
    1568:	9f 57       	subi	r25, 0x7F	; 127
    156a:	98 f0       	brcs	.+38     	; 0x1592 <__fixunssfsi+0x30>
    156c:	b9 2f       	mov	r27, r25
    156e:	99 27       	eor	r25, r25
    1570:	b7 51       	subi	r27, 0x17	; 23
    1572:	b0 f0       	brcs	.+44     	; 0x15a0 <__fixunssfsi+0x3e>
    1574:	e1 f0       	breq	.+56     	; 0x15ae <__fixunssfsi+0x4c>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	88 1f       	adc	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	1a f0       	brmi	.+6      	; 0x1586 <__fixunssfsi+0x24>
    1580:	ba 95       	dec	r27
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__fixunssfsi+0x14>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <__fixunssfsi+0x4c>
    1586:	b1 30       	cpi	r27, 0x01	; 1
    1588:	91 f0       	breq	.+36     	; 0x15ae <__fixunssfsi+0x4c>
    158a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_zero>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	08 95       	ret
    1592:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__fp_zero>
    1596:	67 2f       	mov	r22, r23
    1598:	78 2f       	mov	r23, r24
    159a:	88 27       	eor	r24, r24
    159c:	b8 5f       	subi	r27, 0xF8	; 248
    159e:	39 f0       	breq	.+14     	; 0x15ae <__fixunssfsi+0x4c>
    15a0:	b9 3f       	cpi	r27, 0xF9	; 249
    15a2:	cc f3       	brlt	.-14     	; 0x1596 <__fixunssfsi+0x34>
    15a4:	86 95       	lsr	r24
    15a6:	77 95       	ror	r23
    15a8:	67 95       	ror	r22
    15aa:	b3 95       	inc	r27
    15ac:	d9 f7       	brne	.-10     	; 0x15a4 <__fixunssfsi+0x42>
    15ae:	3e f4       	brtc	.+14     	; 0x15be <__fixunssfsi+0x5c>
    15b0:	90 95       	com	r25
    15b2:	80 95       	com	r24
    15b4:	70 95       	com	r23
    15b6:	61 95       	neg	r22
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	8f 4f       	sbci	r24, 0xFF	; 255
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	08 95       	ret

000015c0 <__floatunsisf>:
    15c0:	e8 94       	clt
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__floatsisf+0x12>

000015c4 <__floatsisf>:
    15c4:	97 fb       	bst	r25, 7
    15c6:	3e f4       	brtc	.+14     	; 0x15d6 <__floatsisf+0x12>
    15c8:	90 95       	com	r25
    15ca:	80 95       	com	r24
    15cc:	70 95       	com	r23
    15ce:	61 95       	neg	r22
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	99 23       	and	r25, r25
    15d8:	a9 f0       	breq	.+42     	; 0x1604 <__floatsisf+0x40>
    15da:	f9 2f       	mov	r31, r25
    15dc:	96 e9       	ldi	r25, 0x96	; 150
    15de:	bb 27       	eor	r27, r27
    15e0:	93 95       	inc	r25
    15e2:	f6 95       	lsr	r31
    15e4:	87 95       	ror	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	b7 95       	ror	r27
    15ec:	f1 11       	cpse	r31, r1
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <__floatsisf+0x1c>
    15f0:	fa f4       	brpl	.+62     	; 0x1630 <__floatsisf+0x6c>
    15f2:	bb 0f       	add	r27, r27
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__floatsisf+0x36>
    15f6:	60 ff       	sbrs	r22, 0
    15f8:	1b c0       	rjmp	.+54     	; 0x1630 <__floatsisf+0x6c>
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	16 c0       	rjmp	.+44     	; 0x1630 <__floatsisf+0x6c>
    1604:	88 23       	and	r24, r24
    1606:	11 f0       	breq	.+4      	; 0x160c <__floatsisf+0x48>
    1608:	96 e9       	ldi	r25, 0x96	; 150
    160a:	11 c0       	rjmp	.+34     	; 0x162e <__floatsisf+0x6a>
    160c:	77 23       	and	r23, r23
    160e:	21 f0       	breq	.+8      	; 0x1618 <__floatsisf+0x54>
    1610:	9e e8       	ldi	r25, 0x8E	; 142
    1612:	87 2f       	mov	r24, r23
    1614:	76 2f       	mov	r23, r22
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <__floatsisf+0x5e>
    1618:	66 23       	and	r22, r22
    161a:	71 f0       	breq	.+28     	; 0x1638 <__floatsisf+0x74>
    161c:	96 e8       	ldi	r25, 0x86	; 134
    161e:	86 2f       	mov	r24, r22
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	2a f0       	brmi	.+10     	; 0x1630 <__floatsisf+0x6c>
    1626:	9a 95       	dec	r25
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	88 1f       	adc	r24, r24
    162e:	da f7       	brpl	.-10     	; 0x1626 <__floatsisf+0x62>
    1630:	88 0f       	add	r24, r24
    1632:	96 95       	lsr	r25
    1634:	87 95       	ror	r24
    1636:	97 f9       	bld	r25, 7
    1638:	08 95       	ret

0000163a <__fp_cmp>:
    163a:	99 0f       	add	r25, r25
    163c:	00 08       	sbc	r0, r0
    163e:	55 0f       	add	r21, r21
    1640:	aa 0b       	sbc	r26, r26
    1642:	e0 e8       	ldi	r30, 0x80	; 128
    1644:	fe ef       	ldi	r31, 0xFE	; 254
    1646:	16 16       	cp	r1, r22
    1648:	17 06       	cpc	r1, r23
    164a:	e8 07       	cpc	r30, r24
    164c:	f9 07       	cpc	r31, r25
    164e:	c0 f0       	brcs	.+48     	; 0x1680 <__fp_cmp+0x46>
    1650:	12 16       	cp	r1, r18
    1652:	13 06       	cpc	r1, r19
    1654:	e4 07       	cpc	r30, r20
    1656:	f5 07       	cpc	r31, r21
    1658:	98 f0       	brcs	.+38     	; 0x1680 <__fp_cmp+0x46>
    165a:	62 1b       	sub	r22, r18
    165c:	73 0b       	sbc	r23, r19
    165e:	84 0b       	sbc	r24, r20
    1660:	95 0b       	sbc	r25, r21
    1662:	39 f4       	brne	.+14     	; 0x1672 <__fp_cmp+0x38>
    1664:	0a 26       	eor	r0, r26
    1666:	61 f0       	breq	.+24     	; 0x1680 <__fp_cmp+0x46>
    1668:	23 2b       	or	r18, r19
    166a:	24 2b       	or	r18, r20
    166c:	25 2b       	or	r18, r21
    166e:	21 f4       	brne	.+8      	; 0x1678 <__fp_cmp+0x3e>
    1670:	08 95       	ret
    1672:	0a 26       	eor	r0, r26
    1674:	09 f4       	brne	.+2      	; 0x1678 <__fp_cmp+0x3e>
    1676:	a1 40       	sbci	r26, 0x01	; 1
    1678:	a6 95       	lsr	r26
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	81 1d       	adc	r24, r1
    167e:	81 1d       	adc	r24, r1
    1680:	08 95       	ret

00001682 <__fp_split3>:
    1682:	57 fd       	sbrc	r21, 7
    1684:	90 58       	subi	r25, 0x80	; 128
    1686:	44 0f       	add	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	59 f0       	breq	.+22     	; 0x16a2 <__fp_splitA+0x10>
    168c:	5f 3f       	cpi	r21, 0xFF	; 255
    168e:	71 f0       	breq	.+28     	; 0x16ac <__fp_splitA+0x1a>
    1690:	47 95       	ror	r20

00001692 <__fp_splitA>:
    1692:	88 0f       	add	r24, r24
    1694:	97 fb       	bst	r25, 7
    1696:	99 1f       	adc	r25, r25
    1698:	61 f0       	breq	.+24     	; 0x16b2 <__fp_splitA+0x20>
    169a:	9f 3f       	cpi	r25, 0xFF	; 255
    169c:	79 f0       	breq	.+30     	; 0x16bc <__fp_splitA+0x2a>
    169e:	87 95       	ror	r24
    16a0:	08 95       	ret
    16a2:	12 16       	cp	r1, r18
    16a4:	13 06       	cpc	r1, r19
    16a6:	14 06       	cpc	r1, r20
    16a8:	55 1f       	adc	r21, r21
    16aa:	f2 cf       	rjmp	.-28     	; 0x1690 <__fp_split3+0xe>
    16ac:	46 95       	lsr	r20
    16ae:	f1 df       	rcall	.-30     	; 0x1692 <__fp_splitA>
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <__fp_splitA+0x30>
    16b2:	16 16       	cp	r1, r22
    16b4:	17 06       	cpc	r1, r23
    16b6:	18 06       	cpc	r1, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	f1 cf       	rjmp	.-30     	; 0x169e <__fp_splitA+0xc>
    16bc:	86 95       	lsr	r24
    16be:	71 05       	cpc	r23, r1
    16c0:	61 05       	cpc	r22, r1
    16c2:	08 94       	sec
    16c4:	08 95       	ret

000016c6 <__fp_zero>:
    16c6:	e8 94       	clt

000016c8 <__fp_szero>:
    16c8:	bb 27       	eor	r27, r27
    16ca:	66 27       	eor	r22, r22
    16cc:	77 27       	eor	r23, r23
    16ce:	cb 01       	movw	r24, r22
    16d0:	97 f9       	bld	r25, 7
    16d2:	08 95       	ret

000016d4 <__gesf2>:
    16d4:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_cmp>
    16d8:	08 f4       	brcc	.+2      	; 0x16dc <__gesf2+0x8>
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	08 95       	ret

000016de <__mulsf3>:
    16de:	0e 94 82 0b 	call	0x1704	; 0x1704 <__mulsf3x>
    16e2:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__fp_round>
    16e6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fp_pscA>
    16ea:	38 f0       	brcs	.+14     	; 0x16fa <__mulsf3+0x1c>
    16ec:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_pscB>
    16f0:	20 f0       	brcs	.+8      	; 0x16fa <__mulsf3+0x1c>
    16f2:	95 23       	and	r25, r21
    16f4:	11 f0       	breq	.+4      	; 0x16fa <__mulsf3+0x1c>
    16f6:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_inf>
    16fa:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_nan>
    16fe:	11 24       	eor	r1, r1
    1700:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_szero>

00001704 <__mulsf3x>:
    1704:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fp_split3>
    1708:	70 f3       	brcs	.-36     	; 0x16e6 <__mulsf3+0x8>

0000170a <__mulsf3_pse>:
    170a:	95 9f       	mul	r25, r21
    170c:	c1 f3       	breq	.-16     	; 0x16fe <__mulsf3+0x20>
    170e:	95 0f       	add	r25, r21
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	55 1f       	adc	r21, r21
    1714:	62 9f       	mul	r22, r18
    1716:	f0 01       	movw	r30, r0
    1718:	72 9f       	mul	r23, r18
    171a:	bb 27       	eor	r27, r27
    171c:	f0 0d       	add	r31, r0
    171e:	b1 1d       	adc	r27, r1
    1720:	63 9f       	mul	r22, r19
    1722:	aa 27       	eor	r26, r26
    1724:	f0 0d       	add	r31, r0
    1726:	b1 1d       	adc	r27, r1
    1728:	aa 1f       	adc	r26, r26
    172a:	64 9f       	mul	r22, r20
    172c:	66 27       	eor	r22, r22
    172e:	b0 0d       	add	r27, r0
    1730:	a1 1d       	adc	r26, r1
    1732:	66 1f       	adc	r22, r22
    1734:	82 9f       	mul	r24, r18
    1736:	22 27       	eor	r18, r18
    1738:	b0 0d       	add	r27, r0
    173a:	a1 1d       	adc	r26, r1
    173c:	62 1f       	adc	r22, r18
    173e:	73 9f       	mul	r23, r19
    1740:	b0 0d       	add	r27, r0
    1742:	a1 1d       	adc	r26, r1
    1744:	62 1f       	adc	r22, r18
    1746:	83 9f       	mul	r24, r19
    1748:	a0 0d       	add	r26, r0
    174a:	61 1d       	adc	r22, r1
    174c:	22 1f       	adc	r18, r18
    174e:	74 9f       	mul	r23, r20
    1750:	33 27       	eor	r19, r19
    1752:	a0 0d       	add	r26, r0
    1754:	61 1d       	adc	r22, r1
    1756:	23 1f       	adc	r18, r19
    1758:	84 9f       	mul	r24, r20
    175a:	60 0d       	add	r22, r0
    175c:	21 1d       	adc	r18, r1
    175e:	82 2f       	mov	r24, r18
    1760:	76 2f       	mov	r23, r22
    1762:	6a 2f       	mov	r22, r26
    1764:	11 24       	eor	r1, r1
    1766:	9f 57       	subi	r25, 0x7F	; 127
    1768:	50 40       	sbci	r21, 0x00	; 0
    176a:	9a f0       	brmi	.+38     	; 0x1792 <__mulsf3_pse+0x88>
    176c:	f1 f0       	breq	.+60     	; 0x17aa <__mulsf3_pse+0xa0>
    176e:	88 23       	and	r24, r24
    1770:	4a f0       	brmi	.+18     	; 0x1784 <__mulsf3_pse+0x7a>
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	bb 1f       	adc	r27, r27
    1778:	66 1f       	adc	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	88 1f       	adc	r24, r24
    177e:	91 50       	subi	r25, 0x01	; 1
    1780:	50 40       	sbci	r21, 0x00	; 0
    1782:	a9 f7       	brne	.-22     	; 0x176e <__mulsf3_pse+0x64>
    1784:	9e 3f       	cpi	r25, 0xFE	; 254
    1786:	51 05       	cpc	r21, r1
    1788:	80 f0       	brcs	.+32     	; 0x17aa <__mulsf3_pse+0xa0>
    178a:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_inf>
    178e:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_szero>
    1792:	5f 3f       	cpi	r21, 0xFF	; 255
    1794:	e4 f3       	brlt	.-8      	; 0x178e <__mulsf3_pse+0x84>
    1796:	98 3e       	cpi	r25, 0xE8	; 232
    1798:	d4 f3       	brlt	.-12     	; 0x178e <__mulsf3_pse+0x84>
    179a:	86 95       	lsr	r24
    179c:	77 95       	ror	r23
    179e:	67 95       	ror	r22
    17a0:	b7 95       	ror	r27
    17a2:	f7 95       	ror	r31
    17a4:	e7 95       	ror	r30
    17a6:	9f 5f       	subi	r25, 0xFF	; 255
    17a8:	c1 f7       	brne	.-16     	; 0x179a <__mulsf3_pse+0x90>
    17aa:	fe 2b       	or	r31, r30
    17ac:	88 0f       	add	r24, r24
    17ae:	91 1d       	adc	r25, r1
    17b0:	96 95       	lsr	r25
    17b2:	87 95       	ror	r24
    17b4:	97 f9       	bld	r25, 7
    17b6:	08 95       	ret

000017b8 <__fp_inf>:
    17b8:	97 f9       	bld	r25, 7
    17ba:	9f 67       	ori	r25, 0x7F	; 127
    17bc:	80 e8       	ldi	r24, 0x80	; 128
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	08 95       	ret

000017c4 <__fp_nan>:
    17c4:	9f ef       	ldi	r25, 0xFF	; 255
    17c6:	80 ec       	ldi	r24, 0xC0	; 192
    17c8:	08 95       	ret

000017ca <__fp_pscA>:
    17ca:	00 24       	eor	r0, r0
    17cc:	0a 94       	dec	r0
    17ce:	16 16       	cp	r1, r22
    17d0:	17 06       	cpc	r1, r23
    17d2:	18 06       	cpc	r1, r24
    17d4:	09 06       	cpc	r0, r25
    17d6:	08 95       	ret

000017d8 <__fp_pscB>:
    17d8:	00 24       	eor	r0, r0
    17da:	0a 94       	dec	r0
    17dc:	12 16       	cp	r1, r18
    17de:	13 06       	cpc	r1, r19
    17e0:	14 06       	cpc	r1, r20
    17e2:	05 06       	cpc	r0, r21
    17e4:	08 95       	ret

000017e6 <__fp_round>:
    17e6:	09 2e       	mov	r0, r25
    17e8:	03 94       	inc	r0
    17ea:	00 0c       	add	r0, r0
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <__fp_round+0xc>
    17ee:	88 23       	and	r24, r24
    17f0:	52 f0       	brmi	.+20     	; 0x1806 <__fp_round+0x20>
    17f2:	bb 0f       	add	r27, r27
    17f4:	40 f4       	brcc	.+16     	; 0x1806 <__fp_round+0x20>
    17f6:	bf 2b       	or	r27, r31
    17f8:	11 f4       	brne	.+4      	; 0x17fe <__fp_round+0x18>
    17fa:	60 ff       	sbrs	r22, 0
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <__fp_round+0x20>
    17fe:	6f 5f       	subi	r22, 0xFF	; 255
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	8f 4f       	sbci	r24, 0xFF	; 255
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	08 95       	ret

00001808 <__tablejump2__>:
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	05 90       	lpm	r0, Z+
    180e:	f4 91       	lpm	r31, Z
    1810:	e0 2d       	mov	r30, r0
    1812:	09 94       	ijmp

00001814 <__itoa_ncheck>:
    1814:	bb 27       	eor	r27, r27
    1816:	4a 30       	cpi	r20, 0x0A	; 10
    1818:	31 f4       	brne	.+12     	; 0x1826 <__itoa_ncheck+0x12>
    181a:	99 23       	and	r25, r25
    181c:	22 f4       	brpl	.+8      	; 0x1826 <__itoa_ncheck+0x12>
    181e:	bd e2       	ldi	r27, 0x2D	; 45
    1820:	90 95       	com	r25
    1822:	81 95       	neg	r24
    1824:	9f 4f       	sbci	r25, 0xFF	; 255
    1826:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__utoa_common>

0000182a <__utoa_ncheck>:
    182a:	bb 27       	eor	r27, r27

0000182c <__utoa_common>:
    182c:	fb 01       	movw	r30, r22
    182e:	55 27       	eor	r21, r21
    1830:	aa 27       	eor	r26, r26
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	aa 1f       	adc	r26, r26
    1838:	a4 17       	cp	r26, r20
    183a:	10 f0       	brcs	.+4      	; 0x1840 <__utoa_common+0x14>
    183c:	a4 1b       	sub	r26, r20
    183e:	83 95       	inc	r24
    1840:	50 51       	subi	r21, 0x10	; 16
    1842:	b9 f7       	brne	.-18     	; 0x1832 <__utoa_common+0x6>
    1844:	a0 5d       	subi	r26, 0xD0	; 208
    1846:	aa 33       	cpi	r26, 0x3A	; 58
    1848:	08 f0       	brcs	.+2      	; 0x184c <__utoa_common+0x20>
    184a:	a9 5d       	subi	r26, 0xD9	; 217
    184c:	a1 93       	st	Z+, r26
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	79 f7       	brne	.-34     	; 0x1830 <__utoa_common+0x4>
    1852:	b1 11       	cpse	r27, r1
    1854:	b1 93       	st	Z+, r27
    1856:	11 92       	st	Z+, r1
    1858:	cb 01       	movw	r24, r22
    185a:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <strrev>

0000185e <strrev>:
    185e:	dc 01       	movw	r26, r24
    1860:	fc 01       	movw	r30, r24
    1862:	67 2f       	mov	r22, r23
    1864:	71 91       	ld	r23, Z+
    1866:	77 23       	and	r23, r23
    1868:	e1 f7       	brne	.-8      	; 0x1862 <strrev+0x4>
    186a:	32 97       	sbiw	r30, 0x02	; 2
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <strrev+0x18>
    186e:	7c 91       	ld	r23, X
    1870:	6d 93       	st	X+, r22
    1872:	70 83       	st	Z, r23
    1874:	62 91       	ld	r22, -Z
    1876:	ae 17       	cp	r26, r30
    1878:	bf 07       	cpc	r27, r31
    187a:	c8 f3       	brcs	.-14     	; 0x186e <strrev+0x10>
    187c:	08 95       	ret

0000187e <_exit>:
    187e:	f8 94       	cli

00001880 <__stop_program>:
    1880:	ff cf       	rjmp	.-2      	; 0x1880 <__stop_program>
