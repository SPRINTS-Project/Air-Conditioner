
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000510  000005a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  008000ba  008000ba  000005fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018de  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3b  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da4  00000000  00000000  00002c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  000039bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d4  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000640  00000000  00000000  0000460c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa eb       	ldi	r26, 0xBA	; 186
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3e       	cpi	r26, 0xEB	; 235
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 97 01 	call	0x32e	; 0x32e <main>
  8a:	0c 94 86 02 	jmp	0x50c	; 0x50c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
  92:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <u8_delay>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <u8_delay>
	TIMER_Manager_reset(&st_gs_timer_0_config);
  9c:	81 ee       	ldi	r24, 0xE1	; 225
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 96 01 	call	0x32c	; 0x32c <TIMER_Manager_reset>
  a4:	08 95       	ret

000000a6 <APP_init>:
	}
}


void APP_init(void)
{
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_0_config.u8_timerNum = TIMER_0;
  ac:	e1 ee       	ldi	r30, 0xE1	; 225
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	st_gs_timer_0_config.u8_timer_ovf_int_enable = 1;
  b2:	d1 e0       	ldi	r29, 0x01	; 1
  b4:	d4 83       	std	Z+4, r29	; 0x04
	st_gs_timer_0_config.u16_timer_InitialValue = APP_TIMER_0_INIT_VALUE;
  b6:	80 ef       	ldi	r24, 0xF0	; 240
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	93 83       	std	Z+3, r25	; 0x03
  bc:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_0_config.callBackFunction =  APP_timer0OvfHandeler;
  be:	89 e4       	ldi	r24, 0x49	; 73
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	96 83       	std	Z+6, r25	; 0x06
  c4:	85 83       	std	Z+5, r24	; 0x05
	TIMER_Manager_init(&st_gs_timer_0_config);
  c6:	cf 01       	movw	r24, r30
  c8:	0e 94 95 01 	call	0x32a	; 0x32a <TIMER_Manager_init>
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
  cc:	ee ed       	ldi	r30, 0xDE	; 222
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	87 e0       	ldi	r24, 0x07	; 7
  d2:	82 83       	std	Z+2, r24	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
  d4:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
  d6:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
  d8:	cf 01       	movw	r24, r30
  da:	0e 94 94 01 	call	0x328	; 0x328 <TEMP_SENSOR_init>
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
  de:	ed ec       	ldi	r30, 0xCD	; 205
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
	st_gs_lcdConfig.u8_d4Pin[0] = porta;
  e4:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[1] = pin0;
  e6:	12 86       	std	Z+10, r1	; 0x0a
	st_gs_lcdConfig.u8_d5Pin[0] = porta;
  e8:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[1] = pin1;
  ea:	d4 87       	std	Z+12, r29	; 0x0c
	st_gs_lcdConfig.u8_d6Pin[0] = porta;
  ec:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[1] = pin2;
  ee:	c2 e0       	ldi	r28, 0x02	; 2
  f0:	c6 87       	std	Z+14, r28	; 0x0e
	st_gs_lcdConfig.u8_d7Pin[0] = porta;
  f2:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[1] = pin3;
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	10 8b       	std	Z+16, r17	; 0x10
	LCD_init(&st_gs_lcdConfig);
  f8:	cf 01       	movw	r24, r30
  fa:	0e 94 90 01 	call	0x320	; 0x320 <LCD_init>
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[0] = portc;
  fe:	ef eb       	ldi	r30, 0xBF	; 191
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[1] = pin3;
 104:	17 83       	std	Z+7, r17	; 0x07
	st_gs_keypadConfig.u8_col2Pin[0] = portc;
 106:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[1] = pin4;
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	81 87       	std	Z+9, r24	; 0x09
	st_gs_keypadConfig.u8_col3Pin[0] = portc;
 10c:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[1] = pin5;
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	83 87       	std	Z+11, r24	; 0x0b
	st_gs_keypadConfig.u8_col4Pin[0] = portc;
 112:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[1] = pin6;
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	85 87       	std	Z+13, r24	; 0x0d
	st_gs_keypadConfig.u8_row1Pin[0] = portc;
 118:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[1] = pin0 ;
 11a:	11 82       	std	Z+1, r1	; 0x01
	st_gs_keypadConfig.u8_row2Pin[0] = portc;
 11c:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[1] = pin1 ;
 11e:	d3 83       	std	Z+3, r29	; 0x03
	st_gs_keypadConfig.u8_row3Pin[0] = portc;
 120:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[1] = pin2 ;
 122:	c5 83       	std	Z+5, r28	; 0x05
	KEYPAD_init(&st_gs_keypadConfig);
 124:	cf 01       	movw	r24, r30
 126:	0e 94 8e 01 	call	0x31c	; 0x31c <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
 12a:	ed eb       	ldi	r30, 0xBD	; 189
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
 130:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
 132:	cf 01       	movw	r24, r30
 134:	0e 94 64 01 	call	0x2c8	; 0x2c8 <BUZZER_init>
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	08 95       	ret

00000140 <APP_welcome>:


void APP_welcome(void)
{
	LCD_clear();
 140:	0e 94 91 01 	call	0x322	; 0x322 <LCD_clear>
	LCD_setCursor(1,1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 92 01 	call	0x324	; 0x324 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Welcome");
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 93 01 	call	0x326	; 0x326 <LCD_writeString>
	u8_delay = 0 ;
 154:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <u8_delay>
 158:	ff cf       	rjmp	.-2      	; 0x158 <APP_welcome+0x18>

0000015a <APP_set>:




void APP_set(void)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	00 d0       	rcall	.+0      	; 0x160 <APP_set+0x6>
 160:	1f 92       	push	r1
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
 166:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	itoa(u8_gs_programTemp,ch_arrs_curTempToString,10);
 168:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 16c:	4a e0       	ldi	r20, 0x0A	; 10
 16e:	be 01       	movw	r22, r28
 170:	6e 5f       	subi	r22, 0xFE	; 254
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__itoa_ncheck>
	LCD_clear();
 17a:	0e 94 91 01 	call	0x322	; 0x322 <LCD_clear>
	LCD_setCursor(1,1);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 92 01 	call	0x324	; 0x324 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
 186:	88 e6       	ldi	r24, 0x68	; 104
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 93 01 	call	0x326	; 0x326 <LCD_writeString>
	LCD_setCursor(1,8);
 18e:	68 e0       	ldi	r22, 0x08	; 8
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 92 01 	call	0x324	; 0x324 <LCD_setCursor>
	LCD_writeString((uint8_t*)ch_arrs_curTempToString);
 196:	ce 01       	movw	r24, r28
 198:	02 96       	adiw	r24, 0x02	; 2
 19a:	0e 94 93 01 	call	0x326	; 0x326 <LCD_writeString>
	LCD_setCursor(1,11);
 19e:	6b e0       	ldi	r22, 0x0B	; 11
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 92 01 	call	0x324	; 0x324 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
 1a6:	88 e6       	ldi	r24, 0x68	; 104
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 93 01 	call	0x326	; 0x326 <LCD_writeString>
	
	
	KEYPAD_read(&u8_keypadData);
 1ae:	ce 01       	movw	r24, r28
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	0e 94 8f 01 	call	0x31e	; 0x31e <KEYPAD_read>
	if (u8_keypadData == '1')
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	81 33       	cpi	r24, 0x31	; 49
 1ba:	41 f4       	brne	.+16     	; 0x1cc <APP_set+0x72>
	{
		// Increment
		if (u8_gs_programTemp < 35)
 1bc:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end>
 1c0:	83 32       	cpi	r24, 0x23	; 35
 1c2:	98 f4       	brcc	.+38     	; 0x1ea <APP_set+0x90>
		{
			u8_gs_programTemp++;
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <APP_set+0x90>
		}
	}
	else if (u8_keypadData == '2')
 1cc:	82 33       	cpi	r24, 0x32	; 50
 1ce:	41 f4       	brne	.+16     	; 0x1e0 <APP_set+0x86>
	{
		// Decrement
		if (u8_gs_programTemp >18)
 1d0:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end>
 1d4:	83 31       	cpi	r24, 0x13	; 19
 1d6:	48 f0       	brcs	.+18     	; 0x1ea <APP_set+0x90>
		{
			u8_gs_programTemp--;
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <APP_set+0x90>
		}
	}
	else if (u8_keypadData == '3')
 1e0:	83 33       	cpi	r24, 0x33	; 51
 1e2:	19 f4       	brne	.+6      	; 0x1ea <APP_set+0x90>
	{
		// Set
		u8_en_gs_programState = APP_WORKING;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <u8_en_gs_programState>
	}
	else{
		// do nothing
	}
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <APP_working>:



void APP_working(void)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <APP_working+0x6>
 1fc:	1f 92       	push	r1
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
 202:	19 82       	std	Y+1, r1	; 0x01
 204:	4a e0       	ldi	r20, 0x0A	; 10
 206:	be 01       	movw	r22, r28
 208:	6e 5f       	subi	r22, 0xFE	; 254
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__itoa_ncheck>
	
	// convert int to string
	itoa(u8_gs_curTemp,ch_arrs_curTempToString,10);
	
	// print current temp
	LCD_clear();
 214:	0e 94 91 01 	call	0x322	; 0x322 <LCD_clear>
	LCD_setCursor(1,1);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 92 01 	call	0x324	; 0x324 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Current Temp = ");
 220:	8f e6       	ldi	r24, 0x6F	; 111
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 93 01 	call	0x326	; 0x326 <LCD_writeString>
	LCD_setCursor(2,1);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 92 01 	call	0x324	; 0x324 <LCD_setCursor>
	LCD_writeString((uint8_t*)ch_arrs_curTempToString);
 230:	ce 01       	movw	r24, r28
 232:	02 96       	adiw	r24, 0x02	; 2
 234:	0e 94 93 01 	call	0x326	; 0x326 <LCD_writeString>
		
		
		// start the BUZZER
		BUZZER_start();
	}
	KEYPAD_read(&u8_keypadData);
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	0e 94 8f 01 	call	0x31e	; 0x31e <KEYPAD_read>
	if (u8_keypadData == '5')
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	85 33       	cpi	r24, 0x35	; 53
 244:	81 f4       	brne	.+32     	; 0x266 <APP_working+0x70>
	{
		// reset
		
		// Stop the BUZZER
		BUZZER_stop();
 246:	0e 94 7f 01 	call	0x2fe	; 0x2fe <BUZZER_stop>
		
		// Set the program temp with the default temp
		u8_gs_programTemp = u8_gc_defaultTemp;
 24a:	84 e1       	ldi	r24, 0x14	; 20
 24c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
		
		// clear LCD and print Temp value is resettled to 20
		LCD_clear();
 250:	0e 94 91 01 	call	0x322	; 0x322 <LCD_clear>
		LCD_setCursor(1,1);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 92 01 	call	0x324	; 0x324 <LCD_setCursor>
		LCD_writeString((uint8_t*)"Temp value is resettled to 20");
 25c:	8f e7       	ldi	r24, 0x7F	; 127
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 93 01 	call	0x326	; 0x326 <LCD_writeString>
 264:	ff cf       	rjmp	.-2      	; 0x264 <APP_working+0x6e>
		while(u8_delay <= 2);
		
		// change the program state
		u8_en_gs_programState = APP_SET_TEMP;
	}
	else if (u8_keypadData == '4')
 266:	84 33       	cpi	r24, 0x34	; 52
 268:	31 f4       	brne	.+12     	; 0x276 <APP_working+0x80>
	{
		// adjust
		
		// Stop the BUZZER
		BUZZER_stop();
 26a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <BUZZER_stop>
		
		// change the program state
		u8_en_gs_programState = APP_SET_TEMP;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <u8_en_gs_programState>
		
		// 1s timeout
		u8_delay = 0;
		while(u8_delay <= 2);
	}
}
 274:	0b c0       	rjmp	.+22     	; 0x28c <APP_working+0x96>
		u8_en_gs_programState = APP_SET_TEMP;
	}
	else{
		
		// Invalid button
		LCD_clear();
 276:	0e 94 91 01 	call	0x322	; 0x322 <LCD_clear>
		LCD_setCursor(1,1);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 92 01 	call	0x324	; 0x324 <LCD_setCursor>
		LCD_writeString((uint8_t*)"the operation is not allowed");
 282:	8d e9       	ldi	r24, 0x9D	; 157
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 93 01 	call	0x326	; 0x326 <LCD_writeString>
 28a:	ff cf       	rjmp	.-2      	; 0x28a <APP_working+0x94>
		
		// 1s timeout
		u8_delay = 0;
		while(u8_delay <= 2);
	}
}
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <APP_start>:
void APP_timer0OvfHandeler(void);


void APP_start(void)
{
	APP_init();
 298:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_init>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <APP_start+0xa>
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
 29e:	0e 94 a0 00 	call	0x140	; 0x140 <APP_welcome>
void APP_start(void)
{
	APP_init();
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
 2a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <u8_en_gs_programState>
 2a6:	81 11       	cpse	r24, r1
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <APP_start+0x18>
 2aa:	f9 cf       	rjmp	.-14     	; 0x29e <APP_start+0x6>
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
 2ac:	0e 94 ad 00 	call	0x15a	; 0x15a <APP_set>
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
 2b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <u8_en_gs_programState>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	d1 f3       	breq	.-12     	; 0x2ac <APP_start+0x14>
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <APP_start+0x26>
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
		{
			APP_working();
 2ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <APP_working>
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
 2be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <u8_en_gs_programState>
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	d1 f3       	breq	.-12     	; 0x2ba <APP_start+0x22>
 2c6:	ed cf       	rjmp	.-38     	; 0x2a2 <APP_start+0xa>

000002c8 <BUZZER_init>:
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
	
	return BUZZER_E_OK;
}
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	99 f0       	breq	.+38     	; 0x2f6 <BUZZER_init+0x2e>
 2d0:	ec 01       	movw	r28, r24
 2d2:	68 81       	ld	r22, Y
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	0e 94 9c 01 	call	0x338	; 0x338 <DIO_init>
 2dc:	81 11       	cpse	r24, r1
 2de:	0c c0       	rjmp	.+24     	; 0x2f8 <BUZZER_init+0x30>
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	e9 ee       	ldi	r30, 0xE9	; 233
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	81 83       	std	Z+1, r24	; 0x01
 2e8:	88 81       	ld	r24, Y
 2ea:	80 83       	st	Z, r24
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <u8_gs_buzzerState>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <BUZZER_init+0x30>
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <BUZZER_stop>:
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
 2fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <u8_gs_buzzerState>
 302:	88 23       	and	r24, r24
 304:	49 f0       	breq	.+18     	; 0x318 <BUZZER_stop+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
 306:	e9 ee       	ldi	r30, 0xE9	; 233
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	60 81       	ld	r22, Z
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	81 81       	ldd	r24, Z+1	; 0x01
 310:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_writePIN>
	
	return BUZZER_E_OK;
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
 318:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
	
	return BUZZER_E_OK;
 31a:	08 95       	ret

0000031c <KEYPAD_init>:


u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	
}
 31c:	08 95       	ret

0000031e <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{
	
 31e:	08 95       	ret

00000320 <LCD_init>:


u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
	
}
 320:	08 95       	ret

00000322 <LCD_clear>:
u8_en_lcdErrorsType LCD_clear (void)
{
	
}
 322:	08 95       	ret

00000324 <LCD_setCursor>:
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	
}
 324:	08 95       	ret

00000326 <LCD_writeString>:
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
	
}
 326:	08 95       	ret

00000328 <TEMP_SENSOR_init>:


u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
	
}
 328:	08 95       	ret

0000032a <TIMER_Manager_init>:
	
}
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	
}
 32a:	08 95       	ret

0000032c <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	
 32c:	08 95       	ret

0000032e <main>:



int main(void)
{
	APP_start();
 32e:	0e 94 4c 01 	call	0x298	; 0x298 <APP_start>
}
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret

00000338 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 338:	68 30       	cpi	r22, 0x08	; 8
 33a:	a0 f5       	brcc	.+104    	; 0x3a4 <DIO_init+0x6c>
	{
		if (port == porta)
 33c:	81 11       	cpse	r24, r1
 33e:	0b c0       	rjmp	.+22     	; 0x356 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 340:	8a b3       	in	r24, 0x1a	; 26
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_init+0x12>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_init+0xe>
 34e:	48 2b       	or	r20, r24
 350:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
		}
		else if (port == portb)
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	59 f4       	brne	.+22     	; 0x370 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 35a:	87 b3       	in	r24, 0x17	; 23
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_init+0x2c>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_init+0x28>
 368:	48 2b       	or	r20, r24
 36a:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret
		}
		else if (port == portc)
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	59 f4       	brne	.+22     	; 0x38a <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 374:	84 b3       	in	r24, 0x14	; 20
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_init+0x46>
 37a:	44 0f       	add	r20, r20
 37c:	55 1f       	adc	r21, r21
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_init+0x42>
 382:	48 2b       	or	r20, r24
 384:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
		}
		else if (port == portd)
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	69 f4       	brne	.+26     	; 0x3a8 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 38e:	81 b3       	in	r24, 0x11	; 17
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_init+0x60>
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_init+0x5c>
 39c:	48 2b       	or	r20, r24
 39e:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 3a8:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 3aa:	08 95       	ret

000003ac <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 3ac:	68 30       	cpi	r22, 0x08	; 8
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <DIO_writePIN+0x6>
 3b0:	74 c0       	rjmp	.+232    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
	{
		if (port == porta)
 3b2:	81 11       	cpse	r24, r1
 3b4:	1b c0       	rjmp	.+54     	; 0x3ec <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	61 f4       	brne	.+24     	; 0x3d2 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 3ba:	2b b3       	in	r18, 0x1b	; 27
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_writePIN+0x1a>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_writePIN+0x16>
 3ca:	82 2b       	or	r24, r18
 3cc:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 3d2:	2b b3       	in	r18, 0x1b	; 27
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_writePIN+0x32>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_writePIN+0x2e>
 3e2:	80 95       	com	r24
 3e4:	82 23       	and	r24, r18
 3e6:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
		}
		else if (port == portb)
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	d9 f4       	brne	.+54     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
			if (state == STD_HIGH)
 3f0:	41 30       	cpi	r20, 0x01	; 1
 3f2:	61 f4       	brne	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				WR_PORT_B |= (1U << pin);
 3f4:	28 b3       	in	r18, 0x18	; 24
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_writePIN+0x50>
 404:	82 2b       	or	r24, r18
 406:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 40c:	28 b3       	in	r18, 0x18	; 24
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	82 23       	and	r24, r18
 420:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
		}
		else if (port == portc)
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	d9 f4       	brne	.+54     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		{
			if (state == STD_HIGH)
 42a:	41 30       	cpi	r20, 0x01	; 1
 42c:	61 f4       	brne	.+24     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			{
				WR_PORT_C |= (1U << pin);
 42e:	25 b3       	in	r18, 0x15	; 21
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	82 2b       	or	r24, r18
 440:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 446:	25 b3       	in	r18, 0x15	; 21
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	80 95       	com	r24
 458:	82 23       	and	r24, r18
 45a:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret
		}
		else if (port == portd)
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	e9 f4       	brne	.+58     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		{
			if (state == STD_HIGH)
 464:	41 30       	cpi	r20, 0x01	; 1
 466:	61 f4       	brne	.+24     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			{
				WR_PORT_D |= (1U << pin);
 468:	22 b3       	in	r18, 0x12	; 18
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	82 2b       	or	r24, r18
 47a:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 480:	22 b3       	in	r18, 0x12	; 18
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	80 95       	com	r24
 492:	82 23       	and	r24, r18
 494:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 49e:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 4a0:	08 95       	ret

000004a2 <__itoa_ncheck>:
 4a2:	bb 27       	eor	r27, r27
 4a4:	4a 30       	cpi	r20, 0x0A	; 10
 4a6:	31 f4       	brne	.+12     	; 0x4b4 <__itoa_ncheck+0x12>
 4a8:	99 23       	and	r25, r25
 4aa:	22 f4       	brpl	.+8      	; 0x4b4 <__itoa_ncheck+0x12>
 4ac:	bd e2       	ldi	r27, 0x2D	; 45
 4ae:	90 95       	com	r25
 4b0:	81 95       	neg	r24
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__utoa_common>

000004b8 <__utoa_ncheck>:
 4b8:	bb 27       	eor	r27, r27

000004ba <__utoa_common>:
 4ba:	fb 01       	movw	r30, r22
 4bc:	55 27       	eor	r21, r21
 4be:	aa 27       	eor	r26, r26
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	aa 1f       	adc	r26, r26
 4c6:	a4 17       	cp	r26, r20
 4c8:	10 f0       	brcs	.+4      	; 0x4ce <__utoa_common+0x14>
 4ca:	a4 1b       	sub	r26, r20
 4cc:	83 95       	inc	r24
 4ce:	50 51       	subi	r21, 0x10	; 16
 4d0:	b9 f7       	brne	.-18     	; 0x4c0 <__utoa_common+0x6>
 4d2:	a0 5d       	subi	r26, 0xD0	; 208
 4d4:	aa 33       	cpi	r26, 0x3A	; 58
 4d6:	08 f0       	brcs	.+2      	; 0x4da <__utoa_common+0x20>
 4d8:	a9 5d       	subi	r26, 0xD9	; 217
 4da:	a1 93       	st	Z+, r26
 4dc:	00 97       	sbiw	r24, 0x00	; 0
 4de:	79 f7       	brne	.-34     	; 0x4be <__utoa_common+0x4>
 4e0:	b1 11       	cpse	r27, r1
 4e2:	b1 93       	st	Z+, r27
 4e4:	11 92       	st	Z+, r1
 4e6:	cb 01       	movw	r24, r22
 4e8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <strrev>

000004ec <strrev>:
 4ec:	dc 01       	movw	r26, r24
 4ee:	fc 01       	movw	r30, r24
 4f0:	67 2f       	mov	r22, r23
 4f2:	71 91       	ld	r23, Z+
 4f4:	77 23       	and	r23, r23
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <strrev+0x4>
 4f8:	32 97       	sbiw	r30, 0x02	; 2
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <strrev+0x18>
 4fc:	7c 91       	ld	r23, X
 4fe:	6d 93       	st	X+, r22
 500:	70 83       	st	Z, r23
 502:	62 91       	ld	r22, -Z
 504:	ae 17       	cp	r26, r30
 506:	bf 07       	cpc	r27, r31
 508:	c8 f3       	brcs	.-14     	; 0x4fc <strrev+0x10>
 50a:	08 95       	ret

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
