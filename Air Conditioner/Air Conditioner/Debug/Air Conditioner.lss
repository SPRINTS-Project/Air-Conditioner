
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ba2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800060  00800060  00000c16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002746  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb2  00000000  00000000  000035ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a5d  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00005edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5f  00000000  00000000  0000639c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014ce  00000000  00000000  00006efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000083c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__vector_5>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_9>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_11>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	4f 04       	cpc	r4, r15
  56:	5a 04       	cpc	r5, r10
  58:	65 04       	cpc	r6, r5
  5a:	75 05       	cpc	r23, r5
  5c:	70 04       	cpc	r7, r0
  5e:	75 05       	cpc	r23, r5
  60:	7b 04       	cpc	r7, r11
  62:	86 04       	cpc	r8, r6
  64:	91 04       	cpc	r9, r1
  66:	9c 04       	cpc	r9, r12
  68:	b2 04       	cpc	r11, r2
  6a:	bd 04       	cpc	r11, r13
  6c:	c8 04       	cpc	r12, r8
  6e:	77 05       	cpc	r23, r7
  70:	d3 04       	cpc	r13, r3
  72:	77 05       	cpc	r23, r7
  74:	de 04       	cpc	r13, r14
  76:	e9 04       	cpc	r14, r9
  78:	f4 04       	cpc	r15, r4
  7a:	ff 04       	cpc	r15, r15
  7c:	15 05       	cpc	r17, r5
  7e:	20 05       	cpc	r18, r0
  80:	2b 05       	cpc	r18, r11
  82:	36 05       	cpc	r19, r6
  84:	41 05       	cpc	r20, r1
  86:	4c 05       	cpc	r20, r12
  88:	57 05       	cpc	r21, r7
  8a:	62 05       	cpc	r22, r2

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf e5       	ldi	r28, 0x5F	; 95
  92:	d8 e0       	ldi	r29, 0x08	; 8
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	10 e0       	ldi	r17, 0x00	; 0
  9a:	a0 e6       	ldi	r26, 0x60	; 96
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a0 36       	cpi	r26, 0x60	; 96
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	a0 e6       	ldi	r26, 0x60	; 96
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ac 39       	cpi	r26, 0x9C	; 156
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  c2:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TIMER_Manager_reset(&st_gs_timer_0_config);
  d4:	86 e6       	ldi	r24, 0x66	; 102
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 02 	call	0x492	; 0x492 <TIMER_Manager_reset>
  dc:	08 95       	ret

000000de <APP_init>:
	}
}


void APP_init(void)
{
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_0_config.u8_timerNum = TIMER_0;
  e4:	e6 e6       	ldi	r30, 0x66	; 102
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	st_gs_timer_0_config.u8_timer_ovf_int_enable = TIMER_INTERRUPT_FEATURE_ENABLE;
  ea:	14 82       	std	Z+4, r1	; 0x04
	st_gs_timer_0_config.u16_timer_InitialValue = APP_TIMER_0_INIT_VALUE;
  ec:	80 ef       	ldi	r24, 0xF0	; 240
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	93 83       	std	Z+3, r25	; 0x03
  f2:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_0_config.callBackFunction =  APP_timer0OvfHandeler;
  f4:	85 e6       	ldi	r24, 0x65	; 101
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	96 83       	std	Z+6, r25	; 0x06
  fa:	85 83       	std	Z+5, r24	; 0x05
	TIMER_Manager_init(&st_gs_timer_0_config);
  fc:	cf 01       	movw	r24, r30
  fe:	0e 94 17 02 	call	0x42e	; 0x42e <TIMER_Manager_init>
	TIMER_Manager_start(&st_gs_timer_0_config);
 102:	86 e6       	ldi	r24, 0x66	; 102
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 37 02 	call	0x46e	; 0x46e <TIMER_Manager_start>
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
 10a:	e3 e6       	ldi	r30, 0x63	; 99
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	82 83       	std	Z+2, r24	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
 112:	d1 e0       	ldi	r29, 0x01	; 1
 114:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
 116:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
 118:	cf 01       	movw	r24, r30
 11a:	0e 94 16 02 	call	0x42c	; 0x42c <TEMP_SENSOR_init>
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
 11e:	e7 e7       	ldi	r30, 0x77	; 119
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	10 82       	st	Z, r1
	st_gs_lcdConfig.u8_d4Pin[0] = porta;
 124:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[1] = pin0;
 126:	12 86       	std	Z+10, r1	; 0x0a
	st_gs_lcdConfig.u8_d5Pin[0] = porta;
 128:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[1] = pin1;
 12a:	d4 87       	std	Z+12, r29	; 0x0c
	st_gs_lcdConfig.u8_d6Pin[0] = porta;
 12c:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[1] = pin2;
 12e:	c2 e0       	ldi	r28, 0x02	; 2
 130:	c6 87       	std	Z+14, r28	; 0x0e
	st_gs_lcdConfig.u8_d7Pin[0] = porta;
 132:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[1] = pin3;
 134:	13 e0       	ldi	r17, 0x03	; 3
 136:	10 8b       	std	Z+16, r17	; 0x10
	LCD_init(&st_gs_lcdConfig);
 138:	cf 01       	movw	r24, r30
 13a:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_init>
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[0] = portc;
 13e:	ee e8       	ldi	r30, 0x8E	; 142
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[1] = pin3;
 144:	17 83       	std	Z+7, r17	; 0x07
	st_gs_keypadConfig.u8_col2Pin[0] = portc;
 146:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[1] = pin4;
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	81 87       	std	Z+9, r24	; 0x09
	st_gs_keypadConfig.u8_col3Pin[0] = portc;
 14c:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[1] = pin5;
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	83 87       	std	Z+11, r24	; 0x0b
	st_gs_keypadConfig.u8_col4Pin[0] = portc;
 152:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[1] = pin6;
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	85 87       	std	Z+13, r24	; 0x0d
	st_gs_keypadConfig.u8_row1Pin[0] = portc;
 158:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[1] = pin0 ;
 15a:	11 82       	std	Z+1, r1	; 0x01
	st_gs_keypadConfig.u8_row2Pin[0] = portc;
 15c:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[1] = pin1 ;
 15e:	d3 83       	std	Z+3, r29	; 0x03
	st_gs_keypadConfig.u8_row3Pin[0] = portc;
 160:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[1] = pin2 ;
 162:	c5 83       	std	Z+5, r28	; 0x05
	KEYPAD_init(&st_gs_keypadConfig);
 164:	cf 01       	movw	r24, r30
 166:	0e 94 db 00 	call	0x1b6	; 0x1b6 <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
 16a:	e1 e6       	ldi	r30, 0x61	; 97
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
 170:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
 172:	cf 01       	movw	r24, r30
 174:	0e 94 c0 00 	call	0x180	; 0x180 <BUZZER_init>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	08 95       	ret

00000180 <BUZZER_init>:
static uint8_t u8_gs_buzzerState = NOT_INIT;



u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	99 f0       	breq	.+38     	; 0x1ae <BUZZER_init+0x2e>
 188:	ec 01       	movw	r28, r24
		return BUZZER_E_NOT_OK;
	
	// Set Buzzer pin as output
	u8_en_dioErrors u8_dioRetVal = DIO_init(st_config->u8_port, st_config->u8_pin, STD_OUTPUT);
 18a:	68 81       	ld	r22, Y
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
	
	// Check if there is an error from dio driver
	if(u8_dioRetVal)
 194:	81 11       	cpse	r24, r1
 196:	0c c0       	rjmp	.+24     	; 0x1b0 <BUZZER_init+0x30>
		return u8_dioRetVal;
	
	// Store configuration locally
	st_gs_buzzerConfig.u8_port = st_config->u8_port;
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	ee e6       	ldi	r30, 0x6E	; 110
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	81 83       	std	Z+1, r24	; 0x01
	st_gs_buzzerConfig.u8_pin = st_config->u8_pin;
 1a0:	88 81       	ld	r24, Y
 1a2:	80 83       	st	Z, r24
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <u8_gs_buzzerState>
	
	return BUZZER_E_OK;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <BUZZER_init+0x30>

u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
		return BUZZER_E_NOT_OK;
 1ae:	86 e0       	ldi	r24, 0x06	; 6
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
	
	return BUZZER_E_OK;
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <KEYPAD_init>:
#define F_CPU 1000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	a9 f1       	breq	.+106    	; 0x228 <KEYPAD_init+0x72>
 1be:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
 1c0:	69 81       	ldd	r22, Y+1	; 0x01
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	88 81       	ld	r24, Y
 1c6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
 1ca:	6b 81       	ldd	r22, Y+3	; 0x03
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
 1d4:	6d 81       	ldd	r22, Y+5	; 0x05
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	8c 81       	ldd	r24, Y+4	; 0x04
 1da:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
 1de:	69 81       	ldd	r22, Y+1	; 0x01
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	88 81       	ld	r24, Y
 1e4:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
 1e8:	6b 81       	ldd	r22, Y+3	; 0x03
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
 1f2:	6d 81       	ldd	r22, Y+5	; 0x05
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	8c 81       	ldd	r24, Y+4	; 0x04
 1f8:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
 1fc:	6f 81       	ldd	r22, Y+7	; 0x07
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	8e 81       	ldd	r24, Y+6	; 0x06
 202:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
 206:	69 85       	ldd	r22, Y+9	; 0x09
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	88 85       	ldd	r24, Y+8	; 0x08
 20c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
 210:	6b 85       	ldd	r22, Y+11	; 0x0b
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	8a 85       	ldd	r24, Y+10	; 0x0a
 216:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
 21a:	6d 85       	ldd	r22, Y+13	; 0x0d
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	8c 85       	ldd	r24, Y+12	; 0x0c
 220:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	01 c0       	rjmp	.+2      	; 0x22a <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
 228:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <ENABLE>:
	{
		//do nothing
	}
}
static void ENABLE(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
	
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_HIGH);
 234:	c7 e7       	ldi	r28, 0x77	; 119
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	6e 89       	ldd	r22, Y+22	; 0x16
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	8d 89       	ldd	r24, Y+21	; 0x15
 23e:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	00 00       	nop
	_delay_us(1);
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_LOW);
 244:	6e 89       	ldd	r22, Y+22	; 0x16
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	8d 89       	ldd	r24, Y+21	; 0x15
 24a:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>

 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <LCD_cmd>:
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
void LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	ec 01       	movw	r28, r24
 25c:	16 2f       	mov	r17, r22
 25e:	6e 89       	ldd	r22, Y+22	; 0x16
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	8d 89       	ldd	r24, Y+21	; 0x15
 264:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_LOW);
 268:	6a 89       	ldd	r22, Y+18	; 0x12
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	89 89       	ldd	r24, Y+17	; 0x11
 26e:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 272:	6c 89       	ldd	r22, Y+20	; 0x14
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	8b 89       	ldd	r24, Y+19	; 0x13
 278:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 27c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <mode>
 280:	81 11       	cpse	r24, r1
 282:	48 c0       	rjmp	.+144    	; 0x314 <LCD_cmd+0xc0>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 284:	68 89       	ldd	r22, Y+16	; 0x10
 286:	41 2f       	mov	r20, r17
 288:	44 1f       	adc	r20, r20
 28a:	44 27       	eor	r20, r20
 28c:	44 1f       	adc	r20, r20
 28e:	8f 85       	ldd	r24, Y+15	; 0x0f
 290:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 294:	6e 85       	ldd	r22, Y+14	; 0x0e
 296:	16 fb       	bst	r17, 6
 298:	44 27       	eor	r20, r20
 29a:	40 f9       	bld	r20, 0
 29c:	8d 85       	ldd	r24, Y+13	; 0x0d
 29e:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 2a2:	6c 85       	ldd	r22, Y+12	; 0x0c
 2a4:	15 fb       	bst	r17, 5
 2a6:	44 27       	eor	r20, r20
 2a8:	40 f9       	bld	r20, 0
 2aa:	8b 85       	ldd	r24, Y+11	; 0x0b
 2ac:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 2b0:	6a 85       	ldd	r22, Y+10	; 0x0a
 2b2:	14 fb       	bst	r17, 4
 2b4:	44 27       	eor	r20, r20
 2b6:	40 f9       	bld	r20, 0
 2b8:	89 85       	ldd	r24, Y+9	; 0x09
 2ba:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
		ENABLE();
 2be:	0e 94 18 01 	call	0x230	; 0x230 <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	8d ee       	ldi	r24, 0xED	; 237
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_cmd+0x72>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_cmd+0x78>
 2cc:	00 00       	nop
		_delay_ms(3);
	    DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 2ce:	68 89       	ldd	r22, Y+16	; 0x10
 2d0:	13 fb       	bst	r17, 3
 2d2:	44 27       	eor	r20, r20
 2d4:	40 f9       	bld	r20, 0
 2d6:	8f 85       	ldd	r24, Y+15	; 0x0f
 2d8:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 2dc:	6e 85       	ldd	r22, Y+14	; 0x0e
 2de:	12 fb       	bst	r17, 2
 2e0:	44 27       	eor	r20, r20
 2e2:	40 f9       	bld	r20, 0
 2e4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2e6:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 2ea:	6c 85       	ldd	r22, Y+12	; 0x0c
 2ec:	11 fb       	bst	r17, 1
 2ee:	44 27       	eor	r20, r20
 2f0:	40 f9       	bld	r20, 0
 2f2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2f4:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 2f8:	6a 85       	ldd	r22, Y+10	; 0x0a
 2fa:	41 2f       	mov	r20, r17
 2fc:	41 70       	andi	r20, 0x01	; 1
 2fe:	89 85       	ldd	r24, Y+9	; 0x09
 300:	0e 94 98 02 	call	0x530	; 0x530 <DIO_writePIN>
		ENABLE();
 304:	0e 94 18 01 	call	0x230	; 0x230 <ENABLE>
 308:	8d ee       	ldi	r24, 0xED	; 237
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_cmd+0xb8>
 310:	00 c0       	rjmp	.+0      	; 0x312 <LCD_cmd+0xbe>
 312:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	08 95       	ret

0000031c <LCD_init>:
#include<util/delay.h>
extern st_lcdConfigType st_gs_lcdConfig;
static uint8_t mode;

u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=DIO_init(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_OUTPUT);
 322:	6a 89       	ldd	r22, Y+18	; 0x12
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	89 89       	ldd	r24, Y+17	; 0x11
 328:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
	ret_val |=DIO_init(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_OUTPUT);
 32c:	6c 89       	ldd	r22, Y+20	; 0x14
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	8b 89       	ldd	r24, Y+19	; 0x13
 332:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
	ret_val |=DIO_init(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_OUTPUT);
 336:	6e 89       	ldd	r22, Y+22	; 0x16
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	8d 89       	ldd	r24, Y+21	; 0x15
 33c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
	switch(st_config->u8_mode)
 340:	88 81       	ld	r24, Y
 342:	88 23       	and	r24, r24
 344:	19 f0       	breq	.+6      	; 0x34c <LCD_init+0x30>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	79 f1       	breq	.+94     	; 0x3a8 <LCD_init+0x8c>
 34a:	6a c0       	rjmp	.+212    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	{
		case LCD_4_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x02);
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	87 e7       	ldi	r24, 0x77	; 119
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x28);
 356:	68 e2       	ldi	r22, 0x28	; 40
 358:	87 e7       	ldi	r24, 0x77	; 119
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 360:	6c e0       	ldi	r22, 0x0C	; 12
 362:	87 e7       	ldi	r24, 0x77	; 119
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 36a:	66 e0       	ldi	r22, 0x06	; 6
 36c:	87 e7       	ldi	r24, 0x77	; 119
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	87 e7       	ldi	r24, 0x77	; 119
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 37e:	6a 85       	ldd	r22, Y+10	; 0x0a
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	89 85       	ldd	r24, Y+9	; 0x09
 384:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 388:	6c 85       	ldd	r22, Y+12	; 0x0c
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	8b 85       	ldd	r24, Y+11	; 0x0b
 38e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 392:	6e 85       	ldd	r22, Y+14	; 0x0e
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	8d 85       	ldd	r24, Y+13	; 0x0d
 398:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 39c:	68 89       	ldd	r22, Y+16	; 0x10
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	8f 85       	ldd	r24, Y+15	; 0x0f
 3a2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								break;
 3a6:	3c c0       	rjmp	.+120    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
								
	case LCD_8_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x38);
 3a8:	68 e3       	ldi	r22, 0x38	; 56
 3aa:	87 e7       	ldi	r24, 0x77	; 119
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 3b2:	6c e0       	ldi	r22, 0x0C	; 12
 3b4:	87 e7       	ldi	r24, 0x77	; 119
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	87 e7       	ldi	r24, 0x77	; 119
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	87 e7       	ldi	r24, 0x77	; 119
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_cmd>
		                        ret_val |=DIO_init(st_config->u8_d0Pin[0],st_config->u8_d0Pin[1],STD_OUTPUT);
 3d0:	6a 81       	ldd	r22, Y+2	; 0x02
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		                        ret_val |=DIO_init(st_config->u8_d1Pin[0],st_config->u8_d1Pin[1],STD_OUTPUT);
 3da:	6c 81       	ldd	r22, Y+4	; 0x04
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		                        ret_val |=DIO_init(st_config->u8_d2Pin[0],st_config->u8_d2Pin[1],STD_OUTPUT);
 3e4:	6e 81       	ldd	r22, Y+6	; 0x06
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ea:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
		                        ret_val |=DIO_init(st_config->u8_d3Pin[0],st_config->u8_d3Pin[1],STD_OUTPUT);
 3ee:	68 85       	ldd	r22, Y+8	; 0x08
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	8f 81       	ldd	r24, Y+7	; 0x07
 3f4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 3f8:	6a 85       	ldd	r22, Y+10	; 0x0a
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	89 85       	ldd	r24, Y+9	; 0x09
 3fe:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 402:	6c 85       	ldd	r22, Y+12	; 0x0c
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	8b 85       	ldd	r24, Y+11	; 0x0b
 408:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 40c:	6e 85       	ldd	r22, Y+14	; 0x0e
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	8d 85       	ldd	r24, Y+13	; 0x0d
 412:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 416:	68 89       	ldd	r22, Y+16	; 0x10
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	8f 85       	ldd	r24, Y+15	; 0x0f
 41c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_init>
								break;
	default: ret_val=LCD_E_NOT_OK;break;
								
	}
	mode=st_config->u8_mode;
 420:	88 81       	ld	r24, Y
 422:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <mode>
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <TEMP_SENSOR_init>:


u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
	
}
 42c:	08 95       	ret

0000042e <TIMER_Manager_init>:
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	91 f0       	breq	.+36     	; 0x45c <TIMER_Manager_init+0x2e>
 438:	fc 01       	movw	r30, r24
 43a:	20 81       	ld	r18, Z
 43c:	23 30       	cpi	r18, 0x03	; 3
 43e:	80 f4       	brcc	.+32     	; 0x460 <TIMER_Manager_init+0x32>
 440:	21 81       	ldd	r18, Z+1	; 0x01
 442:	2a 30       	cpi	r18, 0x0A	; 10
 444:	78 f4       	brcc	.+30     	; 0x464 <TIMER_Manager_init+0x36>
 446:	ec 01       	movw	r28, r24
 448:	0e 94 a3 03 	call	0x746	; 0x746 <TIMER_init>
 44c:	18 2f       	mov	r17, r24
 44e:	68 81       	ld	r22, Y
 450:	8d 81       	ldd	r24, Y+5	; 0x05
 452:	9e 81       	ldd	r25, Y+6	; 0x06
 454:	0e 94 a7 05 	call	0xb4e	; 0xb4e <TIMER_setCallBack>
 458:	81 2b       	or	r24, r17
 45a:	05 c0       	rjmp	.+10     	; 0x466 <TIMER_Manager_init+0x38>
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	03 c0       	rjmp	.+6      	; 0x466 <TIMER_Manager_init+0x38>
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	01 c0       	rjmp	.+2      	; 0x466 <TIMER_Manager_init+0x38>
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	08 95       	ret

0000046e <TIMER_Manager_start>:
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	51 f0       	breq	.+20     	; 0x486 <TIMER_Manager_start+0x18>
 472:	fc 01       	movw	r30, r24
 474:	20 81       	ld	r18, Z
 476:	23 30       	cpi	r18, 0x03	; 3
 478:	40 f4       	brcc	.+16     	; 0x48a <TIMER_Manager_start+0x1c>
 47a:	21 81       	ldd	r18, Z+1	; 0x01
 47c:	2a 30       	cpi	r18, 0x0A	; 10
 47e:	38 f4       	brcc	.+14     	; 0x48e <TIMER_Manager_start+0x20>
 480:	0e 94 2f 04 	call	0x85e	; 0x85e <TIMER_start>
 484:	08 95       	ret
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	08 95       	ret
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	08 95       	ret
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	08 95       	ret

00000492 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	51 f0       	breq	.+20     	; 0x4aa <TIMER_Manager_reset+0x18>
 496:	fc 01       	movw	r30, r24
 498:	20 81       	ld	r18, Z
 49a:	23 30       	cpi	r18, 0x03	; 3
 49c:	40 f4       	brcc	.+16     	; 0x4ae <TIMER_Manager_reset+0x1c>
 49e:	21 81       	ldd	r18, Z+1	; 0x01
 4a0:	2a 30       	cpi	r18, 0x0A	; 10
 4a2:	38 f4       	brcc	.+14     	; 0x4b2 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
 4a4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER_reset>
 4a8:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	08 95       	ret
 4ae:	83 e0       	ldi	r24, 0x03	; 3
 4b0:	08 95       	ret
 4b2:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
 4b4:	08 95       	ret

000004b6 <main>:
int main(void)
{
	//adc_config.u8_prescaler_selection = ADC_PRESCALER_16;
	//adc_config.u8_ref_selection = ADC_AVCC;
	//ADC_init (&adc_config);
	APP_init();
 4b6:	0e 94 6f 00 	call	0xde	; 0xde <APP_init>
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <main+0x4>

000004bc <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 4bc:	68 30       	cpi	r22, 0x08	; 8
 4be:	a0 f5       	brcc	.+104    	; 0x528 <DIO_init+0x6c>
	{
		if (port == porta)
 4c0:	81 11       	cpse	r24, r1
 4c2:	0b c0       	rjmp	.+22     	; 0x4da <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 4c4:	8a b3       	in	r24, 0x1a	; 26
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_init+0x12>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_init+0xe>
 4d2:	48 2b       	or	r20, r24
 4d4:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	08 95       	ret
		}
		else if (port == portb)
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	59 f4       	brne	.+22     	; 0x4f4 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 4de:	87 b3       	in	r24, 0x17	; 23
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_init+0x2c>
 4e4:	44 0f       	add	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_init+0x28>
 4ec:	48 2b       	or	r20, r24
 4ee:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	08 95       	ret
		}
		else if (port == portc)
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	59 f4       	brne	.+22     	; 0x50e <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 4f8:	84 b3       	in	r24, 0x14	; 20
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_init+0x46>
 4fe:	44 0f       	add	r20, r20
 500:	55 1f       	adc	r21, r21
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_init+0x42>
 506:	48 2b       	or	r20, r24
 508:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret
		}
		else if (port == portd)
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	69 f4       	brne	.+26     	; 0x52c <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 512:	81 b3       	in	r24, 0x11	; 17
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_init+0x60>
 518:	44 0f       	add	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_init+0x5c>
 520:	48 2b       	or	r20, r24
 522:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 52c:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 52e:	08 95       	ret

00000530 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 530:	68 30       	cpi	r22, 0x08	; 8
 532:	08 f0       	brcs	.+2      	; 0x536 <DIO_writePIN+0x6>
 534:	74 c0       	rjmp	.+232    	; 0x61e <DIO_writePIN+0xee>
	{
		if (port == porta)
 536:	81 11       	cpse	r24, r1
 538:	1b c0       	rjmp	.+54     	; 0x570 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 53a:	41 30       	cpi	r20, 0x01	; 1
 53c:	61 f4       	brne	.+24     	; 0x556 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 53e:	2b b3       	in	r18, 0x1b	; 27
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_writePIN+0x1a>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_writePIN+0x16>
 54e:	82 2b       	or	r24, r18
 550:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 556:	2b b3       	in	r18, 0x1b	; 27
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_writePIN+0x32>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_writePIN+0x2e>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	08 95       	ret
		}
		else if (port == portb)
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	d9 f4       	brne	.+54     	; 0x5aa <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 574:	41 30       	cpi	r20, 0x01	; 1
 576:	61 f4       	brne	.+24     	; 0x590 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 578:	28 b3       	in	r18, 0x18	; 24
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_writePIN+0x54>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_writePIN+0x50>
 588:	82 2b       	or	r24, r18
 58a:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 590:	28 b3       	in	r18, 0x18	; 24
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_writePIN+0x6c>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_writePIN+0x68>
 5a0:	80 95       	com	r24
 5a2:	82 23       	and	r24, r18
 5a4:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	08 95       	ret
		}
		else if (port == portc)
 5aa:	82 30       	cpi	r24, 0x02	; 2
 5ac:	d9 f4       	brne	.+54     	; 0x5e4 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	61 f4       	brne	.+24     	; 0x5ca <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 5b2:	25 b3       	in	r18, 0x15	; 21
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_writePIN+0x8e>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_writePIN+0x8a>
 5c2:	82 2b       	or	r24, r18
 5c4:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 5ca:	25 b3       	in	r18, 0x15	; 21
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_writePIN+0xa6>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_writePIN+0xa2>
 5da:	80 95       	com	r24
 5dc:	82 23       	and	r24, r18
 5de:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	08 95       	ret
		}
		else if (port == portd)
 5e4:	83 30       	cpi	r24, 0x03	; 3
 5e6:	e9 f4       	brne	.+58     	; 0x622 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 5e8:	41 30       	cpi	r20, 0x01	; 1
 5ea:	61 f4       	brne	.+24     	; 0x604 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 5ec:	22 b3       	in	r18, 0x12	; 18
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_writePIN+0xc8>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_writePIN+0xc4>
 5fc:	82 2b       	or	r24, r18
 5fe:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 604:	22 b3       	in	r18, 0x12	; 18
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_writePIN+0xe0>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_writePIN+0xdc>
 614:	80 95       	com	r24
 616:	82 23       	and	r24, r18
 618:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 622:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 624:	08 95       	ret

00000626 <__vector_11>:
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
 648:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <sg_Timer0_callBackPtr>
 64c:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <sg_Timer0_callBackPtr+0x1>
 650:	89 2b       	or	r24, r25
 652:	41 f0       	breq	.+16     	; 0x664 <__vector_11+0x3e>
 654:	88 b7       	in	r24, 0x38	; 56
 656:	8e 7f       	andi	r24, 0xFE	; 254
 658:	88 bf       	out	0x38, r24	; 56
 65a:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <sg_Timer0_callBackPtr>
 65e:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <sg_Timer0_callBackPtr+0x1>
 662:	09 95       	icall
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <__vector_9>:
 686:	1f 92       	push	r1
 688:	0f 92       	push	r0
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	0f 92       	push	r0
 68e:	11 24       	eor	r1, r1
 690:	2f 93       	push	r18
 692:	3f 93       	push	r19
 694:	4f 93       	push	r20
 696:	5f 93       	push	r21
 698:	6f 93       	push	r22
 69a:	7f 93       	push	r23
 69c:	8f 93       	push	r24
 69e:	9f 93       	push	r25
 6a0:	af 93       	push	r26
 6a2:	bf 93       	push	r27
 6a4:	ef 93       	push	r30
 6a6:	ff 93       	push	r31
 6a8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <sg_Timer1_callBackPtr>
 6ac:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <sg_Timer1_callBackPtr+0x1>
 6b0:	89 2b       	or	r24, r25
 6b2:	41 f0       	breq	.+16     	; 0x6c4 <__vector_9+0x3e>
 6b4:	88 b7       	in	r24, 0x38	; 56
 6b6:	8b 7f       	andi	r24, 0xFB	; 251
 6b8:	88 bf       	out	0x38, r24	; 56
 6ba:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <sg_Timer1_callBackPtr>
 6be:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <sg_Timer1_callBackPtr+0x1>
 6c2:	09 95       	icall
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	bf 91       	pop	r27
 6ca:	af 91       	pop	r26
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	7f 91       	pop	r23
 6d2:	6f 91       	pop	r22
 6d4:	5f 91       	pop	r21
 6d6:	4f 91       	pop	r20
 6d8:	3f 91       	pop	r19
 6da:	2f 91       	pop	r18
 6dc:	0f 90       	pop	r0
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	0f 90       	pop	r0
 6e2:	1f 90       	pop	r1
 6e4:	18 95       	reti

000006e6 <__vector_5>:
 6e6:	1f 92       	push	r1
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	0f 92       	push	r0
 6ee:	11 24       	eor	r1, r1
 6f0:	2f 93       	push	r18
 6f2:	3f 93       	push	r19
 6f4:	4f 93       	push	r20
 6f6:	5f 93       	push	r21
 6f8:	6f 93       	push	r22
 6fa:	7f 93       	push	r23
 6fc:	8f 93       	push	r24
 6fe:	9f 93       	push	r25
 700:	af 93       	push	r26
 702:	bf 93       	push	r27
 704:	ef 93       	push	r30
 706:	ff 93       	push	r31
 708:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <sg_Timer2_callBackPtr>
 70c:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <sg_Timer2_callBackPtr+0x1>
 710:	89 2b       	or	r24, r25
 712:	41 f0       	breq	.+16     	; 0x724 <__vector_5+0x3e>
 714:	88 b7       	in	r24, 0x38	; 56
 716:	8f 7b       	andi	r24, 0xBF	; 191
 718:	88 bf       	out	0x38, r24	; 56
 71a:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <sg_Timer2_callBackPtr>
 71e:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <sg_Timer2_callBackPtr+0x1>
 722:	09 95       	icall
 724:	ff 91       	pop	r31
 726:	ef 91       	pop	r30
 728:	bf 91       	pop	r27
 72a:	af 91       	pop	r26
 72c:	9f 91       	pop	r25
 72e:	8f 91       	pop	r24
 730:	7f 91       	pop	r23
 732:	6f 91       	pop	r22
 734:	5f 91       	pop	r21
 736:	4f 91       	pop	r20
 738:	3f 91       	pop	r19
 73a:	2f 91       	pop	r18
 73c:	0f 90       	pop	r0
 73e:	0f be       	out	0x3f, r0	; 63
 740:	0f 90       	pop	r0
 742:	1f 90       	pop	r1
 744:	18 95       	reti

00000746 <TIMER_init>:
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	09 f4       	brne	.+2      	; 0x74c <TIMER_init+0x6>
 74a:	7b c0       	rjmp	.+246    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 74c:	fc 01       	movw	r30, r24
 74e:	20 81       	ld	r18, Z
 750:	23 30       	cpi	r18, 0x03	; 3
 752:	08 f0       	brcs	.+2      	; 0x756 <TIMER_init+0x10>
 754:	78 c0       	rjmp	.+240    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 756:	31 81       	ldd	r19, Z+1	; 0x01
 758:	3a 30       	cpi	r19, 0x0A	; 10
 75a:	08 f0       	brcs	.+2      	; 0x75e <TIMER_init+0x18>
 75c:	76 c0       	rjmp	.+236    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 75e:	21 30       	cpi	r18, 0x01	; 1
 760:	11 f1       	breq	.+68     	; 0x7a6 <TIMER_init+0x60>
 762:	20 f0       	brcs	.+8      	; 0x76c <TIMER_init+0x26>
 764:	22 30       	cpi	r18, 0x02	; 2
 766:	09 f4       	brne	.+2      	; 0x76a <TIMER_init+0x24>
 768:	4f c0       	rjmp	.+158    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 76a:	71 c0       	rjmp	.+226    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 76c:	12 be       	out	0x32, r1	; 50
 76e:	13 be       	out	0x33, r1	; 51
 770:	1c be       	out	0x3c, r1	; 60
 772:	fc 01       	movw	r30, r24
 774:	22 81       	ldd	r18, Z+2	; 0x02
 776:	22 bf       	out	0x32, r18	; 50
 778:	23 b7       	in	r18, 0x33	; 51
 77a:	20 68       	ori	r18, 0x80	; 128
 77c:	23 bf       	out	0x33, r18	; 51
 77e:	23 b7       	in	r18, 0x33	; 51
 780:	2f 7b       	andi	r18, 0xBF	; 191
 782:	23 bf       	out	0x33, r18	; 51
 784:	23 b7       	in	r18, 0x33	; 51
 786:	27 7f       	andi	r18, 0xF7	; 247
 788:	23 bf       	out	0x33, r18	; 51
 78a:	23 b7       	in	r18, 0x33	; 51
 78c:	2f 7e       	andi	r18, 0xEF	; 239
 78e:	23 bf       	out	0x33, r18	; 51
 790:	23 b7       	in	r18, 0x33	; 51
 792:	2f 7d       	andi	r18, 0xDF	; 223
 794:	23 bf       	out	0x33, r18	; 51
 796:	84 81       	ldd	r24, Z+4	; 0x04
 798:	81 11       	cpse	r24, r1
 79a:	5b c0       	rjmp	.+182    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 79c:	89 b7       	in	r24, 0x39	; 57
 79e:	81 60       	ori	r24, 0x01	; 1
 7a0:	89 bf       	out	0x39, r24	; 57
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	08 95       	ret
 7a6:	1c bc       	out	0x2c, r1	; 44
 7a8:	1d bc       	out	0x2d, r1	; 45
 7aa:	1f bc       	out	0x2f, r1	; 47
 7ac:	1e bc       	out	0x2e, r1	; 46
 7ae:	1b bc       	out	0x2b, r1	; 43
 7b0:	1a bc       	out	0x2a, r1	; 42
 7b2:	fc 01       	movw	r30, r24
 7b4:	22 81       	ldd	r18, Z+2	; 0x02
 7b6:	33 81       	ldd	r19, Z+3	; 0x03
 7b8:	3d bd       	out	0x2d, r19	; 45
 7ba:	2c bd       	out	0x2c, r18	; 44
 7bc:	2f b5       	in	r18, 0x2f	; 47
 7be:	28 60       	ori	r18, 0x08	; 8
 7c0:	2f bd       	out	0x2f, r18	; 47
 7c2:	2f b5       	in	r18, 0x2f	; 47
 7c4:	24 60       	ori	r18, 0x04	; 4
 7c6:	2f bd       	out	0x2f, r18	; 47
 7c8:	2f b5       	in	r18, 0x2f	; 47
 7ca:	2e 7f       	andi	r18, 0xFE	; 254
 7cc:	2f bd       	out	0x2f, r18	; 47
 7ce:	2f b5       	in	r18, 0x2f	; 47
 7d0:	2d 7f       	andi	r18, 0xFD	; 253
 7d2:	2f bd       	out	0x2f, r18	; 47
 7d4:	2e b5       	in	r18, 0x2e	; 46
 7d6:	2f 7e       	andi	r18, 0xEF	; 239
 7d8:	2e bd       	out	0x2e, r18	; 46
 7da:	2e b5       	in	r18, 0x2e	; 46
 7dc:	27 7f       	andi	r18, 0xF7	; 247
 7de:	2e bd       	out	0x2e, r18	; 46
 7e0:	2f b5       	in	r18, 0x2f	; 47
 7e2:	2f 7b       	andi	r18, 0xBF	; 191
 7e4:	2f bd       	out	0x2f, r18	; 47
 7e6:	2f b5       	in	r18, 0x2f	; 47
 7e8:	2f 77       	andi	r18, 0x7F	; 127
 7ea:	2f bd       	out	0x2f, r18	; 47
 7ec:	2f b5       	in	r18, 0x2f	; 47
 7ee:	2f 7e       	andi	r18, 0xEF	; 239
 7f0:	2f bd       	out	0x2f, r18	; 47
 7f2:	2f b5       	in	r18, 0x2f	; 47
 7f4:	2f 7d       	andi	r18, 0xDF	; 223
 7f6:	2f bd       	out	0x2f, r18	; 47
 7f8:	84 81       	ldd	r24, Z+4	; 0x04
 7fa:	81 11       	cpse	r24, r1
 7fc:	2c c0       	rjmp	.+88     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 7fe:	89 b7       	in	r24, 0x39	; 57
 800:	84 60       	ori	r24, 0x04	; 4
 802:	89 bf       	out	0x39, r24	; 57
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret
 808:	14 bc       	out	0x24, r1	; 36
 80a:	15 bc       	out	0x25, r1	; 37
 80c:	13 bc       	out	0x23, r1	; 35
 80e:	fc 01       	movw	r30, r24
 810:	22 81       	ldd	r18, Z+2	; 0x02
 812:	24 bd       	out	0x24, r18	; 36
 814:	25 b5       	in	r18, 0x25	; 37
 816:	20 68       	ori	r18, 0x80	; 128
 818:	25 bd       	out	0x25, r18	; 37
 81a:	25 b5       	in	r18, 0x25	; 37
 81c:	2f 7b       	andi	r18, 0xBF	; 191
 81e:	25 bd       	out	0x25, r18	; 37
 820:	25 b5       	in	r18, 0x25	; 37
 822:	27 7f       	andi	r18, 0xF7	; 247
 824:	25 bd       	out	0x25, r18	; 37
 826:	25 b5       	in	r18, 0x25	; 37
 828:	2f 7e       	andi	r18, 0xEF	; 239
 82a:	25 bd       	out	0x25, r18	; 37
 82c:	25 b5       	in	r18, 0x25	; 37
 82e:	2f 7d       	andi	r18, 0xDF	; 223
 830:	25 bd       	out	0x25, r18	; 37
 832:	84 81       	ldd	r24, Z+4	; 0x04
 834:	81 11       	cpse	r24, r1
 836:	11 c0       	rjmp	.+34     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 838:	89 b7       	in	r24, 0x39	; 57
 83a:	80 64       	ori	r24, 0x40	; 64
 83c:	89 bf       	out	0x39, r24	; 57
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	08 95       	ret
 842:	83 e0       	ldi	r24, 0x03	; 3
 844:	08 95       	ret
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	08 95       	ret
 84a:	83 e0       	ldi	r24, 0x03	; 3
 84c:	08 95       	ret
 84e:	83 e0       	ldi	r24, 0x03	; 3
 850:	08 95       	ret
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	08 95       	ret
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	08 95       	ret
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	08 95       	ret

0000085e <TIMER_start>:
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	09 f4       	brne	.+2      	; 0x864 <__stack+0x5>
 862:	3b c1       	rjmp	.+630    	; 0xada <__stack+0x27b>
 864:	dc 01       	movw	r26, r24
 866:	2c 91       	ld	r18, X
 868:	23 30       	cpi	r18, 0x03	; 3
 86a:	08 f0       	brcs	.+2      	; 0x86e <__stack+0xf>
 86c:	38 c1       	rjmp	.+624    	; 0xade <__stack+0x27f>
 86e:	11 96       	adiw	r26, 0x01	; 1
 870:	ec 91       	ld	r30, X
 872:	ea 30       	cpi	r30, 0x0A	; 10
 874:	08 f0       	brcs	.+2      	; 0x878 <__stack+0x19>
 876:	35 c1       	rjmp	.+618    	; 0xae2 <__stack+0x283>
 878:	21 30       	cpi	r18, 0x01	; 1
 87a:	09 f4       	brne	.+2      	; 0x87e <__stack+0x1f>
 87c:	68 c0       	rjmp	.+208    	; 0x94e <__stack+0xef>
 87e:	20 f0       	brcs	.+8      	; 0x888 <__stack+0x29>
 880:	22 30       	cpi	r18, 0x02	; 2
 882:	09 f4       	brne	.+2      	; 0x886 <__stack+0x27>
 884:	c7 c0       	rjmp	.+398    	; 0xa14 <__stack+0x1b5>
 886:	2f c1       	rjmp	.+606    	; 0xae6 <__stack+0x287>
 888:	8e 2f       	mov	r24, r30
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	8a 30       	cpi	r24, 0x0A	; 10
 88e:	91 05       	cpc	r25, r1
 890:	08 f0       	brcs	.+2      	; 0x894 <__stack+0x35>
 892:	2b c1       	rjmp	.+598    	; 0xaea <__stack+0x28b>
 894:	fc 01       	movw	r30, r24
 896:	e6 5d       	subi	r30, 0xD6	; 214
 898:	ff 4f       	sbci	r31, 0xFF	; 255
 89a:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__tablejump2__>
 89e:	83 b7       	in	r24, 0x33	; 51
 8a0:	8e 7f       	andi	r24, 0xFE	; 254
 8a2:	83 bf       	out	0x33, r24	; 51
 8a4:	83 b7       	in	r24, 0x33	; 51
 8a6:	8d 7f       	andi	r24, 0xFD	; 253
 8a8:	83 bf       	out	0x33, r24	; 51
 8aa:	83 b7       	in	r24, 0x33	; 51
 8ac:	8b 7f       	andi	r24, 0xFB	; 251
 8ae:	83 bf       	out	0x33, r24	; 51
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	08 95       	ret
 8b4:	83 b7       	in	r24, 0x33	; 51
 8b6:	81 60       	ori	r24, 0x01	; 1
 8b8:	83 bf       	out	0x33, r24	; 51
 8ba:	83 b7       	in	r24, 0x33	; 51
 8bc:	8d 7f       	andi	r24, 0xFD	; 253
 8be:	83 bf       	out	0x33, r24	; 51
 8c0:	83 b7       	in	r24, 0x33	; 51
 8c2:	8b 7f       	andi	r24, 0xFB	; 251
 8c4:	83 bf       	out	0x33, r24	; 51
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	08 95       	ret
 8ca:	83 b7       	in	r24, 0x33	; 51
 8cc:	8e 7f       	andi	r24, 0xFE	; 254
 8ce:	83 bf       	out	0x33, r24	; 51
 8d0:	83 b7       	in	r24, 0x33	; 51
 8d2:	82 60       	ori	r24, 0x02	; 2
 8d4:	83 bf       	out	0x33, r24	; 51
 8d6:	83 b7       	in	r24, 0x33	; 51
 8d8:	8b 7f       	andi	r24, 0xFB	; 251
 8da:	83 bf       	out	0x33, r24	; 51
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	08 95       	ret
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	81 60       	ori	r24, 0x01	; 1
 8e4:	83 bf       	out	0x33, r24	; 51
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	83 bf       	out	0x33, r24	; 51
 8ec:	83 b7       	in	r24, 0x33	; 51
 8ee:	8b 7f       	andi	r24, 0xFB	; 251
 8f0:	83 bf       	out	0x33, r24	; 51
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	08 95       	ret
 8f6:	83 b7       	in	r24, 0x33	; 51
 8f8:	8e 7f       	andi	r24, 0xFE	; 254
 8fa:	83 bf       	out	0x33, r24	; 51
 8fc:	83 b7       	in	r24, 0x33	; 51
 8fe:	8d 7f       	andi	r24, 0xFD	; 253
 900:	83 bf       	out	0x33, r24	; 51
 902:	83 b7       	in	r24, 0x33	; 51
 904:	84 60       	ori	r24, 0x04	; 4
 906:	83 bf       	out	0x33, r24	; 51
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	08 95       	ret
 90c:	83 b7       	in	r24, 0x33	; 51
 90e:	81 60       	ori	r24, 0x01	; 1
 910:	83 bf       	out	0x33, r24	; 51
 912:	83 b7       	in	r24, 0x33	; 51
 914:	8d 7f       	andi	r24, 0xFD	; 253
 916:	83 bf       	out	0x33, r24	; 51
 918:	83 b7       	in	r24, 0x33	; 51
 91a:	84 60       	ori	r24, 0x04	; 4
 91c:	83 bf       	out	0x33, r24	; 51
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	08 95       	ret
 922:	83 b7       	in	r24, 0x33	; 51
 924:	8e 7f       	andi	r24, 0xFE	; 254
 926:	83 bf       	out	0x33, r24	; 51
 928:	83 b7       	in	r24, 0x33	; 51
 92a:	82 60       	ori	r24, 0x02	; 2
 92c:	83 bf       	out	0x33, r24	; 51
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	84 60       	ori	r24, 0x04	; 4
 932:	83 bf       	out	0x33, r24	; 51
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	08 95       	ret
 938:	83 b7       	in	r24, 0x33	; 51
 93a:	81 60       	ori	r24, 0x01	; 1
 93c:	83 bf       	out	0x33, r24	; 51
 93e:	83 b7       	in	r24, 0x33	; 51
 940:	82 60       	ori	r24, 0x02	; 2
 942:	83 bf       	out	0x33, r24	; 51
 944:	83 b7       	in	r24, 0x33	; 51
 946:	84 60       	ori	r24, 0x04	; 4
 948:	83 bf       	out	0x33, r24	; 51
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	08 95       	ret
 94e:	8e 2f       	mov	r24, r30
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	8a 30       	cpi	r24, 0x0A	; 10
 954:	91 05       	cpc	r25, r1
 956:	08 f0       	brcs	.+2      	; 0x95a <__stack+0xfb>
 958:	ca c0       	rjmp	.+404    	; 0xaee <__stack+0x28f>
 95a:	fc 01       	movw	r30, r24
 95c:	ec 5c       	subi	r30, 0xCC	; 204
 95e:	ff 4f       	sbci	r31, 0xFF	; 255
 960:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__tablejump2__>
 964:	8e b5       	in	r24, 0x2e	; 46
 966:	8e 7f       	andi	r24, 0xFE	; 254
 968:	8e bd       	out	0x2e, r24	; 46
 96a:	8e b5       	in	r24, 0x2e	; 46
 96c:	8d 7f       	andi	r24, 0xFD	; 253
 96e:	8e bd       	out	0x2e, r24	; 46
 970:	8e b5       	in	r24, 0x2e	; 46
 972:	8b 7f       	andi	r24, 0xFB	; 251
 974:	8e bd       	out	0x2e, r24	; 46
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	08 95       	ret
 97a:	8e b5       	in	r24, 0x2e	; 46
 97c:	81 60       	ori	r24, 0x01	; 1
 97e:	8e bd       	out	0x2e, r24	; 46
 980:	8e b5       	in	r24, 0x2e	; 46
 982:	8d 7f       	andi	r24, 0xFD	; 253
 984:	8e bd       	out	0x2e, r24	; 46
 986:	8e b5       	in	r24, 0x2e	; 46
 988:	8b 7f       	andi	r24, 0xFB	; 251
 98a:	8e bd       	out	0x2e, r24	; 46
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	08 95       	ret
 990:	8e b5       	in	r24, 0x2e	; 46
 992:	8e 7f       	andi	r24, 0xFE	; 254
 994:	8e bd       	out	0x2e, r24	; 46
 996:	8e b5       	in	r24, 0x2e	; 46
 998:	82 60       	ori	r24, 0x02	; 2
 99a:	8e bd       	out	0x2e, r24	; 46
 99c:	8e b5       	in	r24, 0x2e	; 46
 99e:	8b 7f       	andi	r24, 0xFB	; 251
 9a0:	8e bd       	out	0x2e, r24	; 46
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	08 95       	ret
 9a6:	8e b5       	in	r24, 0x2e	; 46
 9a8:	81 60       	ori	r24, 0x01	; 1
 9aa:	8e bd       	out	0x2e, r24	; 46
 9ac:	8e b5       	in	r24, 0x2e	; 46
 9ae:	82 60       	ori	r24, 0x02	; 2
 9b0:	8e bd       	out	0x2e, r24	; 46
 9b2:	8e b5       	in	r24, 0x2e	; 46
 9b4:	8b 7f       	andi	r24, 0xFB	; 251
 9b6:	8e bd       	out	0x2e, r24	; 46
 9b8:	80 e0       	ldi	r24, 0x00	; 0
 9ba:	08 95       	ret
 9bc:	8e b5       	in	r24, 0x2e	; 46
 9be:	8e 7f       	andi	r24, 0xFE	; 254
 9c0:	8e bd       	out	0x2e, r24	; 46
 9c2:	8e b5       	in	r24, 0x2e	; 46
 9c4:	8d 7f       	andi	r24, 0xFD	; 253
 9c6:	8e bd       	out	0x2e, r24	; 46
 9c8:	8e b5       	in	r24, 0x2e	; 46
 9ca:	84 60       	ori	r24, 0x04	; 4
 9cc:	8e bd       	out	0x2e, r24	; 46
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	08 95       	ret
 9d2:	8e b5       	in	r24, 0x2e	; 46
 9d4:	81 60       	ori	r24, 0x01	; 1
 9d6:	8e bd       	out	0x2e, r24	; 46
 9d8:	8e b5       	in	r24, 0x2e	; 46
 9da:	8d 7f       	andi	r24, 0xFD	; 253
 9dc:	8e bd       	out	0x2e, r24	; 46
 9de:	8e b5       	in	r24, 0x2e	; 46
 9e0:	84 60       	ori	r24, 0x04	; 4
 9e2:	8e bd       	out	0x2e, r24	; 46
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	08 95       	ret
 9e8:	8e b5       	in	r24, 0x2e	; 46
 9ea:	8e 7f       	andi	r24, 0xFE	; 254
 9ec:	8e bd       	out	0x2e, r24	; 46
 9ee:	8e b5       	in	r24, 0x2e	; 46
 9f0:	82 60       	ori	r24, 0x02	; 2
 9f2:	8e bd       	out	0x2e, r24	; 46
 9f4:	8e b5       	in	r24, 0x2e	; 46
 9f6:	84 60       	ori	r24, 0x04	; 4
 9f8:	8e bd       	out	0x2e, r24	; 46
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	08 95       	ret
 9fe:	8e b5       	in	r24, 0x2e	; 46
 a00:	81 60       	ori	r24, 0x01	; 1
 a02:	8e bd       	out	0x2e, r24	; 46
 a04:	8e b5       	in	r24, 0x2e	; 46
 a06:	82 60       	ori	r24, 0x02	; 2
 a08:	8e bd       	out	0x2e, r24	; 46
 a0a:	8e b5       	in	r24, 0x2e	; 46
 a0c:	84 60       	ori	r24, 0x04	; 4
 a0e:	8e bd       	out	0x2e, r24	; 46
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	08 95       	ret
 a14:	8e 2f       	mov	r24, r30
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	88 30       	cpi	r24, 0x08	; 8
 a1a:	91 05       	cpc	r25, r1
 a1c:	08 f0       	brcs	.+2      	; 0xa20 <__stack+0x1c1>
 a1e:	69 c0       	rjmp	.+210    	; 0xaf2 <__stack+0x293>
 a20:	fc 01       	movw	r30, r24
 a22:	e2 5c       	subi	r30, 0xC2	; 194
 a24:	ff 4f       	sbci	r31, 0xFF	; 255
 a26:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__tablejump2__>
 a2a:	85 b5       	in	r24, 0x25	; 37
 a2c:	8b 7f       	andi	r24, 0xFB	; 251
 a2e:	85 bd       	out	0x25, r24	; 37
 a30:	85 b5       	in	r24, 0x25	; 37
 a32:	8d 7f       	andi	r24, 0xFD	; 253
 a34:	85 bd       	out	0x25, r24	; 37
 a36:	85 b5       	in	r24, 0x25	; 37
 a38:	8e 7f       	andi	r24, 0xFE	; 254
 a3a:	85 bd       	out	0x25, r24	; 37
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	08 95       	ret
 a40:	85 b5       	in	r24, 0x25	; 37
 a42:	84 60       	ori	r24, 0x04	; 4
 a44:	85 bd       	out	0x25, r24	; 37
 a46:	85 b5       	in	r24, 0x25	; 37
 a48:	8d 7f       	andi	r24, 0xFD	; 253
 a4a:	85 bd       	out	0x25, r24	; 37
 a4c:	85 b5       	in	r24, 0x25	; 37
 a4e:	8e 7f       	andi	r24, 0xFE	; 254
 a50:	85 bd       	out	0x25, r24	; 37
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	08 95       	ret
 a56:	85 b5       	in	r24, 0x25	; 37
 a58:	8b 7f       	andi	r24, 0xFB	; 251
 a5a:	85 bd       	out	0x25, r24	; 37
 a5c:	85 b5       	in	r24, 0x25	; 37
 a5e:	82 60       	ori	r24, 0x02	; 2
 a60:	85 bd       	out	0x25, r24	; 37
 a62:	85 b5       	in	r24, 0x25	; 37
 a64:	8e 7f       	andi	r24, 0xFE	; 254
 a66:	85 bd       	out	0x25, r24	; 37
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	08 95       	ret
 a6c:	85 b5       	in	r24, 0x25	; 37
 a6e:	84 60       	ori	r24, 0x04	; 4
 a70:	85 bd       	out	0x25, r24	; 37
 a72:	85 b5       	in	r24, 0x25	; 37
 a74:	82 60       	ori	r24, 0x02	; 2
 a76:	85 bd       	out	0x25, r24	; 37
 a78:	85 b5       	in	r24, 0x25	; 37
 a7a:	8e 7f       	andi	r24, 0xFE	; 254
 a7c:	85 bd       	out	0x25, r24	; 37
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	08 95       	ret
 a82:	85 b5       	in	r24, 0x25	; 37
 a84:	8b 7f       	andi	r24, 0xFB	; 251
 a86:	85 bd       	out	0x25, r24	; 37
 a88:	85 b5       	in	r24, 0x25	; 37
 a8a:	8d 7f       	andi	r24, 0xFD	; 253
 a8c:	85 bd       	out	0x25, r24	; 37
 a8e:	85 b5       	in	r24, 0x25	; 37
 a90:	81 60       	ori	r24, 0x01	; 1
 a92:	85 bd       	out	0x25, r24	; 37
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	08 95       	ret
 a98:	85 b5       	in	r24, 0x25	; 37
 a9a:	84 60       	ori	r24, 0x04	; 4
 a9c:	85 bd       	out	0x25, r24	; 37
 a9e:	85 b5       	in	r24, 0x25	; 37
 aa0:	8d 7f       	andi	r24, 0xFD	; 253
 aa2:	85 bd       	out	0x25, r24	; 37
 aa4:	85 b5       	in	r24, 0x25	; 37
 aa6:	81 60       	ori	r24, 0x01	; 1
 aa8:	85 bd       	out	0x25, r24	; 37
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	08 95       	ret
 aae:	85 b5       	in	r24, 0x25	; 37
 ab0:	8b 7f       	andi	r24, 0xFB	; 251
 ab2:	85 bd       	out	0x25, r24	; 37
 ab4:	85 b5       	in	r24, 0x25	; 37
 ab6:	82 60       	ori	r24, 0x02	; 2
 ab8:	85 bd       	out	0x25, r24	; 37
 aba:	85 b5       	in	r24, 0x25	; 37
 abc:	81 60       	ori	r24, 0x01	; 1
 abe:	85 bd       	out	0x25, r24	; 37
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	08 95       	ret
 ac4:	85 b5       	in	r24, 0x25	; 37
 ac6:	84 60       	ori	r24, 0x04	; 4
 ac8:	85 bd       	out	0x25, r24	; 37
 aca:	85 b5       	in	r24, 0x25	; 37
 acc:	82 60       	ori	r24, 0x02	; 2
 ace:	85 bd       	out	0x25, r24	; 37
 ad0:	85 b5       	in	r24, 0x25	; 37
 ad2:	81 60       	ori	r24, 0x01	; 1
 ad4:	85 bd       	out	0x25, r24	; 37
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	08 95       	ret
 ada:	83 e0       	ldi	r24, 0x03	; 3
 adc:	08 95       	ret
 ade:	83 e0       	ldi	r24, 0x03	; 3
 ae0:	08 95       	ret
 ae2:	83 e0       	ldi	r24, 0x03	; 3
 ae4:	08 95       	ret
 ae6:	83 e0       	ldi	r24, 0x03	; 3
 ae8:	08 95       	ret
 aea:	83 e0       	ldi	r24, 0x03	; 3
 aec:	08 95       	ret
 aee:	83 e0       	ldi	r24, 0x03	; 3
 af0:	08 95       	ret
 af2:	83 e0       	ldi	r24, 0x03	; 3
 af4:	08 95       	ret

00000af6 <TIMER_reset>:
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
 af6:	00 97       	sbiw	r24, 0x00	; 0
 af8:	11 f1       	breq	.+68     	; 0xb3e <TIMER_reset+0x48>
 afa:	fc 01       	movw	r30, r24
 afc:	20 81       	ld	r18, Z
 afe:	23 30       	cpi	r18, 0x03	; 3
 b00:	00 f5       	brcc	.+64     	; 0xb42 <TIMER_reset+0x4c>
 b02:	81 81       	ldd	r24, Z+1	; 0x01
 b04:	8a 30       	cpi	r24, 0x0A	; 10
 b06:	f8 f4       	brcc	.+62     	; 0xb46 <TIMER_reset+0x50>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
 b08:	21 30       	cpi	r18, 0x01	; 1
 b0a:	51 f0       	breq	.+20     	; 0xb20 <TIMER_reset+0x2a>
 b0c:	18 f0       	brcs	.+6      	; 0xb14 <TIMER_reset+0x1e>
 b0e:	22 30       	cpi	r18, 0x02	; 2
 b10:	81 f0       	breq	.+32     	; 0xb32 <TIMER_reset+0x3c>
 b12:	1b c0       	rjmp	.+54     	; 0xb4a <TIMER_reset+0x54>
		{
			case TIMER_0:
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
 b14:	12 be       	out	0x32, r1	; 50
				CLEAR_REG(TCCR0);
 b16:	13 be       	out	0x33, r1	; 51
				CLEAR_REG(OCR0);
 b18:	1c be       	out	0x3c, r1	; 60
				CLEAR_REG(TIFR);
 b1a:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b1c:	80 e0       	ldi	r24, 0x00	; 0
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
				CLEAR_REG(TCCR0);
				CLEAR_REG(OCR0);
				CLEAR_REG(TIFR);
				break;
 b1e:	08 95       	ret
				
			case TIMER_1:
				/*Clear registers of Timer1 before processing any of them*/
				CLEAR_REG(TCNT1L);
 b20:	1c bc       	out	0x2c, r1	; 44
				CLEAR_REG(TCNT1H);
 b22:	1d bc       	out	0x2d, r1	; 45
				CLEAR_REG(TCCR1A);
 b24:	1f bc       	out	0x2f, r1	; 47
				CLEAR_REG(TCCR1B);
 b26:	1e bc       	out	0x2e, r1	; 46
				CLEAR_REG(OCR1AH);
 b28:	1b bc       	out	0x2b, r1	; 43
				CLEAR_REG(OCR1AL);
 b2a:	1a bc       	out	0x2a, r1	; 42
				CLEAR_REG(TIFR);
 b2c:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b2e:	80 e0       	ldi	r24, 0x00	; 0
				CLEAR_REG(TCCR1A);
				CLEAR_REG(TCCR1B);
				CLEAR_REG(OCR1AH);
				CLEAR_REG(OCR1AL);
				CLEAR_REG(TIFR);
				break;
 b30:	08 95       	ret
				
			case TIMER_2:
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
 b32:	14 bc       	out	0x24, r1	; 36
				CLEAR_REG(TCCR2);
 b34:	15 bc       	out	0x25, r1	; 37
				CLEAR_REG(OCR2);
 b36:	13 bc       	out	0x23, r1	; 35
				CLEAR_REG(TIFR);
 b38:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b3a:	80 e0       	ldi	r24, 0x00	; 0
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
				CLEAR_REG(TCCR2);
				CLEAR_REG(OCR2);
				CLEAR_REG(TIFR);
				break;
 b3c:	08 95       	ret
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
 b3e:	83 e0       	ldi	r24, 0x03	; 3
 b40:	08 95       	ret
 b42:	83 e0       	ldi	r24, 0x03	; 3
 b44:	08 95       	ret
 b46:	83 e0       	ldi	r24, 0x03	; 3
 b48:	08 95       	ret
				CLEAR_REG(OCR2);
				CLEAR_REG(TIFR);
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
 b4a:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
 b4c:	08 95       	ret

00000b4e <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
 b4e:	00 97       	sbiw	r24, 0x00	; 0
 b50:	d1 f0       	breq	.+52     	; 0xb86 <TIMER_setCallBack+0x38>
 b52:	63 30       	cpi	r22, 0x03	; 3
 b54:	d0 f4       	brcc	.+52     	; 0xb8a <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
 b56:	61 30       	cpi	r22, 0x01	; 1
 b58:	51 f0       	breq	.+20     	; 0xb6e <TIMER_setCallBack+0x20>
 b5a:	18 f0       	brcs	.+6      	; 0xb62 <TIMER_setCallBack+0x14>
 b5c:	62 30       	cpi	r22, 0x02	; 2
 b5e:	69 f0       	breq	.+26     	; 0xb7a <TIMER_setCallBack+0x2c>
 b60:	16 c0       	rjmp	.+44     	; 0xb8e <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
 b62:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <sg_Timer0_callBackPtr+0x1>
 b66:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b6a:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
 b6c:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
 b6e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <sg_Timer1_callBackPtr+0x1>
 b72:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b76:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
 b78:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
 b7a:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <sg_Timer2_callBackPtr+0x1>
 b7e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 b82:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
 b84:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
 b86:	83 e0       	ldi	r24, 0x03	; 3
 b88:	08 95       	ret
 b8a:	83 e0       	ldi	r24, 0x03	; 3
 b8c:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
 b8e:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
 b90:	08 95       	ret

00000b92 <__tablejump2__>:
 b92:	ee 0f       	add	r30, r30
 b94:	ff 1f       	adc	r31, r31
 b96:	05 90       	lpm	r0, Z+
 b98:	f4 91       	lpm	r31, Z
 b9a:	e0 2d       	mov	r30, r0
 b9c:	09 94       	ijmp

00000b9e <_exit>:
 b9e:	f8 94       	cli

00000ba0 <__stop_program>:
 ba0:	ff cf       	rjmp	.-2      	; 0xba0 <__stop_program>
