
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00001486  0000151a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008000f8  008000f8  000015b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e23  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c3  00000000  00000000  0000466b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ebd  00000000  00000000  0000572e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  000075ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3f  00000000  00000000  00007b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c6c  00000000  00000000  00008787  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000a3f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 33       	cpi	r26, 0x38	; 56
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 05 	call	0xb96	; 0xb96 <main>
      8a:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
      92:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <u8_delay>
      96:	8f 5f       	subi	r24, 0xFF	; 255
      98:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <u8_delay>
	TIMER_Manager_reset(&st_gs_timer_0_config);
      9c:	80 e0       	ldi	r24, 0x00	; 0
      9e:	91 e0       	ldi	r25, 0x01	; 1
      a0:	0e 94 b9 05 	call	0xb72	; 0xb72 <TIMER_Manager_reset>
      a4:	08 95       	ret

000000a6 <APP_init>:
	}
}


void APP_init(void)
{
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_0_config.u8_timerNum = TIMER_0;
      b2:	e0 e0       	ldi	r30, 0x00	; 0
      b4:	f1 e0       	ldi	r31, 0x01	; 1
      b6:	10 82       	st	Z, r1
	st_gs_timer_0_config.u8_timer_ovf_int_enable = 1;
      b8:	d1 e0       	ldi	r29, 0x01	; 1
      ba:	d4 83       	std	Z+4, r29	; 0x04
	st_gs_timer_0_config.u16_timer_InitialValue = APP_TIMER_0_INIT_VALUE;
      bc:	80 ef       	ldi	r24, 0xF0	; 240
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	93 83       	std	Z+3, r25	; 0x03
      c2:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_0_config.callBackFunction =  APP_timer0OvfHandeler;
      c4:	89 e4       	ldi	r24, 0x49	; 73
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	96 83       	std	Z+6, r25	; 0x06
      ca:	85 83       	std	Z+5, r24	; 0x05
	TIMER_Manager_init(&st_gs_timer_0_config);
      cc:	cf 01       	movw	r24, r30
      ce:	0e 94 99 05 	call	0xb32	; 0xb32 <TIMER_Manager_init>
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
      d2:	ed ef       	ldi	r30, 0xFD	; 253
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	87 e0       	ldi	r24, 0x07	; 7
      d8:	82 83       	std	Z+2, r24	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
      da:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
      dc:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
      de:	cf 01       	movw	r24, r30
      e0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <TEMP_SENSOR_init>
	
	
	
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
      e4:	e3 e1       	ldi	r30, 0x13	; 19
      e6:	f1 e0       	ldi	r31, 0x01	; 1
      e8:	10 82       	st	Z, r1
	
	st_gs_lcdConfig.u8_d4Pin[APP_PORT]	 = porta;
      ea:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[APP_PIN]	 = pin0;
      ec:	12 86       	std	Z+10, r1	; 0x0a
	
	st_gs_lcdConfig.u8_d5Pin[APP_PORT]	 = porta;
      ee:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[APP_PIN]	 = pin1;
      f0:	d4 87       	std	Z+12, r29	; 0x0c
	
	st_gs_lcdConfig.u8_d6Pin[APP_PORT]	 = porta;
      f2:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[APP_PIN]	 = pin2;
      f4:	c2 e0       	ldi	r28, 0x02	; 2
      f6:	c6 87       	std	Z+14, r28	; 0x0e
	
	st_gs_lcdConfig.u8_d7Pin[APP_PORT]	 = porta;
      f8:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[APP_PIN]	 = pin3;
      fa:	0f 2e       	mov	r0, r31
      fc:	f3 e0       	ldi	r31, 0x03	; 3
      fe:	ef 2e       	mov	r14, r31
     100:	f0 2d       	mov	r31, r0
     102:	e0 8a       	std	Z+16, r14	; 0x10
	
	st_gs_lcdConfig.u8_RSpin[APP_PORT]	 = porta;
     104:	11 8a       	std	Z+17, r1	; 0x11
	st_gs_lcdConfig.u8_RSpin[APP_PIN]	 = pin4;
     106:	68 94       	set
     108:	ff 24       	eor	r15, r15
     10a:	f2 f8       	bld	r15, 2
     10c:	f2 8a       	std	Z+18, r15	; 0x12
	
	st_gs_lcdConfig.u8_RWpin[APP_PORT]	 = porta;
     10e:	13 8a       	std	Z+19, r1	; 0x13
	st_gs_lcdConfig.u8_RWpin[APP_PIN]	 = pin5;
     110:	05 e0       	ldi	r16, 0x05	; 5
     112:	04 8b       	std	Z+20, r16	; 0x14
	
	st_gs_lcdConfig.u8_Epin[APP_PORT]	 = porta;
     114:	15 8a       	std	Z+21, r1	; 0x15
	st_gs_lcdConfig.u8_Epin[APP_PIN]	 = pin6;
     116:	16 e0       	ldi	r17, 0x06	; 6
     118:	16 8b       	std	Z+22, r17	; 0x16
	
	LCD_init(&st_gs_lcdConfig);
     11a:	cf 01       	movw	r24, r30
     11c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_init>
	
	
	
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[APP_PORT]	 = portc;
     120:	ea e2       	ldi	r30, 0x2A	; 42
     122:	f1 e0       	ldi	r31, 0x01	; 1
     124:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[APP_PIN]	 = pin3;
     126:	e7 82       	std	Z+7, r14	; 0x07
	
	st_gs_keypadConfig.u8_col2Pin[APP_PORT]	 = portc;
     128:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[APP_PIN]	 = pin4;
     12a:	f1 86       	std	Z+9, r15	; 0x09
	
	st_gs_keypadConfig.u8_col3Pin[APP_PORT]  = portc;
     12c:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[APP_PIN]	 = pin5;
     12e:	03 87       	std	Z+11, r16	; 0x0b
	
	st_gs_keypadConfig.u8_col4Pin[APP_PORT]	 = portc;
     130:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[APP_PIN]	 = pin6;
     132:	15 87       	std	Z+13, r17	; 0x0d
	
	st_gs_keypadConfig.u8_row1Pin[APP_PORT]	 = portc;
     134:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[APP_PIN]	 = pin0 ;
     136:	11 82       	std	Z+1, r1	; 0x01
	
	st_gs_keypadConfig.u8_row2Pin[APP_PORT]  = portc;
     138:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[APP_PIN]	 = pin1 ;
     13a:	d3 83       	std	Z+3, r29	; 0x03
	
	st_gs_keypadConfig.u8_row3Pin[APP_PORT]	 = portc;
     13c:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[APP_PIN]	 = pin2 ;
     13e:	c5 83       	std	Z+5, r28	; 0x05
	
	KEYPAD_init(&st_gs_keypadConfig);
     140:	cf 01       	movw	r24, r30
     142:	0e 94 3e 02 	call	0x47c	; 0x47c <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
     146:	eb ef       	ldi	r30, 0xFB	; 251
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
     14c:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
     14e:	cf 01       	movw	r24, r30
     150:	0e 94 05 02 	call	0x40a	; 0x40a <BUZZER_init>
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	ff 90       	pop	r15
     15e:	ef 90       	pop	r14
     160:	08 95       	ret

00000162 <APP_welcome>:


void APP_welcome(void)
{
	LCD_clear();
     162:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Welcome");
     16e:	89 e6       	ldi	r24, 0x69	; 105
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	u8_delay = 0 ;
     176:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17a:	2f ef       	ldi	r18, 0xFF	; 255
     17c:	89 e6       	ldi	r24, 0x69	; 105
     17e:	98 e1       	ldi	r25, 0x18	; 24
     180:	21 50       	subi	r18, 0x01	; 1
     182:	80 40       	sbci	r24, 0x00	; 0
     184:	90 40       	sbci	r25, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <APP_welcome+0x1e>
     188:	00 c0       	rjmp	.+0      	; 0x18a <APP_welcome+0x28>
     18a:	00 00       	nop
	//while(u8_delay <= 2);
	_delay_ms(1000);
	LCD_clear();
     18c:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"default Temp is");
     198:	81 e7       	ldi	r24, 0x71	; 113
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	LCD_setCursor(2,1);
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"20");
     1a8:	8b ec       	ldi	r24, 0xCB	; 203
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	u8_delay = 0;
     1b0:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
     1b4:	2f ef       	ldi	r18, 0xFF	; 255
     1b6:	89 e6       	ldi	r24, 0x69	; 105
     1b8:	98 e1       	ldi	r25, 0x18	; 24
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	80 40       	sbci	r24, 0x00	; 0
     1be:	90 40       	sbci	r25, 0x00	; 0
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <APP_welcome+0x58>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <APP_welcome+0x62>
     1c4:	00 00       	nop
	//while(u8_delay <= 2);
	_delay_ms(1000);
	
	u8_gs_programTemp = u8_gc_defaultTemp;
     1c6:	84 e1       	ldi	r24, 0x14	; 20
     1c8:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
	u8_en_gs_programState = APP_SET_TEMP;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
     1d2:	08 95       	ret

000001d4 <APP_set>:




void APP_set(void)
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	00 d0       	rcall	.+0      	; 0x1da <APP_set+0x6>
     1da:	1f 92       	push	r1
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
     1e0:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	LCD_clear();
     1e2:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Set Initial Temp");
     1ee:	81 e8       	ldi	r24, 0x81	; 129
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	u8_delay = 0;
     1f6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
     1fa:	2f ef       	ldi	r18, 0xFF	; 255
     1fc:	84 e3       	ldi	r24, 0x34	; 52
     1fe:	9c e0       	ldi	r25, 0x0C	; 12
     200:	21 50       	subi	r18, 0x01	; 1
     202:	80 40       	sbci	r24, 0x00	; 0
     204:	90 40       	sbci	r25, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <APP_set+0x2c>
     208:	00 c0       	rjmp	.+0      	; 0x20a <APP_set+0x36>
     20a:	00 00       	nop
	//while(u8_delay <= 1);
	_delay_ms(500);
	LCD_clear();
     20c:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     210:	61 e0       	ldi	r22, 0x01	; 1
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
     218:	82 e9       	ldi	r24, 0x92	; 146
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	//LCD_setCursor(1,8);
	//LCD_writeString((uint8_t*)ch_arrs_curTempToString);
	LCD_setCursor(1,11);
     220:	6b e0       	ldi	r22, 0x0B	; 11
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Max=35");
     228:	89 e9       	ldi	r24, 0x99	; 153
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	
	while(1)
	{
		itoa(u8_gs_programTemp,ch_arrs_curTempToString,10);
     230:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     234:	4a e0       	ldi	r20, 0x0A	; 10
     236:	be 01       	movw	r22, r28
     238:	6e 5f       	subi	r22, 0xFE	; 254
     23a:	7f 4f       	sbci	r23, 0xFF	; 255
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__itoa_ncheck>
		LCD_setCursor(1,8);
     242:	68 e0       	ldi	r22, 0x08	; 8
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
     24a:	ce 01       	movw	r24, r28
     24c:	02 96       	adiw	r24, 0x02	; 2
     24e:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
		KEYPAD_read(&u8_keypadData);
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <KEYPAD_read>
		
		if (u8_keypadData == APP_INCREMENT_BTN)
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	81 33       	cpi	r24, 0x31	; 49
     25e:	41 f4       	brne	.+16     	; 0x270 <APP_set+0x9c>
		{
		
			// Increment
			if (u8_gs_programTemp < 35)
     260:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
     264:	83 32       	cpi	r24, 0x23	; 35
     266:	20 f7       	brcc	.-56     	; 0x230 <APP_set+0x5c>
			{
				u8_gs_programTemp++;
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
     26e:	e0 cf       	rjmp	.-64     	; 0x230 <APP_set+0x5c>
			}
		}
		else if (u8_keypadData == APP_DECREMENT_BTN)
     270:	82 33       	cpi	r24, 0x32	; 50
     272:	41 f4       	brne	.+16     	; 0x284 <APP_set+0xb0>
		{
			// Decrement
			if (u8_gs_programTemp >18)
     274:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
     278:	83 31       	cpi	r24, 0x13	; 19
     27a:	d0 f2       	brcs	.-76     	; 0x230 <APP_set+0x5c>
			{
				u8_gs_programTemp--;
     27c:	81 50       	subi	r24, 0x01	; 1
     27e:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
     282:	d6 cf       	rjmp	.-84     	; 0x230 <APP_set+0x5c>
			}
		}
		else if (u8_keypadData == APP_SET_BTN)
     284:	83 33       	cpi	r24, 0x33	; 51
     286:	a1 f6       	brne	.-88     	; 0x230 <APP_set+0x5c>
		{
			// Set
			u8_en_gs_programState = APP_WORKING;
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
		else{
			// do nothing
		}
	}
	
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <APP_working>:



void APP_working(void)
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <APP_working+0x6>
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
     2a6:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	
	
	
	// print current temp
	LCD_clear();
     2a8:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Current Temp = ");
     2b4:	80 ea       	ldi	r24, 0xA0	; 160
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	
	
	while(u8_en_gs_programState == APP_WORKING)
     2bc:	81 c0       	rjmp	.+258    	; 0x3c0 <APP_working+0x126>
	{
		// read the temp from the sensor
		PORTD = TEMP_SENSOR_read(&st_gs_tempSensorConfig,&u8_gs_curTemp);
     2be:	60 e6       	ldi	r22, 0x60	; 96
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	8d ef       	ldi	r24, 0xFD	; 253
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 13 05 	call	0xa26	; 0xa26 <TEMP_SENSOR_read>
     2ca:	82 bb       	out	0x12, r24	; 18
		
		
		// convert int to string
		itoa(u8_gs_curTemp,ch_arrs_curTempToString,10);
     2cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2d0:	4a e0       	ldi	r20, 0x0A	; 10
     2d2:	be 01       	movw	r22, r28
     2d4:	6e 5f       	subi	r22, 0xFE	; 254
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__itoa_ncheck>
		
		
		LCD_setCursor(2,2);
     2de:	62 e0       	ldi	r22, 0x02	; 2
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
     2e6:	ce 01       	movw	r24, r28
     2e8:	02 96       	adiw	r24, 0x02	; 2
     2ea:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
		if (u8_gs_curTemp > u8_gs_programTemp)
     2ee:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f2:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
     2f6:	89 17       	cp	r24, r25
     2f8:	28 f4       	brcc	.+10     	; 0x304 <APP_working+0x6a>
		{
			// print the bell shape 
			//LCD_setCursor(2,3);
			LCD_writeSpChar(LCD_BELL);
     2fa:	83 e0       	ldi	r24, 0x03	; 3
     2fc:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_writeSpChar>
			
			
			// start the BUZZER
			BUZZER_start();
     300:	0e 94 20 02 	call	0x440	; 0x440 <BUZZER_start>
		}
		KEYPAD_read(&u8_keypadData);
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <KEYPAD_read>
		switch(u8_keypadData)
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	85 33       	cpi	r24, 0x35	; 53
     310:	31 f0       	breq	.+12     	; 0x31e <APP_working+0x84>
     312:	8e 34       	cpi	r24, 0x4E	; 78
     314:	09 f4       	brne	.+2      	; 0x318 <APP_working+0x7e>
     316:	54 c0       	rjmp	.+168    	; 0x3c0 <APP_working+0x126>
     318:	84 33       	cpi	r24, 0x34	; 52
     31a:	69 f5       	brne	.+90     	; 0x376 <APP_working+0xdc>
     31c:	26 c0       	rjmp	.+76     	; 0x36a <APP_working+0xd0>
			case  APP_NO_BTN :
				break;
			case  APP_RESET_BTN :
				// reset
				// Stop the BUZZER
				BUZZER_stop();
     31e:	0e 94 2f 02 	call	0x45e	; 0x45e <BUZZER_stop>
				
				// Set the program temp with the default temp
				u8_gs_programTemp = u8_gc_defaultTemp;
     322:	84 e1       	ldi	r24, 0x14	; 20
     324:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
				
				// clear LCD and print Temp value is resettled to 20
				LCD_clear();
     328:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
				LCD_setCursor(1,1);
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"Temp value is");
     334:	80 eb       	ldi	r24, 0xB0	; 176
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
				LCD_setCursor(2,1);
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"resettled to 20");
     344:	8e eb       	ldi	r24, 0xBE	; 190
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
				
				// 1s timeout
				u8_delay = 0;
     34c:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
     350:	2f ef       	ldi	r18, 0xFF	; 255
     352:	89 e6       	ldi	r24, 0x69	; 105
     354:	98 e1       	ldi	r25, 0x18	; 24
     356:	21 50       	subi	r18, 0x01	; 1
     358:	80 40       	sbci	r24, 0x00	; 0
     35a:	90 40       	sbci	r25, 0x00	; 0
     35c:	e1 f7       	brne	.-8      	; 0x356 <APP_working+0xbc>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <APP_working+0xc6>
     360:	00 00       	nop
				//while(u8_delay <= 2);
				_delay_ms(1000);
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
				break;
     368:	2b c0       	rjmp	.+86     	; 0x3c0 <APP_working+0x126>
			
			case APP_ADJUST_BTN : 
				// adjust
				
				// Stop the BUZZER
				BUZZER_stop();
     36a:	0e 94 2f 02 	call	0x45e	; 0x45e <BUZZER_stop>
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
				break;
     374:	25 c0       	rjmp	.+74     	; 0x3c0 <APP_working+0x126>
			default:
				
				// Invalid button
				LCD_clear();
     376:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
				LCD_setCursor(1,1);
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"the operation is");
     382:	8e ec       	ldi	r24, 0xCE	; 206
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
				LCD_setCursor(2,1);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"not allowed");
     392:	8f ed       	ldi	r24, 0xDF	; 223
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
     39a:	2f ef       	ldi	r18, 0xFF	; 255
     39c:	89 e6       	ldi	r24, 0x69	; 105
     39e:	98 e1       	ldi	r25, 0x18	; 24
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	80 40       	sbci	r24, 0x00	; 0
     3a4:	90 40       	sbci	r25, 0x00	; 0
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <APP_working+0x106>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <APP_working+0x110>
     3aa:	00 00       	nop
				//u8_delay = 0;
				//while(u8_delay <= 2);
				_delay_ms(1000);
				
				// print current temp
				LCD_clear();
     3ac:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
				LCD_setCursor(1,1);
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"Current Temp = ");
     3b8:	80 ea       	ldi	r24, 0xA0	; 160
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	LCD_clear();
	LCD_setCursor(1,1);
	LCD_writeString((uint8_t*)"Current Temp = ");
	
	
	while(u8_en_gs_programState == APP_WORKING)
     3c0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	09 f4       	brne	.+2      	; 0x3ca <APP_working+0x130>
     3c8:	7a cf       	rjmp	.-268    	; 0x2be <APP_working+0x24>
				LCD_writeString((uint8_t*)"Current Temp = ");
				break;
		}
	}
	
}
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <APP_start>:
void APP_timer0OvfHandeler(void);


void APP_start(void)
{
	DDRD = 0xff;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	81 bb       	out	0x11, r24	; 17
	APP_init();
     3da:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_init>
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <APP_start+0xe>
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
     3e0:	0e 94 b1 00 	call	0x162	; 0x162 <APP_welcome>
{
	DDRD = 0xff;
	APP_init();
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
     3e4:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
     3e8:	81 11       	cpse	r24, r1
     3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <APP_start+0x1c>
     3ec:	f9 cf       	rjmp	.-14     	; 0x3e0 <APP_start+0xa>
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
     3ee:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <APP_set>
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
     3f2:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	d1 f3       	breq	.-12     	; 0x3ee <APP_start+0x18>
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
		{
			APP_working();
     3fc:	0e 94 4d 01 	call	0x29a	; 0x29a <APP_working>
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
     400:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	d1 f3       	breq	.-12     	; 0x3fc <APP_start+0x26>
     408:	ed cf       	rjmp	.-38     	; 0x3e4 <APP_start+0xe>

0000040a <BUZZER_init>:
static uint8_t u8_gs_buzzerState = NOT_INIT;



u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
     40e:	00 97       	sbiw	r24, 0x00	; 0
     410:	99 f0       	breq	.+38     	; 0x438 <BUZZER_init+0x2e>
     412:	ec 01       	movw	r28, r24
		return BUZZER_E_NOT_OK;
	
	// Set Buzzer pin as output
	u8_en_dioErrors u8_dioRetVal = DIO_init(st_config->u8_port, st_config->u8_pin, STD_OUTPUT);
     414:	68 81       	ld	r22, Y
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
	
	// Check if there is an error from dio driver
	if(u8_dioRetVal)
     41e:	81 11       	cpse	r24, r1
     420:	0c c0       	rjmp	.+24     	; 0x43a <BUZZER_init+0x30>
		return u8_dioRetVal;
	
	// Store configuration locally
	st_gs_buzzerConfig.u8_port = st_config->u8_port;
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	e8 e0       	ldi	r30, 0x08	; 8
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	81 83       	std	Z+1, r24	; 0x01
	st_gs_buzzerConfig.u8_pin = st_config->u8_pin;
     42a:	88 81       	ld	r24, Y
     42c:	80 83       	st	Z, r24
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <u8_gs_buzzerState>
	
	return BUZZER_E_OK;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	01 c0       	rjmp	.+2      	; 0x43a <BUZZER_init+0x30>

u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
		return BUZZER_E_NOT_OK;
     438:	86 e0       	ldi	r24, 0x06	; 6
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
	
	return BUZZER_E_OK;
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <BUZZER_start>:
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
     440:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u8_gs_buzzerState>
     444:	88 23       	and	r24, r24
     446:	49 f0       	breq	.+18     	; 0x45a <BUZZER_start+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
     448:	e8 e0       	ldi	r30, 0x08	; 8
     44a:	f1 e0       	ldi	r31, 0x01	; 1
     44c:	60 81       	ld	r22, Z
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	81 81       	ldd	r24, Z+1	; 0x01
     452:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	
	return BUZZER_E_OK;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
     45a:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
	
	return BUZZER_E_OK;
}
     45c:	08 95       	ret

0000045e <BUZZER_stop>:
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
     45e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u8_gs_buzzerState>
     462:	88 23       	and	r24, r24
     464:	49 f0       	breq	.+18     	; 0x478 <BUZZER_stop+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
     466:	e8 e0       	ldi	r30, 0x08	; 8
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	60 81       	ld	r22, Z
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	81 81       	ldd	r24, Z+1	; 0x01
     470:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	
	return BUZZER_E_OK;
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
     478:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
	
	return BUZZER_E_OK;
     47a:	08 95       	ret

0000047c <KEYPAD_init>:
#define F_CPU 1000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     480:	00 97       	sbiw	r24, 0x00	; 0
     482:	a9 f1       	breq	.+106    	; 0x4ee <KEYPAD_init+0x72>
     484:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     486:	69 81       	ldd	r22, Y+1	; 0x01
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	88 81       	ld	r24, Y
     48c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     490:	6b 81       	ldd	r22, Y+3	; 0x03
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	8a 81       	ldd	r24, Y+2	; 0x02
     496:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     49a:	6d 81       	ldd	r22, Y+5	; 0x05
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	8c 81       	ldd	r24, Y+4	; 0x04
     4a0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     4a4:	69 81       	ldd	r22, Y+1	; 0x01
     4a6:	41 e0       	ldi	r20, 0x01	; 1
     4a8:	88 81       	ld	r24, Y
     4aa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     4ae:	6b 81       	ldd	r22, Y+3	; 0x03
     4b0:	41 e0       	ldi	r20, 0x01	; 1
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     4b8:	6d 81       	ldd	r22, Y+5	; 0x05
     4ba:	41 e0       	ldi	r20, 0x01	; 1
     4bc:	8c 81       	ldd	r24, Y+4	; 0x04
     4be:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     4c2:	6f 81       	ldd	r22, Y+7	; 0x07
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	8e 81       	ldd	r24, Y+6	; 0x06
     4c8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     4cc:	69 85       	ldd	r22, Y+9	; 0x09
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	88 85       	ldd	r24, Y+8	; 0x08
     4d2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     4d6:	6b 85       	ldd	r22, Y+11	; 0x0b
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	8a 85       	ldd	r24, Y+10	; 0x0a
     4dc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     4e0:	6d 85       	ldd	r22, Y+13	; 0x0d
     4e2:	41 e0       	ldi	r20, 0x01	; 1
     4e4:	8c 85       	ldd	r24, Y+12	; 0x0c
     4e6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     4ee:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	1f 92       	push	r1
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     50c:	0a e2       	ldi	r16, 0x2A	; 42
     50e:	11 e0       	ldi	r17, 0x01	; 1
     510:	f8 01       	movw	r30, r16
     512:	67 81       	ldd	r22, Z+7	; 0x07
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	86 81       	ldd	r24, Z+6	; 0x06
     518:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     51c:	f8 01       	movw	r30, r16
     51e:	61 85       	ldd	r22, Z+9	; 0x09
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	80 85       	ldd	r24, Z+8	; 0x08
     524:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     528:	f8 01       	movw	r30, r16
     52a:	63 85       	ldd	r22, Z+11	; 0x0b
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	82 85       	ldd	r24, Z+10	; 0x0a
     530:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     534:	f8 01       	movw	r30, r16
     536:	65 85       	ldd	r22, Z+13	; 0x0d
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	84 85       	ldd	r24, Z+12	; 0x0c
     53c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     540:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     542:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     544:	42 c0       	rjmp	.+132    	; 0x5ca <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     546:	ea e2       	ldi	r30, 0x2A	; 42
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	67 81       	ldd	r22, Z+7	; 0x07
     54c:	60 0f       	add	r22, r16
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	86 81       	ldd	r24, Z+6	; 0x06
     552:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		for(j=0;j<3;j++)
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	2d c0       	rjmp	.+90     	; 0x5b4 <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     55a:	ea e2       	ldi	r30, 0x2A	; 42
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	61 81       	ldd	r22, Z+1	; 0x01
     560:	61 0f       	add	r22, r17
     562:	ae 01       	movw	r20, r28
     564:	4f 5f       	subi	r20, 0xFF	; 255
     566:	5f 4f       	sbci	r21, 0xFF	; 255
     568:	80 81       	ld	r24, Z
     56a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DIO_readPIN>
			if(value==0)
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	81 11       	cpse	r24, r1
     572:	1f c0       	rjmp	.+62     	; 0x5b2 <KEYPAD_read+0xbc>
     574:	0a c0       	rjmp	.+20     	; 0x58a <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     576:	ea e2       	ldi	r30, 0x2A	; 42
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	61 81       	ldd	r22, Z+1	; 0x01
     57c:	61 0f       	add	r22, r17
     57e:	ae 01       	movw	r20, r28
     580:	4f 5f       	subi	r20, 0xFF	; 255
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	80 81       	ld	r24, Z
     586:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	88 23       	and	r24, r24
     58e:	99 f3       	breq	.-26     	; 0x576 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     590:	80 2f       	mov	r24, r16
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	e8 0f       	add	r30, r24
     59c:	f9 1f       	adc	r31, r25
     59e:	e5 51       	subi	r30, 0x15	; 21
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	e1 0f       	add	r30, r17
     5a4:	f1 1d       	adc	r31, r1
     5a6:	80 81       	ld	r24, Z
     5a8:	f7 01       	movw	r30, r14
     5aa:	80 83       	st	Z, r24
				flag=1;
     5ac:	dd 24       	eor	r13, r13
     5ae:	d3 94       	inc	r13
				
				break;
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     5b2:	1f 5f       	subi	r17, 0xFF	; 255
     5b4:	13 30       	cpi	r17, 0x03	; 3
     5b6:	88 f2       	brcs	.-94     	; 0x55a <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     5b8:	ea e2       	ldi	r30, 0x2A	; 42
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
     5bc:	67 81       	ldd	r22, Z+7	; 0x07
     5be:	60 0f       	add	r22, r16
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	86 81       	ldd	r24, Z+6	; 0x06
     5c4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     5c8:	0f 5f       	subi	r16, 0xFF	; 255
     5ca:	04 30       	cpi	r16, 0x04	; 4
     5cc:	08 f4       	brcc	.+2      	; 0x5d0 <KEYPAD_read+0xda>
     5ce:	bb cf       	rjmp	.-138    	; 0x546 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	df 16       	cp	r13, r31
     5d4:	19 f0       	breq	.+6      	; 0x5dc <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     5d6:	8e e4       	ldi	r24, 0x4E	; 78
     5d8:	f7 01       	movw	r30, r14
     5da:	80 83       	st	Z, r24
		return ret_val;
	}
	
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	08 95       	ret

000005f0 <ENABLE>:
	{
		//do nothing
	}
}
void ENABLE(void)
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
	
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_HIGH);
     5f4:	c3 e1       	ldi	r28, 0x13	; 19
     5f6:	d1 e0       	ldi	r29, 0x01	; 1
     5f8:	6e 89       	ldd	r22, Y+22	; 0x16
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	8d 89       	ldd	r24, Y+21	; 0x15
     5fe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	8a 95       	dec	r24
     606:	f1 f7       	brne	.-4      	; 0x604 <ENABLE+0x14>
     608:	00 c0       	rjmp	.+0      	; 0x60a <ENABLE+0x1a>
	_delay_us(1);
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_LOW);
     60a:	6e 89       	ldd	r22, Y+22	; 0x16
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	8d 89       	ldd	r24, Y+21	; 0x15
     610:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	//_delay_us(1);

     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <LCD_cmd>:
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	ec 01       	movw	r28, r24
     622:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
     624:	6e 89       	ldd	r22, Y+22	; 0x16
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	8d 89       	ldd	r24, Y+21	; 0x15
     62a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_LOW);
     62e:	6a 89       	ldd	r22, Y+18	; 0x12
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	89 89       	ldd	r24, Y+17	; 0x11
     634:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
     638:	6c 89       	ldd	r22, Y+20	; 0x14
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	8b 89       	ldd	r24, Y+19	; 0x13
     63e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
     642:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mode>
     646:	81 11       	cpse	r24, r1
     648:	4a c0       	rjmp	.+148    	; 0x6de <LCD_cmd+0xc4>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
     64a:	68 89       	ldd	r22, Y+16	; 0x10
     64c:	41 2f       	mov	r20, r17
     64e:	44 1f       	adc	r20, r20
     650:	44 27       	eor	r20, r20
     652:	44 1f       	adc	r20, r20
     654:	8f 85       	ldd	r24, Y+15	; 0x0f
     656:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
     65a:	6e 85       	ldd	r22, Y+14	; 0x0e
     65c:	16 fb       	bst	r17, 6
     65e:	44 27       	eor	r20, r20
     660:	40 f9       	bld	r20, 0
     662:	8d 85       	ldd	r24, Y+13	; 0x0d
     664:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
     668:	6c 85       	ldd	r22, Y+12	; 0x0c
     66a:	15 fb       	bst	r17, 5
     66c:	44 27       	eor	r20, r20
     66e:	40 f9       	bld	r20, 0
     670:	8b 85       	ldd	r24, Y+11	; 0x0b
     672:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
     676:	6a 85       	ldd	r22, Y+10	; 0x0a
     678:	14 fb       	bst	r17, 4
     67a:	44 27       	eor	r20, r20
     67c:	40 f9       	bld	r20, 0
     67e:	89 85       	ldd	r24, Y+9	; 0x09
     680:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		ENABLE();
     684:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     688:	8f e6       	ldi	r24, 0x6F	; 111
     68a:	97 e1       	ldi	r25, 0x17	; 23
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <LCD_cmd+0x72>
     690:	00 c0       	rjmp	.+0      	; 0x692 <LCD_cmd+0x78>
     692:	00 00       	nop
		_delay_ms(3);
	    DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
     694:	68 89       	ldd	r22, Y+16	; 0x10
     696:	13 fb       	bst	r17, 3
     698:	44 27       	eor	r20, r20
     69a:	40 f9       	bld	r20, 0
     69c:	8f 85       	ldd	r24, Y+15	; 0x0f
     69e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
     6a2:	6e 85       	ldd	r22, Y+14	; 0x0e
     6a4:	12 fb       	bst	r17, 2
     6a6:	44 27       	eor	r20, r20
     6a8:	40 f9       	bld	r20, 0
     6aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ac:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
     6b0:	6c 85       	ldd	r22, Y+12	; 0x0c
     6b2:	11 fb       	bst	r17, 1
     6b4:	44 27       	eor	r20, r20
     6b6:	40 f9       	bld	r20, 0
     6b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ba:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
     6be:	6a 85       	ldd	r22, Y+10	; 0x0a
     6c0:	41 2f       	mov	r20, r17
     6c2:	41 70       	andi	r20, 0x01	; 1
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		ENABLE();
     6ca:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ENABLE>
     6ce:	8f e6       	ldi	r24, 0x6F	; 111
     6d0:	97 e1       	ldi	r25, 0x17	; 23
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <LCD_cmd+0xb8>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <LCD_cmd+0xbe>
     6d8:	00 00       	nop
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <LCD_cmd+0xce>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
		ENABLE();
		_delay_ms(3);
	}
	else if(mode==LCD_8_BIT_MODE)
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <LCD_cmd+0xcc>
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <LCD_cmd+0xce>
		
	}
	else
	{
		//do nothing
		ret_val=LCD_E_NOT_OK;
     6e6:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ret_val;
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	08 95       	ret

000006f0 <LCD_init>:
#include<util/delay.h>
extern st_lcdConfigType st_gs_lcdConfig;
static uint8_t mode;
static void ENABLE(void);
u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	ec 01       	movw	r28, r24
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=DIO_init(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_OUTPUT);
     6f8:	6a 89       	ldd	r22, Y+18	; 0x12
     6fa:	41 e0       	ldi	r20, 0x01	; 1
     6fc:	89 89       	ldd	r24, Y+17	; 0x11
     6fe:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     702:	18 2f       	mov	r17, r24
	ret_val |=DIO_init(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_OUTPUT);
     704:	6c 89       	ldd	r22, Y+20	; 0x14
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	8b 89       	ldd	r24, Y+19	; 0x13
     70a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     70e:	18 2b       	or	r17, r24
	ret_val |=DIO_init(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_OUTPUT);
     710:	6e 89       	ldd	r22, Y+22	; 0x16
     712:	41 e0       	ldi	r20, 0x01	; 1
     714:	8d 89       	ldd	r24, Y+21	; 0x15
     716:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     71a:	18 2b       	or	r17, r24
	switch(st_config->u8_mode)
     71c:	88 81       	ld	r24, Y
     71e:	88 23       	and	r24, r24
     720:	19 f0       	breq	.+6      	; 0x728 <LCD_init+0x38>
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	99 f1       	breq	.+102    	; 0x78c <LCD_init+0x9c>
     726:	77 c0       	rjmp	.+238    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		case LCD_4_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x02);
     728:	62 e0       	ldi	r22, 0x02	; 2
     72a:	83 e1       	ldi	r24, 0x13	; 19
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x28);
     732:	68 e2       	ldi	r22, 0x28	; 40
     734:	83 e1       	ldi	r24, 0x13	; 19
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
     73c:	6c e0       	ldi	r22, 0x0C	; 12
     73e:	83 e1       	ldi	r24, 0x13	; 19
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	83 e1       	ldi	r24, 0x13	; 19
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	83 e1       	ldi	r24, 0x13	; 19
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
     75a:	6a 85       	ldd	r22, Y+10	; 0x0a
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	89 85       	ldd	r24, Y+9	; 0x09
     760:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     764:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
     766:	6c 85       	ldd	r22, Y+12	; 0x0c
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	8b 85       	ldd	r24, Y+11	; 0x0b
     76c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     770:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
     772:	6e 85       	ldd	r22, Y+14	; 0x0e
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	8d 85       	ldd	r24, Y+13	; 0x0d
     778:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     77c:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
     77e:	68 89       	ldd	r22, Y+16	; 0x10
     780:	41 e0       	ldi	r20, 0x01	; 1
     782:	8f 85       	ldd	r24, Y+15	; 0x0f
     784:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     788:	81 2b       	or	r24, r17
								break;
     78a:	46 c0       	rjmp	.+140    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
								
	case LCD_8_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x38);
     78c:	68 e3       	ldi	r22, 0x38	; 56
     78e:	83 e1       	ldi	r24, 0x13	; 19
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
     796:	6c e0       	ldi	r22, 0x0C	; 12
     798:	83 e1       	ldi	r24, 0x13	; 19
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
     7a0:	66 e0       	ldi	r22, 0x06	; 6
     7a2:	83 e1       	ldi	r24, 0x13	; 19
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	83 e1       	ldi	r24, 0x13	; 19
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        ret_val |=DIO_init(st_config->u8_d0Pin[0],st_config->u8_d0Pin[1],STD_OUTPUT);
     7b4:	6a 81       	ldd	r22, Y+2	; 0x02
     7b6:	41 e0       	ldi	r20, 0x01	; 1
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     7be:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d1Pin[0],st_config->u8_d1Pin[1],STD_OUTPUT);
     7c0:	6c 81       	ldd	r22, Y+4	; 0x04
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     7ca:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d2Pin[0],st_config->u8_d2Pin[1],STD_OUTPUT);
     7cc:	6e 81       	ldd	r22, Y+6	; 0x06
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     7d6:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d3Pin[0],st_config->u8_d3Pin[1],STD_OUTPUT);
     7d8:	68 85       	ldd	r22, Y+8	; 0x08
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	8f 81       	ldd	r24, Y+7	; 0x07
     7de:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     7e2:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
     7e4:	6a 85       	ldd	r22, Y+10	; 0x0a
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	89 85       	ldd	r24, Y+9	; 0x09
     7ea:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     7ee:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
     7f0:	6c 85       	ldd	r22, Y+12	; 0x0c
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     7f6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     7fa:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
     7fc:	6e 85       	ldd	r22, Y+14	; 0x0e
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	8d 85       	ldd	r24, Y+13	; 0x0d
     802:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     806:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
     808:	68 89       	ldd	r22, Y+16	; 0x10
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	8f 85       	ldd	r24, Y+15	; 0x0f
     80e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
     812:	81 2b       	or	r24, r17
								break;
     814:	01 c0       	rjmp	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	default: ret_val=LCD_E_NOT_OK;
     816:	85 e0       	ldi	r24, 0x05	; 5
				break;
								
	}
	mode=st_config->u8_mode;
     818:	98 81       	ld	r25, Y
     81a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <mode>
	return ret_val;
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	08 95       	ret

00000826 <LCD_clear>:
u8_en_lcdErrorsType LCD_clear (void)
{

	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=LCD_cmd(&st_gs_lcdConfig,0x01);
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	83 e1       	ldi	r24, 0x13	; 19
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	return ret_val;

}
     830:	08 95       	ret

00000832 <LCD_setCursor>:
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	switch(u8_row)
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	19 f0       	breq	.+6      	; 0x83c <LCD_setCursor+0xa>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	41 f0       	breq	.+16     	; 0x84a <LCD_setCursor+0x18>
     83a:	0e c0       	rjmp	.+28     	; 0x858 <LCD_setCursor+0x26>
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
     83c:	61 58       	subi	r22, 0x81	; 129
     83e:	83 e1       	ldi	r24, 0x13	; 19
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     846:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
     848:	08 95       	ret
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
     84a:	61 54       	subi	r22, 0x41	; 65
     84c:	83 e1       	ldi	r24, 0x13	; 19
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     854:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
     856:	08 95       	ret
		default:ret_val=LCD_E_NOT_OK;break;
     858:	85 e0       	ldi	r24, 0x05	; 5
	}

	return ret_val;

}
     85a:	08 95       	ret

0000085c <LCD_char>:
		ret_val=LCD_E_NOT_OK;
	}
	return ret_val;
}
  void LCD_char(st_lcdConfigType* st_config,uint8_t cmd)
{
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
     864:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
     866:	6e 89       	ldd	r22, Y+22	; 0x16
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	8d 89       	ldd	r24, Y+21	; 0x15
     86c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_HIGH);
     870:	6a 89       	ldd	r22, Y+18	; 0x12
     872:	41 e0       	ldi	r20, 0x01	; 1
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
     87a:	6c 89       	ldd	r22, Y+20	; 0x14
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	8b 89       	ldd	r24, Y+19	; 0x13
     880:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
     884:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mode>
     888:	81 11       	cpse	r24, r1
     88a:	48 c0       	rjmp	.+144    	; 0x91c <__stack+0xbd>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
     88c:	68 89       	ldd	r22, Y+16	; 0x10
     88e:	41 2f       	mov	r20, r17
     890:	44 1f       	adc	r20, r20
     892:	44 27       	eor	r20, r20
     894:	44 1f       	adc	r20, r20
     896:	8f 85       	ldd	r24, Y+15	; 0x0f
     898:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
     89c:	6e 85       	ldd	r22, Y+14	; 0x0e
     89e:	16 fb       	bst	r17, 6
     8a0:	44 27       	eor	r20, r20
     8a2:	40 f9       	bld	r20, 0
     8a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
     8aa:	6c 85       	ldd	r22, Y+12	; 0x0c
     8ac:	15 fb       	bst	r17, 5
     8ae:	44 27       	eor	r20, r20
     8b0:	40 f9       	bld	r20, 0
     8b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
     8b8:	6a 85       	ldd	r22, Y+10	; 0x0a
     8ba:	14 fb       	bst	r17, 4
     8bc:	44 27       	eor	r20, r20
     8be:	40 f9       	bld	r20, 0
     8c0:	89 85       	ldd	r24, Y+9	; 0x09
     8c2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		ENABLE();
     8c6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ENABLE>
     8ca:	8f e6       	ldi	r24, 0x6F	; 111
     8cc:	97 e1       	ldi	r25, 0x17	; 23
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <__stack+0x6f>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <__stack+0x75>
     8d4:	00 00       	nop
		_delay_ms(3);
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
     8d6:	68 89       	ldd	r22, Y+16	; 0x10
     8d8:	13 fb       	bst	r17, 3
     8da:	44 27       	eor	r20, r20
     8dc:	40 f9       	bld	r20, 0
     8de:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
     8e4:	6e 85       	ldd	r22, Y+14	; 0x0e
     8e6:	12 fb       	bst	r17, 2
     8e8:	44 27       	eor	r20, r20
     8ea:	40 f9       	bld	r20, 0
     8ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ee:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
     8f2:	6c 85       	ldd	r22, Y+12	; 0x0c
     8f4:	11 fb       	bst	r17, 1
     8f6:	44 27       	eor	r20, r20
     8f8:	40 f9       	bld	r20, 0
     8fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     8fc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
     900:	6a 85       	ldd	r22, Y+10	; 0x0a
     902:	41 2f       	mov	r20, r17
     904:	41 70       	andi	r20, 0x01	; 1
     906:	89 85       	ldd	r24, Y+9	; 0x09
     908:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_writePIN>
		ENABLE();
     90c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ENABLE>
     910:	8f e6       	ldi	r24, 0x6F	; 111
     912:	97 e1       	ldi	r25, 0x17	; 23
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <__stack+0xb5>
     918:	00 c0       	rjmp	.+0      	; 0x91a <__stack+0xbb>
     91a:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <LCD_writeString>:

	return ret_val;

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	if(u8_data==(void*)0)
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	81 f0       	breq	.+32     	; 0x94e <LCD_writeString+0x2a>
     92e:	8c 01       	movw	r16, r24
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	05 c0       	rjmp	.+10     	; 0x93e <LCD_writeString+0x1a>

	else
	{
		while(u8_data[i] !='\0')
		{
			LCD_char(&st_gs_lcdConfig,u8_data[i]);
     934:	83 e1       	ldi	r24, 0x13	; 19
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_char>
			i++;
     93c:	cf 5f       	subi	r28, 0xFF	; 255
		ret_val=LCD_E_NOT_OK;
	}

	else
	{
		while(u8_data[i] !='\0')
     93e:	f8 01       	movw	r30, r16
     940:	ec 0f       	add	r30, r28
     942:	f1 1d       	adc	r31, r1
     944:	60 81       	ld	r22, Z
     946:	61 11       	cpse	r22, r1
     948:	f5 cf       	rjmp	.-22     	; 0x934 <LCD_writeString+0x10>

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	01 c0       	rjmp	.+2      	; 0x950 <LCD_writeString+0x2c>
	if(u8_data==(void*)0)
	{
		ret_val=LCD_E_NOT_OK;
     94e:	85 e0       	ldi	r24, 0x05	; 5
		}
	}
	return ret_val;
	

}
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <LCD_writeSpChar>:
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	28 97       	sbiw	r28, 0x08	; 8
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
     96e:	98 e0       	ldi	r25, 0x08	; 8
     970:	e1 e6       	ldi	r30, 0x61	; 97
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	de 01       	movw	r26, r28
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	01 90       	ld	r0, Z+
     97a:	0d 92       	st	X+, r0
     97c:	9a 95       	dec	r25
     97e:	e1 f7       	brne	.-8      	; 0x978 <LCD_writeSpChar+0x20>
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
     980:	68 2f       	mov	r22, r24
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	68 5f       	subi	r22, 0xF8	; 248
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	66 0f       	add	r22, r22
     98a:	66 0f       	add	r22, r22
     98c:	66 0f       	add	r22, r22
     98e:	83 e1       	ldi	r24, 0x13	; 19
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	for(i=0;i<8;i++)
     996:	10 e0       	ldi	r17, 0x00	; 0
     998:	0c c0       	rjmp	.+24     	; 0x9b2 <LCD_writeSpChar+0x5a>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
     99a:	e1 e0       	ldi	r30, 0x01	; 1
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	ec 0f       	add	r30, r28
     9a0:	fd 1f       	adc	r31, r29
     9a2:	e1 0f       	add	r30, r17
     9a4:	f1 1d       	adc	r31, r1
     9a6:	60 81       	ld	r22, Z
     9a8:	83 e1       	ldi	r24, 0x13	; 19
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_char>
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
	for(i=0;i<8;i++)
     9b0:	1f 5f       	subi	r17, 0xFF	; 255
     9b2:	18 30       	cpi	r17, 0x08	; 8
     9b4:	90 f3       	brcs	.-28     	; 0x99a <LCD_writeSpChar+0x42>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
	}	
	
	LCD_cmd(&st_gs_lcdConfig,0xc0);
     9b6:	60 ec       	ldi	r22, 0xC0	; 192
     9b8:	83 e1       	ldi	r24, 0x13	; 19
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
     9c0:	63 e0       	ldi	r22, 0x03	; 3
     9c2:	83 e1       	ldi	r24, 0x13	; 19
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_char>
	return ret_val;
}
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	28 96       	adiw	r28, 0x08	; 8
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	08 95       	ret

000009e0 <TEMP_SENSOR_init>:
static void get_Vref(u8_en_adcRefType u8_a_Vref);*/

static st_adcConfigType st_sg_adc;

u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	u8_en_dioErrors l_dio_ret = DIO_E_OK;
	
	if(NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER )
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	b9 f0       	breq	.+46     	; 0xa16 <TEMP_SENSOR_init+0x36>
     9e8:	fc 01       	movw	r30, r24
     9ea:	22 81       	ldd	r18, Z+2	; 0x02
     9ec:	28 30       	cpi	r18, 0x08	; 8
     9ee:	a8 f4       	brcc	.+42     	; 0xa1a <TEMP_SENSOR_init+0x3a>
     9f0:	21 81       	ldd	r18, Z+1	; 0x01
     9f2:	28 30       	cpi	r18, 0x08	; 8
     9f4:	a0 f4       	brcc	.+40     	; 0xa1e <TEMP_SENSOR_init+0x3e>
     9f6:	ec 01       	movw	r28, r24
	{
		l_TempSensor_ret = TEMP_E_NOT_OK;
	}
	else
	{
		st_sg_adc.u8_prescaler_selection = st_config->u8_prescaler_selection;
     9f8:	eb e0       	ldi	r30, 0x0B	; 11
     9fa:	f1 e0       	ldi	r31, 0x01	; 1
     9fc:	21 83       	std	Z+1, r18	; 0x01
		st_sg_adc.u8_ref_selection = st_config->u8_ref_selection;
     9fe:	88 81       	ld	r24, Y
     a00:	80 83       	st	Z, r24
		l_adc_ret = ADC_init(&st_sg_adc);
     a02:	cf 01       	movw	r24, r30
     a04:	0e 94 d0 05 	call	0xba0	; 0xba0 <ADC_init>
		l_dio_ret = DIO_init(porta,st_config->u8_channel,STD_INPUT);
     a08:	6a 81       	ldd	r22, Y+2	; 0x02
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>

static st_adcConfigType st_sg_adc;

u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <TEMP_SENSOR_init+0x40>
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	u8_en_dioErrors l_dio_ret = DIO_E_OK;
	
	if(NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER )
	{
		l_TempSensor_ret = TEMP_E_NOT_OK;
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <TEMP_SENSOR_init+0x40>
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <TEMP_SENSOR_init+0x40>
     a1e:	88 e0       	ldi	r24, 0x08	; 8
		/*get_channel(st_config->u8_channel);
		get_Vref(st_config->u8_ref_selection);*/
				
	}
	return l_TempSensor_ret;
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <TEMP_SENSOR_read>:

u8_en_tempSensorErrorsType TEMP_SENSOR_read (st_tempSensorConfigType* st_config , uint8_t * u8_data)
{
     a26:	8f 92       	push	r8
     a28:	9f 92       	push	r9
     a2a:	af 92       	push	r10
     a2c:	bf 92       	push	r11
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <TEMP_SENSOR_read+0x16>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <TEMP_SENSOR_read+0x18>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	double f64_l_readTemp_ADC = 0.0;
     a42:	19 82       	std	Y+1, r1	; 0x01
     a44:	1a 82       	std	Y+2, r1	; 0x02
     a46:	1b 82       	std	Y+3, r1	; 0x03
     a48:	1c 82       	std	Y+4, r1	; 0x04
	double f64_l_stepSize = 0.0;
	
	if(NULL== u8_data || NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER)
     a4a:	61 15       	cp	r22, r1
     a4c:	71 05       	cpc	r23, r1
     a4e:	09 f4       	brne	.+2      	; 0xa52 <TEMP_SENSOR_read+0x2c>
     a50:	5a c0       	rjmp	.+180    	; 0xb06 <TEMP_SENSOR_read+0xe0>
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	09 f4       	brne	.+2      	; 0xa58 <TEMP_SENSOR_read+0x32>
     a56:	59 c0       	rjmp	.+178    	; 0xb0a <TEMP_SENSOR_read+0xe4>
     a58:	fc 01       	movw	r30, r24
     a5a:	22 81       	ldd	r18, Z+2	; 0x02
     a5c:	28 30       	cpi	r18, 0x08	; 8
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <TEMP_SENSOR_read+0x3c>
     a60:	56 c0       	rjmp	.+172    	; 0xb0e <TEMP_SENSOR_read+0xe8>
     a62:	31 81       	ldd	r19, Z+1	; 0x01
     a64:	38 30       	cpi	r19, 0x08	; 8
     a66:	08 f0       	brcs	.+2      	; 0xa6a <TEMP_SENSOR_read+0x44>
     a68:	54 c0       	rjmp	.+168    	; 0xb12 <TEMP_SENSOR_read+0xec>
     a6a:	7b 01       	movw	r14, r22
     a6c:	8c 01       	movw	r16, r24
		l_TempSensor_ret = TEMP_E_NOT_OK;
	}
	else
	{
		
		l_adc_ret = ADC_read(st_config->u8_channel,&f64_l_readTemp_ADC);
     a6e:	be 01       	movw	r22, r28
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	82 2f       	mov	r24, r18
     a76:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_read>
		if(ADC_E_OK==l_adc_ret)
     a7a:	81 11       	cpse	r24, r1
     a7c:	4b c0       	rjmp	.+150    	; 0xb14 <TEMP_SENSOR_read+0xee>
		{
			if( ADC_INTERNAL_2_56V_REF == st_config->u8_ref_selection)
     a7e:	f8 01       	movw	r30, r16
     a80:	90 81       	ld	r25, Z
     a82:	93 30       	cpi	r25, 0x03	; 3
     a84:	31 f0       	breq	.+12     	; 0xa92 <TEMP_SENSOR_read+0x6c>
			{
				f64_l_stepSize = ( INTERNAL_VOLTAGE /ADC_MAX_RESOLUTION);
			}
			else if(ADC_AVCC == st_config->u8_ref_selection)
     a86:	91 30       	cpi	r25, 0x01	; 1
     a88:	79 f0       	breq	.+30     	; 0xaa8 <TEMP_SENSOR_read+0x82>
u8_en_tempSensorErrorsType TEMP_SENSOR_read (st_tempSensorConfigType* st_config , uint8_t * u8_data)
{
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	double f64_l_readTemp_ADC = 0.0;
	double f64_l_stepSize = 0.0;
     a8a:	81 2c       	mov	r8, r1
     a8c:	91 2c       	mov	r9, r1
     a8e:	54 01       	movw	r10, r8
     a90:	13 c0       	rjmp	.+38     	; 0xab8 <TEMP_SENSOR_read+0x92>
		l_adc_ret = ADC_read(st_config->u8_channel,&f64_l_readTemp_ADC);
		if(ADC_E_OK==l_adc_ret)
		{
			if( ADC_INTERNAL_2_56V_REF == st_config->u8_ref_selection)
			{
				f64_l_stepSize = ( INTERNAL_VOLTAGE /ADC_MAX_RESOLUTION);
     a92:	0f 2e       	mov	r0, r31
     a94:	fa e0       	ldi	r31, 0x0A	; 10
     a96:	8f 2e       	mov	r8, r31
     a98:	f7 ed       	ldi	r31, 0xD7	; 215
     a9a:	9f 2e       	mov	r9, r31
     a9c:	f3 e2       	ldi	r31, 0x23	; 35
     a9e:	af 2e       	mov	r10, r31
     aa0:	fb e3       	ldi	r31, 0x3B	; 59
     aa2:	bf 2e       	mov	r11, r31
     aa4:	f0 2d       	mov	r31, r0
     aa6:	08 c0       	rjmp	.+16     	; 0xab8 <TEMP_SENSOR_read+0x92>
			}
			else if(ADC_AVCC == st_config->u8_ref_selection)
			{
				f64_l_stepSize = ( AVCC_VOLTAGE /ADC_MAX_RESOLUTION);
     aa8:	0f 2e       	mov	r0, r31
     aaa:	81 2c       	mov	r8, r1
     aac:	91 2c       	mov	r9, r1
     aae:	f0 ea       	ldi	r31, 0xA0	; 160
     ab0:	af 2e       	mov	r10, r31
     ab2:	fb e3       	ldi	r31, 0x3B	; 59
     ab4:	bf 2e       	mov	r11, r31
     ab6:	f0 2d       	mov	r31, r0
			//l_adc_ret = ADC_E_NOT_OK;
			return l_adc_ret;
		}
		
		/*get the ADC digital value in analog voltage(DAC) then in temperature degree*/
		if(((uint32_t)l_adc_ret * f64_l_stepSize * VOLTAGE_TO_CELSUIS_FACTOR) >= MAX_TEMPERATURE_SENSOR_VALUE)
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__floatunsisf>
     ac4:	a5 01       	movw	r20, r10
     ac6:	94 01       	movw	r18, r8
     ac8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__mulsf3>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	48 ec       	ldi	r20, 0xC8	; 200
     ad2:	52 e4       	ldi	r21, 0x42	; 66
     ad4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__mulsf3>
     ad8:	4b 01       	movw	r8, r22
     ada:	5c 01       	movw	r10, r24
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	46 e1       	ldi	r20, 0x16	; 22
     ae2:	53 e4       	ldi	r21, 0x43	; 67
     ae4:	0e 94 4e 09 	call	0x129c	; 0x129c <__gesf2>
     ae8:	88 23       	and	r24, r24
     aea:	2c f0       	brlt	.+10     	; 0xaf6 <TEMP_SENSOR_read+0xd0>
		{
			// if temperature more than maximum ,will saturate at maximum possible temperature the sensor can measure 
			*u8_data = MAX_TEMPERATURE_SENSOR_VALUE ;
     aec:	86 e9       	ldi	r24, 0x96	; 150
     aee:	f7 01       	movw	r30, r14
     af0:	80 83       	st	Z, r24
	return l_TempSensor_ret;
}

u8_en_tempSensorErrorsType TEMP_SENSOR_read (st_tempSensorConfigType* st_config , uint8_t * u8_data)
{
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0f c0       	rjmp	.+30     	; 0xb14 <TEMP_SENSOR_read+0xee>
			// if temperature more than maximum ,will saturate at maximum possible temperature the sensor can measure 
			*u8_data = MAX_TEMPERATURE_SENSOR_VALUE ;
		}
		else
		{
			*u8_data = (uint8_t)((uint32_t)l_adc_ret * f64_l_stepSize * VOLTAGE_TO_CELSUIS_FACTOR);
     af6:	c5 01       	movw	r24, r10
     af8:	b4 01       	movw	r22, r8
     afa:	0e 94 b9 08 	call	0x1172	; 0x1172 <__fixunssfsi>
     afe:	f7 01       	movw	r30, r14
     b00:	60 83       	st	Z, r22
	return l_TempSensor_ret;
}

u8_en_tempSensorErrorsType TEMP_SENSOR_read (st_tempSensorConfigType* st_config , uint8_t * u8_data)
{
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	07 c0       	rjmp	.+14     	; 0xb14 <TEMP_SENSOR_read+0xee>
	double f64_l_readTemp_ADC = 0.0;
	double f64_l_stepSize = 0.0;
	
	if(NULL== u8_data || NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER)
	{
		l_TempSensor_ret = TEMP_E_NOT_OK;
     b06:	88 e0       	ldi	r24, 0x08	; 8
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <TEMP_SENSOR_read+0xee>
     b0a:	88 e0       	ldi	r24, 0x08	; 8
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <TEMP_SENSOR_read+0xee>
     b0e:	88 e0       	ldi	r24, 0x08	; 8
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <TEMP_SENSOR_read+0xee>
     b12:	88 e0       	ldi	r24, 0x08	; 8
			*u8_data = (uint8_t)((uint32_t)l_adc_ret * f64_l_stepSize * VOLTAGE_TO_CELSUIS_FACTOR);
		}
		
	}
	return l_TempSensor_ret;
}
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	9f 90       	pop	r9
     b2e:	8f 90       	pop	r8
     b30:	08 95       	ret

00000b32 <TIMER_Manager_init>:
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	91 f0       	breq	.+36     	; 0xb60 <TIMER_Manager_init+0x2e>
     b3c:	fc 01       	movw	r30, r24
     b3e:	20 81       	ld	r18, Z
     b40:	23 30       	cpi	r18, 0x03	; 3
     b42:	80 f4       	brcc	.+32     	; 0xb64 <TIMER_Manager_init+0x32>
     b44:	21 81       	ldd	r18, Z+1	; 0x01
     b46:	2a 30       	cpi	r18, 0x0A	; 10
     b48:	78 f4       	brcc	.+30     	; 0xb68 <TIMER_Manager_init+0x36>
     b4a:	ec 01       	movw	r28, r24
     b4c:	0e 94 df 07 	call	0xfbe	; 0xfbe <TIMER_init>
     b50:	18 2f       	mov	r17, r24
     b52:	68 81       	ld	r22, Y
     b54:	8d 81       	ldd	r24, Y+5	; 0x05
     b56:	9e 81       	ldd	r25, Y+6	; 0x06
     b58:	0e 94 97 08 	call	0x112e	; 0x112e <TIMER_setCallBack>
     b5c:	81 2b       	or	r24, r17
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <TIMER_Manager_init+0x38>
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	03 c0       	rjmp	.+6      	; 0xb6a <TIMER_Manager_init+0x38>
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <TIMER_Manager_init+0x38>
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	08 95       	ret

00000b72 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	51 f0       	breq	.+20     	; 0xb8a <TIMER_Manager_reset+0x18>
     b76:	fc 01       	movw	r30, r24
     b78:	20 81       	ld	r18, Z
     b7a:	23 30       	cpi	r18, 0x03	; 3
     b7c:	40 f4       	brcc	.+16     	; 0xb8e <TIMER_Manager_reset+0x1c>
     b7e:	21 81       	ldd	r18, Z+1	; 0x01
     b80:	2a 30       	cpi	r18, 0x0A	; 10
     b82:	38 f4       	brcc	.+14     	; 0xb92 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
     b84:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <TIMER_reset>
     b88:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	08 95       	ret
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	08 95       	ret
     b92:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
     b94:	08 95       	ret

00000b96 <main>:

#include "APP/app.h"
#include "MCAL/adc/adc.h"
int main(void)
{
	APP_start();
     b96:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <APP_start>
}
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	08 95       	ret

00000ba0 <ADC_init>:

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(st_config == NULL){
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	99 f0       	breq	.+38     	; 0xbca <ADC_init+0x2a>
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
     ba4:	fc 01       	movw	r30, r24
     ba6:	21 81       	ldd	r18, Z+1	; 0x01
     ba8:	20 68       	ori	r18, 0x80	; 128
     baa:	26 b9       	out	0x06, r18	; 6
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
     bac:	80 81       	ld	r24, Z
     bae:	82 95       	swap	r24
     bb0:	88 0f       	add	r24, r24
     bb2:	88 0f       	add	r24, r24
     bb4:	80 7c       	andi	r24, 0xC0	; 192
     bb6:	87 b9       	out	0x07, r24	; 7
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <ADC_init+0x20>
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	8a 30       	cpi	r24, 0x0A	; 10
     bc2:	91 05       	cpc	r25, r1
     bc4:	e4 f3       	brlt	.-8      	; 0xbbe <ADC_init+0x1e>
#include "adc.h"

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	08 95       	ret
	if(st_config == NULL){
		ret = ADC_E_NOT_OK;
     bca:	84 e0       	ldi	r24, 0x04	; 4
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
		
	}
	return ret;
	
}
     bcc:	08 95       	ret

00000bce <ADC_read>:
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, uint16_t * u16_data)
{
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
     bd4:	88 30       	cpi	r24, 0x08	; 8
     bd6:	e0 f5       	brcc	.+120    	; 0xc50 <ADC_read+0x82>
     bd8:	61 15       	cp	r22, r1
     bda:	71 05       	cpc	r23, r1
     bdc:	d9 f1       	breq	.+118    	; 0xc54 <ADC_read+0x86>
     bde:	8b 01       	movw	r16, r22
     be0:	c8 2f       	mov	r28, r24
		ret =	ADC_E_NOT_OK;
	}
	else{
		if(((DDRA & (1U<<u8_channelID))>>u8_channelID) != 0)
     be2:	4a b3       	in	r20, 0x1a	; 26
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9c 01       	movw	r18, r24
     bea:	0c 2e       	mov	r0, r28
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <ADC_read+0x24>
     bee:	22 0f       	add	r18, r18
     bf0:	33 1f       	adc	r19, r19
     bf2:	0a 94       	dec	r0
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <ADC_read+0x20>
     bf6:	84 2f       	mov	r24, r20
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	82 23       	and	r24, r18
     bfc:	93 23       	and	r25, r19
     bfe:	0c 2e       	mov	r0, r28
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <ADC_read+0x38>
     c02:	96 95       	lsr	r25
     c04:	87 95       	ror	r24
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <ADC_read+0x34>
     c0a:	89 2b       	or	r24, r25
     c0c:	29 f0       	breq	.+10     	; 0xc18 <ADC_read+0x4a>
		{
			DIO_init (porta, u8_channelID, STD_INPUT);
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	6c 2f       	mov	r22, r28
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DIO_init>
		}
		
		while(READ_BIT(ADCSRA_ADD, ADC_START_CONVERSION) == 1);
     c18:	36 99       	sbic	0x06, 6	; 6
     c1a:	fe cf       	rjmp	.-4      	; 0xc18 <ADC_read+0x4a>
		
		ADMUX_ADD  = (0xf8 & ADMUX_ADD) | u8_channelID;
     c1c:	87 b1       	in	r24, 0x07	; 7
     c1e:	88 7f       	andi	r24, 0xF8	; 248
     c20:	8c 2b       	or	r24, r28
     c22:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADCSRA_ADD, ADC_START_CONVERSION);
     c24:	86 b1       	in	r24, 0x06	; 6
     c26:	80 64       	ori	r24, 0x40	; 64
     c28:	86 b9       	out	0x06, r24	; 6
     c2a:	8f e1       	ldi	r24, 0x1F	; 31
     c2c:	9e e4       	ldi	r25, 0x4E	; 78
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <ADC_read+0x60>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <ADC_read+0x66>
     c34:	00 00       	nop
		_delay_ms(10);
		while(READ_BIT(ADCSRA_ADD, ADC_INT_FLAG) == 0);
     c36:	34 9b       	sbis	0x06, 4	; 6
     c38:	fe cf       	rjmp	.-4      	; 0xc36 <ADC_read+0x68>
		uint16_t	adc_data_temp=0;	
		adc_data_temp = ADCL_ADD;
     c3a:	24 b1       	in	r18, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
     c3c:	85 b1       	in	r24, 0x05	; 5
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	98 2f       	mov	r25, r24
     c42:	88 27       	eor	r24, r24
     c44:	82 2b       	or	r24, r18
		*u16_data  = adc_data_temp;
     c46:	f8 01       	movw	r30, r16
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	80 83       	st	Z, r24
	return ret;
	
}
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, uint16_t * u16_data)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <ADC_read+0x88>
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
		ret =	ADC_E_NOT_OK;
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <ADC_read+0x88>
     c54:	84 e0       	ldi	r24, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
		*u16_data  = adc_data_temp;
	}
	
	return ret;
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     c5e:	68 30       	cpi	r22, 0x08	; 8
     c60:	a0 f5       	brcc	.+104    	; 0xcca <DIO_init+0x6c>
	{
		if (port == porta)
     c62:	81 11       	cpse	r24, r1
     c64:	0b c0       	rjmp	.+22     	; 0xc7c <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     c66:	8a b3       	in	r24, 0x1a	; 26
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_init+0x12>
     c6c:	44 0f       	add	r20, r20
     c6e:	55 1f       	adc	r21, r21
     c70:	6a 95       	dec	r22
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_init+0xe>
     c74:	48 2b       	or	r20, r24
     c76:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	08 95       	ret
		}
		else if (port == portb)
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	59 f4       	brne	.+22     	; 0xc96 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     c80:	87 b3       	in	r24, 0x17	; 23
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_init+0x2c>
     c86:	44 0f       	add	r20, r20
     c88:	55 1f       	adc	r21, r21
     c8a:	6a 95       	dec	r22
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_init+0x28>
     c8e:	48 2b       	or	r20, r24
     c90:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	08 95       	ret
		}
		else if (port == portc)
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	59 f4       	brne	.+22     	; 0xcb0 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     c9a:	84 b3       	in	r24, 0x14	; 20
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_init+0x46>
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	6a 95       	dec	r22
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_init+0x42>
     ca8:	48 2b       	or	r20, r24
     caa:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret
		}
		else if (port == portd)
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	69 f4       	brne	.+26     	; 0xcce <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     cb4:	81 b3       	in	r24, 0x11	; 17
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <DIO_init+0x60>
     cba:	44 0f       	add	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	6a 95       	dec	r22
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <DIO_init+0x5c>
     cc2:	48 2b       	or	r20, r24
     cc4:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     cce:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     cd0:	08 95       	ret

00000cd2 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     cd2:	68 30       	cpi	r22, 0x08	; 8
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <DIO_writePIN+0x6>
     cd6:	74 c0       	rjmp	.+232    	; 0xdc0 <DIO_writePIN+0xee>
	{
		if (port == porta)
     cd8:	81 11       	cpse	r24, r1
     cda:	1b c0       	rjmp	.+54     	; 0xd12 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     cdc:	41 30       	cpi	r20, 0x01	; 1
     cde:	61 f4       	brne	.+24     	; 0xcf8 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     ce0:	2b b3       	in	r18, 0x1b	; 27
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_writePIN+0x1a>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	6a 95       	dec	r22
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_writePIN+0x16>
     cf0:	82 2b       	or	r24, r18
     cf2:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     cf8:	2b b3       	in	r18, 0x1b	; 27
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_writePIN+0x32>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	6a 95       	dec	r22
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_writePIN+0x2e>
     d08:	80 95       	com	r24
     d0a:	82 23       	and	r24, r18
     d0c:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	08 95       	ret
		}
		else if (port == portb)
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	d9 f4       	brne	.+54     	; 0xd4c <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     d16:	41 30       	cpi	r20, 0x01	; 1
     d18:	61 f4       	brne	.+24     	; 0xd32 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     d1a:	28 b3       	in	r18, 0x18	; 24
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_writePIN+0x54>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	6a 95       	dec	r22
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_writePIN+0x50>
     d2a:	82 2b       	or	r24, r18
     d2c:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     d32:	28 b3       	in	r18, 0x18	; 24
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_writePIN+0x6c>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	6a 95       	dec	r22
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_writePIN+0x68>
     d42:	80 95       	com	r24
     d44:	82 23       	and	r24, r18
     d46:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	08 95       	ret
		}
		else if (port == portc)
     d4c:	82 30       	cpi	r24, 0x02	; 2
     d4e:	d9 f4       	brne	.+54     	; 0xd86 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     d50:	41 30       	cpi	r20, 0x01	; 1
     d52:	61 f4       	brne	.+24     	; 0xd6c <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     d54:	25 b3       	in	r18, 0x15	; 21
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_writePIN+0x8e>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	6a 95       	dec	r22
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_writePIN+0x8a>
     d64:	82 2b       	or	r24, r18
     d66:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     d6c:	25 b3       	in	r18, 0x15	; 21
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_writePIN+0xa6>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	6a 95       	dec	r22
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_writePIN+0xa2>
     d7c:	80 95       	com	r24
     d7e:	82 23       	and	r24, r18
     d80:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	08 95       	ret
		}
		else if (port == portd)
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	e9 f4       	brne	.+58     	; 0xdc4 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     d8a:	41 30       	cpi	r20, 0x01	; 1
     d8c:	61 f4       	brne	.+24     	; 0xda6 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     d8e:	22 b3       	in	r18, 0x12	; 18
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_writePIN+0xc8>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	6a 95       	dec	r22
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_writePIN+0xc4>
     d9e:	82 2b       	or	r24, r18
     da0:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     da6:	22 b3       	in	r18, 0x12	; 18
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_writePIN+0xe0>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	6a 95       	dec	r22
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_writePIN+0xdc>
     db6:	80 95       	com	r24
     db8:	82 23       	and	r24, r18
     dba:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     dc4:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     dc6:	08 95       	ret

00000dc8 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     dc8:	68 30       	cpi	r22, 0x08	; 8
     dca:	08 f0       	brcs	.+2      	; 0xdce <DIO_readPIN+0x6>
     dcc:	64 c0       	rjmp	.+200    	; 0xe96 <DIO_readPIN+0xce>
	{
		if (port == porta)
     dce:	81 11       	cpse	r24, r1
     dd0:	17 c0       	rjmp	.+46     	; 0xe00 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     dd2:	79 b3       	in	r23, 0x19	; 25
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 01       	movw	r18, r24
     dda:	06 2e       	mov	r0, r22
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_readPIN+0x1a>
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_readPIN+0x16>
     de6:	87 2f       	mov	r24, r23
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	82 23       	and	r24, r18
     dec:	93 23       	and	r25, r19
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_readPIN+0x2c>
     df0:	96 95       	lsr	r25
     df2:	87 95       	ror	r24
     df4:	6a 95       	dec	r22
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_readPIN+0x28>
     df8:	fa 01       	movw	r30, r20
     dfa:	80 83       	st	Z, r24
			return DIO_E_OK;
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	08 95       	ret
		}
		else if (port == portb)
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	b9 f4       	brne	.+46     	; 0xe32 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     e04:	76 b3       	in	r23, 0x16	; 22
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9c 01       	movw	r18, r24
     e0c:	06 2e       	mov	r0, r22
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_readPIN+0x4c>
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_readPIN+0x48>
     e18:	87 2f       	mov	r24, r23
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	82 23       	and	r24, r18
     e1e:	93 23       	and	r25, r19
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_readPIN+0x5e>
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	6a 95       	dec	r22
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_readPIN+0x5a>
     e2a:	fa 01       	movw	r30, r20
     e2c:	80 83       	st	Z, r24
			return DIO_E_OK;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	08 95       	ret
		}
		else if (port == portc)
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	b9 f4       	brne	.+46     	; 0xe64 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     e36:	73 b3       	in	r23, 0x13	; 19
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9c 01       	movw	r18, r24
     e3e:	06 2e       	mov	r0, r22
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_readPIN+0x7e>
     e42:	22 0f       	add	r18, r18
     e44:	33 1f       	adc	r19, r19
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_readPIN+0x7a>
     e4a:	87 2f       	mov	r24, r23
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	82 23       	and	r24, r18
     e50:	93 23       	and	r25, r19
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_readPIN+0x90>
     e54:	96 95       	lsr	r25
     e56:	87 95       	ror	r24
     e58:	6a 95       	dec	r22
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_readPIN+0x8c>
     e5c:	fa 01       	movw	r30, r20
     e5e:	80 83       	st	Z, r24
			return DIO_E_OK;
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	08 95       	ret
		}
		else if (port == portd)
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	c9 f4       	brne	.+50     	; 0xe9a <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     e68:	70 b3       	in	r23, 0x10	; 16
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9c 01       	movw	r18, r24
     e70:	06 2e       	mov	r0, r22
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_readPIN+0xb0>
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_readPIN+0xac>
     e7c:	87 2f       	mov	r24, r23
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	82 23       	and	r24, r18
     e82:	93 23       	and	r25, r19
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_readPIN+0xc2>
     e86:	96 95       	lsr	r25
     e88:	87 95       	ror	r24
     e8a:	6a 95       	dec	r22
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_readPIN+0xbe>
     e8e:	fa 01       	movw	r30, r20
     e90:	80 83       	st	Z, r24
			return DIO_E_OK;
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     e9a:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     e9c:	08 95       	ret

00000e9e <__vector_11>:
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
     ec0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sg_Timer0_callBackPtr>
     ec4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sg_Timer0_callBackPtr+0x1>
     ec8:	89 2b       	or	r24, r25
     eca:	41 f0       	breq	.+16     	; 0xedc <__vector_11+0x3e>
     ecc:	88 b7       	in	r24, 0x38	; 56
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	88 bf       	out	0x38, r24	; 56
     ed2:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <sg_Timer0_callBackPtr>
     ed6:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <sg_Timer0_callBackPtr+0x1>
     eda:	09 95       	icall
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <__vector_9>:
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sg_Timer1_callBackPtr>
     f24:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <sg_Timer1_callBackPtr+0x1>
     f28:	89 2b       	or	r24, r25
     f2a:	41 f0       	breq	.+16     	; 0xf3c <__vector_9+0x3e>
     f2c:	88 b7       	in	r24, 0x38	; 56
     f2e:	8b 7f       	andi	r24, 0xFB	; 251
     f30:	88 bf       	out	0x38, r24	; 56
     f32:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <sg_Timer1_callBackPtr>
     f36:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <sg_Timer1_callBackPtr+0x1>
     f3a:	09 95       	icall
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	bf 91       	pop	r27
     f42:	af 91       	pop	r26
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	7f 91       	pop	r23
     f4a:	6f 91       	pop	r22
     f4c:	5f 91       	pop	r21
     f4e:	4f 91       	pop	r20
     f50:	3f 91       	pop	r19
     f52:	2f 91       	pop	r18
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <__vector_5>:
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
     f80:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <sg_Timer2_callBackPtr>
     f84:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <sg_Timer2_callBackPtr+0x1>
     f88:	89 2b       	or	r24, r25
     f8a:	41 f0       	breq	.+16     	; 0xf9c <__vector_5+0x3e>
     f8c:	88 b7       	in	r24, 0x38	; 56
     f8e:	8f 7b       	andi	r24, 0xBF	; 191
     f90:	88 bf       	out	0x38, r24	; 56
     f92:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <sg_Timer2_callBackPtr>
     f96:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <sg_Timer2_callBackPtr+0x1>
     f9a:	09 95       	icall
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <TIMER_init>:
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <TIMER_init+0x6>
     fc2:	7b c0       	rjmp	.+246    	; 0x10ba <TIMER_init+0xfc>
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 81       	ld	r18, Z
     fc8:	23 30       	cpi	r18, 0x03	; 3
     fca:	08 f0       	brcs	.+2      	; 0xfce <TIMER_init+0x10>
     fcc:	78 c0       	rjmp	.+240    	; 0x10be <TIMER_init+0x100>
     fce:	31 81       	ldd	r19, Z+1	; 0x01
     fd0:	3a 30       	cpi	r19, 0x0A	; 10
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <TIMER_init+0x18>
     fd4:	76 c0       	rjmp	.+236    	; 0x10c2 <TIMER_init+0x104>
     fd6:	21 30       	cpi	r18, 0x01	; 1
     fd8:	11 f1       	breq	.+68     	; 0x101e <TIMER_init+0x60>
     fda:	20 f0       	brcs	.+8      	; 0xfe4 <TIMER_init+0x26>
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	09 f4       	brne	.+2      	; 0xfe2 <TIMER_init+0x24>
     fe0:	4f c0       	rjmp	.+158    	; 0x1080 <TIMER_init+0xc2>
     fe2:	71 c0       	rjmp	.+226    	; 0x10c6 <TIMER_init+0x108>
     fe4:	12 be       	out	0x32, r1	; 50
     fe6:	13 be       	out	0x33, r1	; 51
     fe8:	1c be       	out	0x3c, r1	; 60
     fea:	fc 01       	movw	r30, r24
     fec:	22 81       	ldd	r18, Z+2	; 0x02
     fee:	22 bf       	out	0x32, r18	; 50
     ff0:	23 b7       	in	r18, 0x33	; 51
     ff2:	20 68       	ori	r18, 0x80	; 128
     ff4:	23 bf       	out	0x33, r18	; 51
     ff6:	23 b7       	in	r18, 0x33	; 51
     ff8:	2f 7b       	andi	r18, 0xBF	; 191
     ffa:	23 bf       	out	0x33, r18	; 51
     ffc:	23 b7       	in	r18, 0x33	; 51
     ffe:	27 7f       	andi	r18, 0xF7	; 247
    1000:	23 bf       	out	0x33, r18	; 51
    1002:	23 b7       	in	r18, 0x33	; 51
    1004:	2f 7e       	andi	r18, 0xEF	; 239
    1006:	23 bf       	out	0x33, r18	; 51
    1008:	23 b7       	in	r18, 0x33	; 51
    100a:	2f 7d       	andi	r18, 0xDF	; 223
    100c:	23 bf       	out	0x33, r18	; 51
    100e:	84 81       	ldd	r24, Z+4	; 0x04
    1010:	81 11       	cpse	r24, r1
    1012:	5b c0       	rjmp	.+182    	; 0x10ca <TIMER_init+0x10c>
    1014:	89 b7       	in	r24, 0x39	; 57
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	89 bf       	out	0x39, r24	; 57
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	08 95       	ret
    101e:	1c bc       	out	0x2c, r1	; 44
    1020:	1d bc       	out	0x2d, r1	; 45
    1022:	1f bc       	out	0x2f, r1	; 47
    1024:	1e bc       	out	0x2e, r1	; 46
    1026:	1b bc       	out	0x2b, r1	; 43
    1028:	1a bc       	out	0x2a, r1	; 42
    102a:	fc 01       	movw	r30, r24
    102c:	22 81       	ldd	r18, Z+2	; 0x02
    102e:	33 81       	ldd	r19, Z+3	; 0x03
    1030:	3d bd       	out	0x2d, r19	; 45
    1032:	2c bd       	out	0x2c, r18	; 44
    1034:	2f b5       	in	r18, 0x2f	; 47
    1036:	28 60       	ori	r18, 0x08	; 8
    1038:	2f bd       	out	0x2f, r18	; 47
    103a:	2f b5       	in	r18, 0x2f	; 47
    103c:	24 60       	ori	r18, 0x04	; 4
    103e:	2f bd       	out	0x2f, r18	; 47
    1040:	2f b5       	in	r18, 0x2f	; 47
    1042:	2e 7f       	andi	r18, 0xFE	; 254
    1044:	2f bd       	out	0x2f, r18	; 47
    1046:	2f b5       	in	r18, 0x2f	; 47
    1048:	2d 7f       	andi	r18, 0xFD	; 253
    104a:	2f bd       	out	0x2f, r18	; 47
    104c:	2e b5       	in	r18, 0x2e	; 46
    104e:	2f 7e       	andi	r18, 0xEF	; 239
    1050:	2e bd       	out	0x2e, r18	; 46
    1052:	2e b5       	in	r18, 0x2e	; 46
    1054:	27 7f       	andi	r18, 0xF7	; 247
    1056:	2e bd       	out	0x2e, r18	; 46
    1058:	2f b5       	in	r18, 0x2f	; 47
    105a:	2f 7b       	andi	r18, 0xBF	; 191
    105c:	2f bd       	out	0x2f, r18	; 47
    105e:	2f b5       	in	r18, 0x2f	; 47
    1060:	2f 77       	andi	r18, 0x7F	; 127
    1062:	2f bd       	out	0x2f, r18	; 47
    1064:	2f b5       	in	r18, 0x2f	; 47
    1066:	2f 7e       	andi	r18, 0xEF	; 239
    1068:	2f bd       	out	0x2f, r18	; 47
    106a:	2f b5       	in	r18, 0x2f	; 47
    106c:	2f 7d       	andi	r18, 0xDF	; 223
    106e:	2f bd       	out	0x2f, r18	; 47
    1070:	84 81       	ldd	r24, Z+4	; 0x04
    1072:	81 11       	cpse	r24, r1
    1074:	2c c0       	rjmp	.+88     	; 0x10ce <TIMER_init+0x110>
    1076:	89 b7       	in	r24, 0x39	; 57
    1078:	84 60       	ori	r24, 0x04	; 4
    107a:	89 bf       	out	0x39, r24	; 57
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	08 95       	ret
    1080:	14 bc       	out	0x24, r1	; 36
    1082:	15 bc       	out	0x25, r1	; 37
    1084:	13 bc       	out	0x23, r1	; 35
    1086:	fc 01       	movw	r30, r24
    1088:	22 81       	ldd	r18, Z+2	; 0x02
    108a:	24 bd       	out	0x24, r18	; 36
    108c:	25 b5       	in	r18, 0x25	; 37
    108e:	20 68       	ori	r18, 0x80	; 128
    1090:	25 bd       	out	0x25, r18	; 37
    1092:	25 b5       	in	r18, 0x25	; 37
    1094:	2f 7b       	andi	r18, 0xBF	; 191
    1096:	25 bd       	out	0x25, r18	; 37
    1098:	25 b5       	in	r18, 0x25	; 37
    109a:	27 7f       	andi	r18, 0xF7	; 247
    109c:	25 bd       	out	0x25, r18	; 37
    109e:	25 b5       	in	r18, 0x25	; 37
    10a0:	2f 7e       	andi	r18, 0xEF	; 239
    10a2:	25 bd       	out	0x25, r18	; 37
    10a4:	25 b5       	in	r18, 0x25	; 37
    10a6:	2f 7d       	andi	r18, 0xDF	; 223
    10a8:	25 bd       	out	0x25, r18	; 37
    10aa:	84 81       	ldd	r24, Z+4	; 0x04
    10ac:	81 11       	cpse	r24, r1
    10ae:	11 c0       	rjmp	.+34     	; 0x10d2 <TIMER_init+0x114>
    10b0:	89 b7       	in	r24, 0x39	; 57
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	89 bf       	out	0x39, r24	; 57
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	08 95       	ret
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	08 95       	ret
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	08 95       	ret
    10c2:	83 e0       	ldi	r24, 0x03	; 3
    10c4:	08 95       	ret
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	08 95       	ret
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	08 95       	ret
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	08 95       	ret
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	08 95       	ret

000010d6 <TIMER_reset>:
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	11 f1       	breq	.+68     	; 0x111e <TIMER_reset+0x48>
    10da:	fc 01       	movw	r30, r24
    10dc:	20 81       	ld	r18, Z
    10de:	23 30       	cpi	r18, 0x03	; 3
    10e0:	00 f5       	brcc	.+64     	; 0x1122 <TIMER_reset+0x4c>
    10e2:	81 81       	ldd	r24, Z+1	; 0x01
    10e4:	8a 30       	cpi	r24, 0x0A	; 10
    10e6:	f8 f4       	brcc	.+62     	; 0x1126 <TIMER_reset+0x50>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
    10e8:	21 30       	cpi	r18, 0x01	; 1
    10ea:	51 f0       	breq	.+20     	; 0x1100 <TIMER_reset+0x2a>
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <TIMER_reset+0x1e>
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	81 f0       	breq	.+32     	; 0x1112 <TIMER_reset+0x3c>
    10f2:	1b c0       	rjmp	.+54     	; 0x112a <TIMER_reset+0x54>
		{
			case TIMER_0:
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
    10f4:	12 be       	out	0x32, r1	; 50
				CLEAR_REG(TCCR0);
    10f6:	13 be       	out	0x33, r1	; 51
				CLEAR_REG(OCR0);
    10f8:	1c be       	out	0x3c, r1	; 60
				CLEAR_REG(TIFR);
    10fa:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
				CLEAR_REG(TCCR0);
				CLEAR_REG(OCR0);
				CLEAR_REG(TIFR);
				break;
    10fe:	08 95       	ret
				
			case TIMER_1:
				/*Clear registers of Timer1 before processing any of them*/
				CLEAR_REG(TCNT1L);
    1100:	1c bc       	out	0x2c, r1	; 44
				CLEAR_REG(TCNT1H);
    1102:	1d bc       	out	0x2d, r1	; 45
				CLEAR_REG(TCCR1A);
    1104:	1f bc       	out	0x2f, r1	; 47
				CLEAR_REG(TCCR1B);
    1106:	1e bc       	out	0x2e, r1	; 46
				CLEAR_REG(OCR1AH);
    1108:	1b bc       	out	0x2b, r1	; 43
				CLEAR_REG(OCR1AL);
    110a:	1a bc       	out	0x2a, r1	; 42
				CLEAR_REG(TIFR);
    110c:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    110e:	80 e0       	ldi	r24, 0x00	; 0
				CLEAR_REG(TCCR1A);
				CLEAR_REG(TCCR1B);
				CLEAR_REG(OCR1AH);
				CLEAR_REG(OCR1AL);
				CLEAR_REG(TIFR);
				break;
    1110:	08 95       	ret
				
			case TIMER_2:
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
    1112:	14 bc       	out	0x24, r1	; 36
				CLEAR_REG(TCCR2);
    1114:	15 bc       	out	0x25, r1	; 37
				CLEAR_REG(OCR2);
    1116:	13 bc       	out	0x23, r1	; 35
				CLEAR_REG(TIFR);
    1118:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    111a:	80 e0       	ldi	r24, 0x00	; 0
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
				CLEAR_REG(TCCR2);
				CLEAR_REG(OCR2);
				CLEAR_REG(TIFR);
				break;
    111c:	08 95       	ret
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	08 95       	ret
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	08 95       	ret
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	08 95       	ret
				CLEAR_REG(OCR2);
				CLEAR_REG(TIFR);
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
    112a:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
    112c:	08 95       	ret

0000112e <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	d1 f0       	breq	.+52     	; 0x1166 <TIMER_setCallBack+0x38>
    1132:	63 30       	cpi	r22, 0x03	; 3
    1134:	d0 f4       	brcc	.+52     	; 0x116a <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
    1136:	61 30       	cpi	r22, 0x01	; 1
    1138:	51 f0       	breq	.+20     	; 0x114e <TIMER_setCallBack+0x20>
    113a:	18 f0       	brcs	.+6      	; 0x1142 <TIMER_setCallBack+0x14>
    113c:	62 30       	cpi	r22, 0x02	; 2
    113e:	69 f0       	breq	.+26     	; 0x115a <TIMER_setCallBack+0x2c>
    1140:	16 c0       	rjmp	.+44     	; 0x116e <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
    1142:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <sg_Timer0_callBackPtr+0x1>
    1146:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    114a:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
    114c:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
    114e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <sg_Timer1_callBackPtr+0x1>
    1152:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1156:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
    1158:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
    115a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <sg_Timer2_callBackPtr+0x1>
    115e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1162:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
    1164:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	08 95       	ret
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
    116e:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
    1170:	08 95       	ret

00001172 <__fixunssfsi>:
    1172:	0e 94 2d 09 	call	0x125a	; 0x125a <__fp_splitA>
    1176:	88 f0       	brcs	.+34     	; 0x119a <__fixunssfsi+0x28>
    1178:	9f 57       	subi	r25, 0x7F	; 127
    117a:	98 f0       	brcs	.+38     	; 0x11a2 <__fixunssfsi+0x30>
    117c:	b9 2f       	mov	r27, r25
    117e:	99 27       	eor	r25, r25
    1180:	b7 51       	subi	r27, 0x17	; 23
    1182:	b0 f0       	brcs	.+44     	; 0x11b0 <__fixunssfsi+0x3e>
    1184:	e1 f0       	breq	.+56     	; 0x11be <__fixunssfsi+0x4c>
    1186:	66 0f       	add	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	1a f0       	brmi	.+6      	; 0x1196 <__fixunssfsi+0x24>
    1190:	ba 95       	dec	r27
    1192:	c9 f7       	brne	.-14     	; 0x1186 <__fixunssfsi+0x14>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <__fixunssfsi+0x4c>
    1196:	b1 30       	cpi	r27, 0x01	; 1
    1198:	91 f0       	breq	.+36     	; 0x11be <__fixunssfsi+0x4c>
    119a:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_zero>
    119e:	b1 e0       	ldi	r27, 0x01	; 1
    11a0:	08 95       	ret
    11a2:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_zero>
    11a6:	67 2f       	mov	r22, r23
    11a8:	78 2f       	mov	r23, r24
    11aa:	88 27       	eor	r24, r24
    11ac:	b8 5f       	subi	r27, 0xF8	; 248
    11ae:	39 f0       	breq	.+14     	; 0x11be <__fixunssfsi+0x4c>
    11b0:	b9 3f       	cpi	r27, 0xF9	; 249
    11b2:	cc f3       	brlt	.-14     	; 0x11a6 <__fixunssfsi+0x34>
    11b4:	86 95       	lsr	r24
    11b6:	77 95       	ror	r23
    11b8:	67 95       	ror	r22
    11ba:	b3 95       	inc	r27
    11bc:	d9 f7       	brne	.-10     	; 0x11b4 <__fixunssfsi+0x42>
    11be:	3e f4       	brtc	.+14     	; 0x11ce <__fixunssfsi+0x5c>
    11c0:	90 95       	com	r25
    11c2:	80 95       	com	r24
    11c4:	70 95       	com	r23
    11c6:	61 95       	neg	r22
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	08 95       	ret

000011d0 <__floatunsisf>:
    11d0:	e8 94       	clt
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <__floatsisf+0x12>

000011d4 <__floatsisf>:
    11d4:	97 fb       	bst	r25, 7
    11d6:	3e f4       	brtc	.+14     	; 0x11e6 <__floatsisf+0x12>
    11d8:	90 95       	com	r25
    11da:	80 95       	com	r24
    11dc:	70 95       	com	r23
    11de:	61 95       	neg	r22
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	8f 4f       	sbci	r24, 0xFF	; 255
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	99 23       	and	r25, r25
    11e8:	a9 f0       	breq	.+42     	; 0x1214 <__floatsisf+0x40>
    11ea:	f9 2f       	mov	r31, r25
    11ec:	96 e9       	ldi	r25, 0x96	; 150
    11ee:	bb 27       	eor	r27, r27
    11f0:	93 95       	inc	r25
    11f2:	f6 95       	lsr	r31
    11f4:	87 95       	ror	r24
    11f6:	77 95       	ror	r23
    11f8:	67 95       	ror	r22
    11fa:	b7 95       	ror	r27
    11fc:	f1 11       	cpse	r31, r1
    11fe:	f8 cf       	rjmp	.-16     	; 0x11f0 <__floatsisf+0x1c>
    1200:	fa f4       	brpl	.+62     	; 0x1240 <__floatsisf+0x6c>
    1202:	bb 0f       	add	r27, r27
    1204:	11 f4       	brne	.+4      	; 0x120a <__floatsisf+0x36>
    1206:	60 ff       	sbrs	r22, 0
    1208:	1b c0       	rjmp	.+54     	; 0x1240 <__floatsisf+0x6c>
    120a:	6f 5f       	subi	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	8f 4f       	sbci	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <__floatsisf+0x6c>
    1214:	88 23       	and	r24, r24
    1216:	11 f0       	breq	.+4      	; 0x121c <__floatsisf+0x48>
    1218:	96 e9       	ldi	r25, 0x96	; 150
    121a:	11 c0       	rjmp	.+34     	; 0x123e <__floatsisf+0x6a>
    121c:	77 23       	and	r23, r23
    121e:	21 f0       	breq	.+8      	; 0x1228 <__floatsisf+0x54>
    1220:	9e e8       	ldi	r25, 0x8E	; 142
    1222:	87 2f       	mov	r24, r23
    1224:	76 2f       	mov	r23, r22
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <__floatsisf+0x5e>
    1228:	66 23       	and	r22, r22
    122a:	71 f0       	breq	.+28     	; 0x1248 <__floatsisf+0x74>
    122c:	96 e8       	ldi	r25, 0x86	; 134
    122e:	86 2f       	mov	r24, r22
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	2a f0       	brmi	.+10     	; 0x1240 <__floatsisf+0x6c>
    1236:	9a 95       	dec	r25
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	da f7       	brpl	.-10     	; 0x1236 <__floatsisf+0x62>
    1240:	88 0f       	add	r24, r24
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	97 f9       	bld	r25, 7
    1248:	08 95       	ret

0000124a <__fp_split3>:
    124a:	57 fd       	sbrc	r21, 7
    124c:	90 58       	subi	r25, 0x80	; 128
    124e:	44 0f       	add	r20, r20
    1250:	55 1f       	adc	r21, r21
    1252:	59 f0       	breq	.+22     	; 0x126a <__fp_splitA+0x10>
    1254:	5f 3f       	cpi	r21, 0xFF	; 255
    1256:	71 f0       	breq	.+28     	; 0x1274 <__fp_splitA+0x1a>
    1258:	47 95       	ror	r20

0000125a <__fp_splitA>:
    125a:	88 0f       	add	r24, r24
    125c:	97 fb       	bst	r25, 7
    125e:	99 1f       	adc	r25, r25
    1260:	61 f0       	breq	.+24     	; 0x127a <__fp_splitA+0x20>
    1262:	9f 3f       	cpi	r25, 0xFF	; 255
    1264:	79 f0       	breq	.+30     	; 0x1284 <__fp_splitA+0x2a>
    1266:	87 95       	ror	r24
    1268:	08 95       	ret
    126a:	12 16       	cp	r1, r18
    126c:	13 06       	cpc	r1, r19
    126e:	14 06       	cpc	r1, r20
    1270:	55 1f       	adc	r21, r21
    1272:	f2 cf       	rjmp	.-28     	; 0x1258 <__fp_split3+0xe>
    1274:	46 95       	lsr	r20
    1276:	f1 df       	rcall	.-30     	; 0x125a <__fp_splitA>
    1278:	08 c0       	rjmp	.+16     	; 0x128a <__fp_splitA+0x30>
    127a:	16 16       	cp	r1, r22
    127c:	17 06       	cpc	r1, r23
    127e:	18 06       	cpc	r1, r24
    1280:	99 1f       	adc	r25, r25
    1282:	f1 cf       	rjmp	.-30     	; 0x1266 <__fp_splitA+0xc>
    1284:	86 95       	lsr	r24
    1286:	71 05       	cpc	r23, r1
    1288:	61 05       	cpc	r22, r1
    128a:	08 94       	sec
    128c:	08 95       	ret

0000128e <__fp_zero>:
    128e:	e8 94       	clt

00001290 <__fp_szero>:
    1290:	bb 27       	eor	r27, r27
    1292:	66 27       	eor	r22, r22
    1294:	77 27       	eor	r23, r23
    1296:	cb 01       	movw	r24, r22
    1298:	97 f9       	bld	r25, 7
    129a:	08 95       	ret

0000129c <__gesf2>:
    129c:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_cmp>
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <__gesf2+0x8>
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	08 95       	ret

000012a6 <__mulsf3>:
    12a6:	0e 94 66 09 	call	0x12cc	; 0x12cc <__mulsf3x>
    12aa:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_round>
    12ae:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_pscA>
    12b2:	38 f0       	brcs	.+14     	; 0x12c2 <__mulsf3+0x1c>
    12b4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscB>
    12b8:	20 f0       	brcs	.+8      	; 0x12c2 <__mulsf3+0x1c>
    12ba:	95 23       	and	r25, r21
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <__mulsf3+0x1c>
    12be:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_inf>
    12c2:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_nan>
    12c6:	11 24       	eor	r1, r1
    12c8:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__fp_szero>

000012cc <__mulsf3x>:
    12cc:	0e 94 25 09 	call	0x124a	; 0x124a <__fp_split3>
    12d0:	70 f3       	brcs	.-36     	; 0x12ae <__mulsf3+0x8>

000012d2 <__mulsf3_pse>:
    12d2:	95 9f       	mul	r25, r21
    12d4:	c1 f3       	breq	.-16     	; 0x12c6 <__mulsf3+0x20>
    12d6:	95 0f       	add	r25, r21
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	55 1f       	adc	r21, r21
    12dc:	62 9f       	mul	r22, r18
    12de:	f0 01       	movw	r30, r0
    12e0:	72 9f       	mul	r23, r18
    12e2:	bb 27       	eor	r27, r27
    12e4:	f0 0d       	add	r31, r0
    12e6:	b1 1d       	adc	r27, r1
    12e8:	63 9f       	mul	r22, r19
    12ea:	aa 27       	eor	r26, r26
    12ec:	f0 0d       	add	r31, r0
    12ee:	b1 1d       	adc	r27, r1
    12f0:	aa 1f       	adc	r26, r26
    12f2:	64 9f       	mul	r22, r20
    12f4:	66 27       	eor	r22, r22
    12f6:	b0 0d       	add	r27, r0
    12f8:	a1 1d       	adc	r26, r1
    12fa:	66 1f       	adc	r22, r22
    12fc:	82 9f       	mul	r24, r18
    12fe:	22 27       	eor	r18, r18
    1300:	b0 0d       	add	r27, r0
    1302:	a1 1d       	adc	r26, r1
    1304:	62 1f       	adc	r22, r18
    1306:	73 9f       	mul	r23, r19
    1308:	b0 0d       	add	r27, r0
    130a:	a1 1d       	adc	r26, r1
    130c:	62 1f       	adc	r22, r18
    130e:	83 9f       	mul	r24, r19
    1310:	a0 0d       	add	r26, r0
    1312:	61 1d       	adc	r22, r1
    1314:	22 1f       	adc	r18, r18
    1316:	74 9f       	mul	r23, r20
    1318:	33 27       	eor	r19, r19
    131a:	a0 0d       	add	r26, r0
    131c:	61 1d       	adc	r22, r1
    131e:	23 1f       	adc	r18, r19
    1320:	84 9f       	mul	r24, r20
    1322:	60 0d       	add	r22, r0
    1324:	21 1d       	adc	r18, r1
    1326:	82 2f       	mov	r24, r18
    1328:	76 2f       	mov	r23, r22
    132a:	6a 2f       	mov	r22, r26
    132c:	11 24       	eor	r1, r1
    132e:	9f 57       	subi	r25, 0x7F	; 127
    1330:	50 40       	sbci	r21, 0x00	; 0
    1332:	9a f0       	brmi	.+38     	; 0x135a <__mulsf3_pse+0x88>
    1334:	f1 f0       	breq	.+60     	; 0x1372 <__mulsf3_pse+0xa0>
    1336:	88 23       	and	r24, r24
    1338:	4a f0       	brmi	.+18     	; 0x134c <__mulsf3_pse+0x7a>
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	bb 1f       	adc	r27, r27
    1340:	66 1f       	adc	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	91 50       	subi	r25, 0x01	; 1
    1348:	50 40       	sbci	r21, 0x00	; 0
    134a:	a9 f7       	brne	.-22     	; 0x1336 <__mulsf3_pse+0x64>
    134c:	9e 3f       	cpi	r25, 0xFE	; 254
    134e:	51 05       	cpc	r21, r1
    1350:	80 f0       	brcs	.+32     	; 0x1372 <__mulsf3_pse+0xa0>
    1352:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_inf>
    1356:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__fp_szero>
    135a:	5f 3f       	cpi	r21, 0xFF	; 255
    135c:	e4 f3       	brlt	.-8      	; 0x1356 <__mulsf3_pse+0x84>
    135e:	98 3e       	cpi	r25, 0xE8	; 232
    1360:	d4 f3       	brlt	.-12     	; 0x1356 <__mulsf3_pse+0x84>
    1362:	86 95       	lsr	r24
    1364:	77 95       	ror	r23
    1366:	67 95       	ror	r22
    1368:	b7 95       	ror	r27
    136a:	f7 95       	ror	r31
    136c:	e7 95       	ror	r30
    136e:	9f 5f       	subi	r25, 0xFF	; 255
    1370:	c1 f7       	brne	.-16     	; 0x1362 <__mulsf3_pse+0x90>
    1372:	fe 2b       	or	r31, r30
    1374:	88 0f       	add	r24, r24
    1376:	91 1d       	adc	r25, r1
    1378:	96 95       	lsr	r25
    137a:	87 95       	ror	r24
    137c:	97 f9       	bld	r25, 7
    137e:	08 95       	ret

00001380 <__fp_cmp>:
    1380:	99 0f       	add	r25, r25
    1382:	00 08       	sbc	r0, r0
    1384:	55 0f       	add	r21, r21
    1386:	aa 0b       	sbc	r26, r26
    1388:	e0 e8       	ldi	r30, 0x80	; 128
    138a:	fe ef       	ldi	r31, 0xFE	; 254
    138c:	16 16       	cp	r1, r22
    138e:	17 06       	cpc	r1, r23
    1390:	e8 07       	cpc	r30, r24
    1392:	f9 07       	cpc	r31, r25
    1394:	c0 f0       	brcs	.+48     	; 0x13c6 <__fp_cmp+0x46>
    1396:	12 16       	cp	r1, r18
    1398:	13 06       	cpc	r1, r19
    139a:	e4 07       	cpc	r30, r20
    139c:	f5 07       	cpc	r31, r21
    139e:	98 f0       	brcs	.+38     	; 0x13c6 <__fp_cmp+0x46>
    13a0:	62 1b       	sub	r22, r18
    13a2:	73 0b       	sbc	r23, r19
    13a4:	84 0b       	sbc	r24, r20
    13a6:	95 0b       	sbc	r25, r21
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <__fp_cmp+0x38>
    13aa:	0a 26       	eor	r0, r26
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <__fp_cmp+0x46>
    13ae:	23 2b       	or	r18, r19
    13b0:	24 2b       	or	r18, r20
    13b2:	25 2b       	or	r18, r21
    13b4:	21 f4       	brne	.+8      	; 0x13be <__fp_cmp+0x3e>
    13b6:	08 95       	ret
    13b8:	0a 26       	eor	r0, r26
    13ba:	09 f4       	brne	.+2      	; 0x13be <__fp_cmp+0x3e>
    13bc:	a1 40       	sbci	r26, 0x01	; 1
    13be:	a6 95       	lsr	r26
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	81 1d       	adc	r24, r1
    13c4:	81 1d       	adc	r24, r1
    13c6:	08 95       	ret

000013c8 <__fp_inf>:
    13c8:	97 f9       	bld	r25, 7
    13ca:	9f 67       	ori	r25, 0x7F	; 127
    13cc:	80 e8       	ldi	r24, 0x80	; 128
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	08 95       	ret

000013d4 <__fp_nan>:
    13d4:	9f ef       	ldi	r25, 0xFF	; 255
    13d6:	80 ec       	ldi	r24, 0xC0	; 192
    13d8:	08 95       	ret

000013da <__fp_pscA>:
    13da:	00 24       	eor	r0, r0
    13dc:	0a 94       	dec	r0
    13de:	16 16       	cp	r1, r22
    13e0:	17 06       	cpc	r1, r23
    13e2:	18 06       	cpc	r1, r24
    13e4:	09 06       	cpc	r0, r25
    13e6:	08 95       	ret

000013e8 <__fp_pscB>:
    13e8:	00 24       	eor	r0, r0
    13ea:	0a 94       	dec	r0
    13ec:	12 16       	cp	r1, r18
    13ee:	13 06       	cpc	r1, r19
    13f0:	14 06       	cpc	r1, r20
    13f2:	05 06       	cpc	r0, r21
    13f4:	08 95       	ret

000013f6 <__fp_round>:
    13f6:	09 2e       	mov	r0, r25
    13f8:	03 94       	inc	r0
    13fa:	00 0c       	add	r0, r0
    13fc:	11 f4       	brne	.+4      	; 0x1402 <__fp_round+0xc>
    13fe:	88 23       	and	r24, r24
    1400:	52 f0       	brmi	.+20     	; 0x1416 <__fp_round+0x20>
    1402:	bb 0f       	add	r27, r27
    1404:	40 f4       	brcc	.+16     	; 0x1416 <__fp_round+0x20>
    1406:	bf 2b       	or	r27, r31
    1408:	11 f4       	brne	.+4      	; 0x140e <__fp_round+0x18>
    140a:	60 ff       	sbrs	r22, 0
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <__fp_round+0x20>
    140e:	6f 5f       	subi	r22, 0xFF	; 255
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	8f 4f       	sbci	r24, 0xFF	; 255
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	08 95       	ret

00001418 <__itoa_ncheck>:
    1418:	bb 27       	eor	r27, r27
    141a:	4a 30       	cpi	r20, 0x0A	; 10
    141c:	31 f4       	brne	.+12     	; 0x142a <__itoa_ncheck+0x12>
    141e:	99 23       	and	r25, r25
    1420:	22 f4       	brpl	.+8      	; 0x142a <__itoa_ncheck+0x12>
    1422:	bd e2       	ldi	r27, 0x2D	; 45
    1424:	90 95       	com	r25
    1426:	81 95       	neg	r24
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__utoa_common>

0000142e <__utoa_ncheck>:
    142e:	bb 27       	eor	r27, r27

00001430 <__utoa_common>:
    1430:	fb 01       	movw	r30, r22
    1432:	55 27       	eor	r21, r21
    1434:	aa 27       	eor	r26, r26
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	aa 1f       	adc	r26, r26
    143c:	a4 17       	cp	r26, r20
    143e:	10 f0       	brcs	.+4      	; 0x1444 <__utoa_common+0x14>
    1440:	a4 1b       	sub	r26, r20
    1442:	83 95       	inc	r24
    1444:	50 51       	subi	r21, 0x10	; 16
    1446:	b9 f7       	brne	.-18     	; 0x1436 <__utoa_common+0x6>
    1448:	a0 5d       	subi	r26, 0xD0	; 208
    144a:	aa 33       	cpi	r26, 0x3A	; 58
    144c:	08 f0       	brcs	.+2      	; 0x1450 <__utoa_common+0x20>
    144e:	a9 5d       	subi	r26, 0xD9	; 217
    1450:	a1 93       	st	Z+, r26
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	79 f7       	brne	.-34     	; 0x1434 <__utoa_common+0x4>
    1456:	b1 11       	cpse	r27, r1
    1458:	b1 93       	st	Z+, r27
    145a:	11 92       	st	Z+, r1
    145c:	cb 01       	movw	r24, r22
    145e:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <strrev>

00001462 <strrev>:
    1462:	dc 01       	movw	r26, r24
    1464:	fc 01       	movw	r30, r24
    1466:	67 2f       	mov	r22, r23
    1468:	71 91       	ld	r23, Z+
    146a:	77 23       	and	r23, r23
    146c:	e1 f7       	brne	.-8      	; 0x1466 <strrev+0x4>
    146e:	32 97       	sbiw	r30, 0x02	; 2
    1470:	04 c0       	rjmp	.+8      	; 0x147a <strrev+0x18>
    1472:	7c 91       	ld	r23, X
    1474:	6d 93       	st	X+, r22
    1476:	70 83       	st	Z, r23
    1478:	62 91       	ld	r22, -Z
    147a:	ae 17       	cp	r26, r30
    147c:	bf 07       	cpc	r27, r31
    147e:	c8 f3       	brcs	.-14     	; 0x1472 <strrev+0x10>
    1480:	08 95       	ret

00001482 <_exit>:
    1482:	f8 94       	cli

00001484 <__stop_program>:
    1484:	ff cf       	rjmp	.-2      	; 0x1484 <__stop_program>
