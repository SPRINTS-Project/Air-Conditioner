
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000005f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a83  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000742  00000000  00000000  00001157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000617  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000517  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/adc/adc.h"
st_adcConfigType adc_config;
double data;
int main(void)
{
	adc_config.u8_prescaler_selection = ADC_PRESCALER_16;
  92:	e8 e6       	ldi	r30, 0x68	; 104
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	81 83       	std	Z+1, r24	; 0x01
	adc_config.u8_ref_selection = ADC_AVCC;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 83       	st	Z, r24
	ADC_init (&adc_config);
  9e:	cf 01       	movw	r24, r30
  a0:	0e 94 86 00 	call	0x10c	; 0x10c <ADC_init>
	
	while(1){
	ADC_read (ADC_CHANNEL_0,&data);	
  a4:	64 e6       	ldi	r22, 0x64	; 100
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 b5 00 	call	0x16a	; 0x16a <ADC_read>
	for(uint64_t i=0; i<1000;i++);
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	f1 2c       	mov	r15, r1
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	13 c0       	rjmp	.+38     	; 0xe6 <main+0x54>
  c0:	2d 2f       	mov	r18, r29
  c2:	3c 2f       	mov	r19, r28
  c4:	4b 2f       	mov	r20, r27
  c6:	5a 2f       	mov	r21, r26
  c8:	6f 2f       	mov	r22, r31
  ca:	7f 2d       	mov	r23, r15
  cc:	80 2f       	mov	r24, r16
  ce:	91 2f       	mov	r25, r17
  d0:	a1 e0       	ldi	r26, 0x01	; 1
  d2:	0e 94 b0 02 	call	0x560	; 0x560 <__adddi3_s8>
  d6:	d2 2f       	mov	r29, r18
  d8:	c3 2f       	mov	r28, r19
  da:	b4 2f       	mov	r27, r20
  dc:	a5 2f       	mov	r26, r21
  de:	f6 2f       	mov	r31, r22
  e0:	f7 2e       	mov	r15, r23
  e2:	08 2f       	mov	r16, r24
  e4:	19 2f       	mov	r17, r25
  e6:	2d 2f       	mov	r18, r29
  e8:	3c 2f       	mov	r19, r28
  ea:	4b 2f       	mov	r20, r27
  ec:	5a 2f       	mov	r21, r26
  ee:	6f 2f       	mov	r22, r31
  f0:	7f 2d       	mov	r23, r15
  f2:	80 2f       	mov	r24, r16
  f4:	91 2f       	mov	r25, r17
  f6:	27 3e       	cpi	r18, 0xE7	; 231
  f8:	33 40       	sbci	r19, 0x03	; 3
  fa:	41 05       	cpc	r20, r1
  fc:	51 05       	cpc	r21, r1
  fe:	61 05       	cpc	r22, r1
 100:	71 05       	cpc	r23, r1
 102:	81 05       	cpc	r24, r1
 104:	91 05       	cpc	r25, r1
 106:	e1 f2       	breq	.-72     	; 0xc0 <main+0x2e>
 108:	d8 f2       	brcs	.-74     	; 0xc0 <main+0x2e>
 10a:	cc cf       	rjmp	.-104    	; 0xa4 <main+0x12>

0000010c <ADC_init>:

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(st_config == NULL){
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	59 f1       	breq	.+86     	; 0x166 <ADC_init+0x5a>
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
 110:	fc 01       	movw	r30, r24
 112:	21 81       	ldd	r18, Z+1	; 0x01
 114:	20 68       	ori	r18, 0x80	; 128
 116:	26 b9       	out	0x06, r18	; 6
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
 118:	80 81       	ld	r24, Z
 11a:	82 95       	swap	r24
 11c:	88 0f       	add	r24, r24
 11e:	88 0f       	add	r24, r24
 120:	80 7c       	andi	r24, 0xC0	; 192
 122:	87 b9       	out	0x07, r24	; 7
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
		uint16_t result = 2;
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	70 e0       	ldi	r23, 0x00	; 0
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 12c:	03 c0       	rjmp	.+6      	; 0x134 <ADC_init+0x28>
			result *= 2;
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	8a 30       	cpi	r24, 0x0A	; 10
 136:	91 05       	cpc	r25, r1
 138:	d4 f3       	brlt	.-12     	; 0x12e <ADC_init+0x22>
			result *= 2;
			
		}
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 b5 01 	call	0x36a	; 0x36a <__floatunsisf>
 142:	9b 01       	movw	r18, r22
 144:	ac 01       	movw	r20, r24
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 ea       	ldi	r24, 0xA0	; 160
 14c:	90 e4       	ldi	r25, 0x40	; 64
 14e:	0e 94 43 01 	call	0x286	; 0x286 <__divsf3>
 152:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 15e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
#include "adc.h"

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
	if(st_config == NULL){
		ret = ADC_E_NOT_OK;
 166:	84 e0       	ldi	r24, 0x04	; 4
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
		
	}
	return ret;
	
}
 168:	08 95       	ret

0000016a <ADC_read>:
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, double * u16_data)
{
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
 170:	88 30       	cpi	r24, 0x08	; 8
 172:	08 f0       	brcs	.+2      	; 0x176 <ADC_read+0xc>
 174:	47 c0       	rjmp	.+142    	; 0x204 <ADC_read+0x9a>
 176:	61 15       	cp	r22, r1
 178:	71 05       	cpc	r23, r1
 17a:	09 f4       	brne	.+2      	; 0x17e <ADC_read+0x14>
 17c:	45 c0       	rjmp	.+138    	; 0x208 <ADC_read+0x9e>
 17e:	8b 01       	movw	r16, r22
 180:	c8 2f       	mov	r28, r24
		ret =	ADC_E_NOT_OK;
	}
	else{
		if(((DDRD & (1U<<u8_channelID))>>u8_channelID) != 0){
 182:	41 b3       	in	r20, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9c 01       	movw	r18, r24
 18a:	0c 2e       	mov	r0, r28
 18c:	02 c0       	rjmp	.+4      	; 0x192 <ADC_read+0x28>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <ADC_read+0x24>
 196:	84 2f       	mov	r24, r20
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	82 23       	and	r24, r18
 19c:	93 23       	and	r25, r19
 19e:	0c 2e       	mov	r0, r28
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <ADC_read+0x3c>
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <ADC_read+0x38>
 1aa:	89 2b       	or	r24, r25
 1ac:	29 f0       	breq	.+10     	; 0x1b8 <ADC_read+0x4e>
			DIO_init (porta, u8_channelID, STD_INPUT);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	6c 2f       	mov	r22, r28
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
		}
		
		while(READ_BIT(ADCSRA_ADD, ADC_START_CONVERSION) == 1);
 1b8:	36 99       	sbic	0x06, 6	; 6
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <ADC_read+0x4e>
		
		ADMUX_ADD  = (0xE0 & ADMUX_ADD) | u8_channelID;
 1bc:	87 b1       	in	r24, 0x07	; 7
 1be:	80 7e       	andi	r24, 0xE0	; 224
 1c0:	8c 2b       	or	r24, r28
 1c2:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADCSRA_ADD, ADC_START_CONVERSION);
 1c4:	86 b1       	in	r24, 0x06	; 6
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	86 b9       	out	0x06, r24	; 6
		while(READ_BIT(ADCSRA_ADD, ADC_INT_FLAG) == 0);
 1ca:	34 9b       	sbis	0x06, 4	; 6
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <ADC_read+0x60>
		uint16_t	adc_data_temp=0;	
		adc_data_temp = ADCL_ADD;
 1ce:	84 b1       	in	r24, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
 1d0:	65 b1       	in	r22, 0x05	; 5
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	76 2f       	mov	r23, r22
 1d6:	66 27       	eor	r22, r22
 1d8:	68 2b       	or	r22, r24
		*u16_data  = (Quantisation_step*adc_data_temp);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 b5 01 	call	0x36a	; 0x36a <__floatunsisf>
 1e2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ee:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1f2:	0e 94 43 02 	call	0x486	; 0x486 <__mulsf3>
 1f6:	f8 01       	movw	r30, r16
 1f8:	60 83       	st	Z, r22
 1fa:	71 83       	std	Z+1, r23	; 0x01
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	93 83       	std	Z+3, r25	; 0x03
	return ret;
	
}
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, double * u16_data)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	03 c0       	rjmp	.+6      	; 0x20a <ADC_read+0xa0>
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
		ret =	ADC_E_NOT_OK;
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	01 c0       	rjmp	.+2      	; 0x20a <ADC_read+0xa0>
 208:	84 e0       	ldi	r24, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
		*u16_data  = (Quantisation_step*adc_data_temp);
	}
	
	return ret;
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 212:	68 30       	cpi	r22, 0x08	; 8
 214:	a0 f5       	brcc	.+104    	; 0x27e <DIO_init+0x6c>
	{
		if (port == porta)
 216:	81 11       	cpse	r24, r1
 218:	0b c0       	rjmp	.+22     	; 0x230 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 21a:	8a b3       	in	r24, 0x1a	; 26
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_init+0x12>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_init+0xe>
 228:	48 2b       	or	r20, r24
 22a:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret
		}
		else if (port == portb)
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	59 f4       	brne	.+22     	; 0x24a <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 234:	87 b3       	in	r24, 0x17	; 23
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_init+0x2c>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_init+0x28>
 242:	48 2b       	or	r20, r24
 244:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
		}
		else if (port == portc)
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	59 f4       	brne	.+22     	; 0x264 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 24e:	84 b3       	in	r24, 0x14	; 20
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_init+0x46>
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_init+0x42>
 25c:	48 2b       	or	r20, r24
 25e:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
		}
		else if (port == portd)
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 268:	81 b3       	in	r24, 0x11	; 17
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_init+0x60>
 26e:	44 0f       	add	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_init+0x5c>
 276:	48 2b       	or	r20, r24
 278:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 282:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 284:	08 95       	ret

00000286 <__divsf3>:
 286:	0e 94 57 01 	call	0x2ae	; 0x2ae <__divsf3x>
 28a:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_round>
 28e:	0e 94 02 02 	call	0x404	; 0x404 <__fp_pscB>
 292:	58 f0       	brcs	.+22     	; 0x2aa <__divsf3+0x24>
 294:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_pscA>
 298:	40 f0       	brcs	.+16     	; 0x2aa <__divsf3+0x24>
 29a:	29 f4       	brne	.+10     	; 0x2a6 <__divsf3+0x20>
 29c:	5f 3f       	cpi	r21, 0xFF	; 255
 29e:	29 f0       	breq	.+10     	; 0x2aa <__divsf3+0x24>
 2a0:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 2a4:	51 11       	cpse	r21, r1
 2a6:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>
 2aa:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__fp_nan>

000002ae <__divsf3x>:
 2ae:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_split3>
 2b2:	68 f3       	brcs	.-38     	; 0x28e <__divsf3+0x8>

000002b4 <__divsf3_pse>:
 2b4:	99 23       	and	r25, r25
 2b6:	b1 f3       	breq	.-20     	; 0x2a4 <__divsf3+0x1e>
 2b8:	55 23       	and	r21, r21
 2ba:	91 f3       	breq	.-28     	; 0x2a0 <__divsf3+0x1a>
 2bc:	95 1b       	sub	r25, r21
 2be:	55 0b       	sbc	r21, r21
 2c0:	bb 27       	eor	r27, r27
 2c2:	aa 27       	eor	r26, r26
 2c4:	62 17       	cp	r22, r18
 2c6:	73 07       	cpc	r23, r19
 2c8:	84 07       	cpc	r24, r20
 2ca:	38 f0       	brcs	.+14     	; 0x2da <__divsf3_pse+0x26>
 2cc:	9f 5f       	subi	r25, 0xFF	; 255
 2ce:	5f 4f       	sbci	r21, 0xFF	; 255
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	44 1f       	adc	r20, r20
 2d6:	aa 1f       	adc	r26, r26
 2d8:	a9 f3       	breq	.-22     	; 0x2c4 <__divsf3_pse+0x10>
 2da:	35 d0       	rcall	.+106    	; 0x346 <__divsf3_pse+0x92>
 2dc:	0e 2e       	mov	r0, r30
 2de:	3a f0       	brmi	.+14     	; 0x2ee <__divsf3_pse+0x3a>
 2e0:	e0 e8       	ldi	r30, 0x80	; 128
 2e2:	32 d0       	rcall	.+100    	; 0x348 <__divsf3_pse+0x94>
 2e4:	91 50       	subi	r25, 0x01	; 1
 2e6:	50 40       	sbci	r21, 0x00	; 0
 2e8:	e6 95       	lsr	r30
 2ea:	00 1c       	adc	r0, r0
 2ec:	ca f7       	brpl	.-14     	; 0x2e0 <__divsf3_pse+0x2c>
 2ee:	2b d0       	rcall	.+86     	; 0x346 <__divsf3_pse+0x92>
 2f0:	fe 2f       	mov	r31, r30
 2f2:	29 d0       	rcall	.+82     	; 0x346 <__divsf3_pse+0x92>
 2f4:	66 0f       	add	r22, r22
 2f6:	77 1f       	adc	r23, r23
 2f8:	88 1f       	adc	r24, r24
 2fa:	bb 1f       	adc	r27, r27
 2fc:	26 17       	cp	r18, r22
 2fe:	37 07       	cpc	r19, r23
 300:	48 07       	cpc	r20, r24
 302:	ab 07       	cpc	r26, r27
 304:	b0 e8       	ldi	r27, 0x80	; 128
 306:	09 f0       	breq	.+2      	; 0x30a <__divsf3_pse+0x56>
 308:	bb 0b       	sbc	r27, r27
 30a:	80 2d       	mov	r24, r0
 30c:	bf 01       	movw	r22, r30
 30e:	ff 27       	eor	r31, r31
 310:	93 58       	subi	r25, 0x83	; 131
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	3a f0       	brmi	.+14     	; 0x324 <__divsf3_pse+0x70>
 316:	9e 3f       	cpi	r25, 0xFE	; 254
 318:	51 05       	cpc	r21, r1
 31a:	78 f0       	brcs	.+30     	; 0x33a <__divsf3_pse+0x86>
 31c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 320:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>
 324:	5f 3f       	cpi	r21, 0xFF	; 255
 326:	e4 f3       	brlt	.-8      	; 0x320 <__divsf3_pse+0x6c>
 328:	98 3e       	cpi	r25, 0xE8	; 232
 32a:	d4 f3       	brlt	.-12     	; 0x320 <__divsf3_pse+0x6c>
 32c:	86 95       	lsr	r24
 32e:	77 95       	ror	r23
 330:	67 95       	ror	r22
 332:	b7 95       	ror	r27
 334:	f7 95       	ror	r31
 336:	9f 5f       	subi	r25, 0xFF	; 255
 338:	c9 f7       	brne	.-14     	; 0x32c <__divsf3_pse+0x78>
 33a:	88 0f       	add	r24, r24
 33c:	91 1d       	adc	r25, r1
 33e:	96 95       	lsr	r25
 340:	87 95       	ror	r24
 342:	97 f9       	bld	r25, 7
 344:	08 95       	ret
 346:	e1 e0       	ldi	r30, 0x01	; 1
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	88 1f       	adc	r24, r24
 34e:	bb 1f       	adc	r27, r27
 350:	62 17       	cp	r22, r18
 352:	73 07       	cpc	r23, r19
 354:	84 07       	cpc	r24, r20
 356:	ba 07       	cpc	r27, r26
 358:	20 f0       	brcs	.+8      	; 0x362 <__divsf3_pse+0xae>
 35a:	62 1b       	sub	r22, r18
 35c:	73 0b       	sbc	r23, r19
 35e:	84 0b       	sbc	r24, r20
 360:	ba 0b       	sbc	r27, r26
 362:	ee 1f       	adc	r30, r30
 364:	88 f7       	brcc	.-30     	; 0x348 <__divsf3_pse+0x94>
 366:	e0 95       	com	r30
 368:	08 95       	ret

0000036a <__floatunsisf>:
 36a:	e8 94       	clt
 36c:	09 c0       	rjmp	.+18     	; 0x380 <__floatsisf+0x12>

0000036e <__floatsisf>:
 36e:	97 fb       	bst	r25, 7
 370:	3e f4       	brtc	.+14     	; 0x380 <__floatsisf+0x12>
 372:	90 95       	com	r25
 374:	80 95       	com	r24
 376:	70 95       	com	r23
 378:	61 95       	neg	r22
 37a:	7f 4f       	sbci	r23, 0xFF	; 255
 37c:	8f 4f       	sbci	r24, 0xFF	; 255
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	99 23       	and	r25, r25
 382:	a9 f0       	breq	.+42     	; 0x3ae <__floatsisf+0x40>
 384:	f9 2f       	mov	r31, r25
 386:	96 e9       	ldi	r25, 0x96	; 150
 388:	bb 27       	eor	r27, r27
 38a:	93 95       	inc	r25
 38c:	f6 95       	lsr	r31
 38e:	87 95       	ror	r24
 390:	77 95       	ror	r23
 392:	67 95       	ror	r22
 394:	b7 95       	ror	r27
 396:	f1 11       	cpse	r31, r1
 398:	f8 cf       	rjmp	.-16     	; 0x38a <__floatsisf+0x1c>
 39a:	fa f4       	brpl	.+62     	; 0x3da <__floatsisf+0x6c>
 39c:	bb 0f       	add	r27, r27
 39e:	11 f4       	brne	.+4      	; 0x3a4 <__floatsisf+0x36>
 3a0:	60 ff       	sbrs	r22, 0
 3a2:	1b c0       	rjmp	.+54     	; 0x3da <__floatsisf+0x6c>
 3a4:	6f 5f       	subi	r22, 0xFF	; 255
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	16 c0       	rjmp	.+44     	; 0x3da <__floatsisf+0x6c>
 3ae:	88 23       	and	r24, r24
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <__floatsisf+0x48>
 3b2:	96 e9       	ldi	r25, 0x96	; 150
 3b4:	11 c0       	rjmp	.+34     	; 0x3d8 <__floatsisf+0x6a>
 3b6:	77 23       	and	r23, r23
 3b8:	21 f0       	breq	.+8      	; 0x3c2 <__floatsisf+0x54>
 3ba:	9e e8       	ldi	r25, 0x8E	; 142
 3bc:	87 2f       	mov	r24, r23
 3be:	76 2f       	mov	r23, r22
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <__floatsisf+0x5e>
 3c2:	66 23       	and	r22, r22
 3c4:	71 f0       	breq	.+28     	; 0x3e2 <__floatsisf+0x74>
 3c6:	96 e8       	ldi	r25, 0x86	; 134
 3c8:	86 2f       	mov	r24, r22
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	2a f0       	brmi	.+10     	; 0x3da <__floatsisf+0x6c>
 3d0:	9a 95       	dec	r25
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	da f7       	brpl	.-10     	; 0x3d0 <__floatsisf+0x62>
 3da:	88 0f       	add	r24, r24
 3dc:	96 95       	lsr	r25
 3de:	87 95       	ror	r24
 3e0:	97 f9       	bld	r25, 7
 3e2:	08 95       	ret

000003e4 <__fp_inf>:
 3e4:	97 f9       	bld	r25, 7
 3e6:	9f 67       	ori	r25, 0x7F	; 127
 3e8:	80 e8       	ldi	r24, 0x80	; 128
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	08 95       	ret

000003f0 <__fp_nan>:
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	80 ec       	ldi	r24, 0xC0	; 192
 3f4:	08 95       	ret

000003f6 <__fp_pscA>:
 3f6:	00 24       	eor	r0, r0
 3f8:	0a 94       	dec	r0
 3fa:	16 16       	cp	r1, r22
 3fc:	17 06       	cpc	r1, r23
 3fe:	18 06       	cpc	r1, r24
 400:	09 06       	cpc	r0, r25
 402:	08 95       	ret

00000404 <__fp_pscB>:
 404:	00 24       	eor	r0, r0
 406:	0a 94       	dec	r0
 408:	12 16       	cp	r1, r18
 40a:	13 06       	cpc	r1, r19
 40c:	14 06       	cpc	r1, r20
 40e:	05 06       	cpc	r0, r21
 410:	08 95       	ret

00000412 <__fp_round>:
 412:	09 2e       	mov	r0, r25
 414:	03 94       	inc	r0
 416:	00 0c       	add	r0, r0
 418:	11 f4       	brne	.+4      	; 0x41e <__fp_round+0xc>
 41a:	88 23       	and	r24, r24
 41c:	52 f0       	brmi	.+20     	; 0x432 <__fp_round+0x20>
 41e:	bb 0f       	add	r27, r27
 420:	40 f4       	brcc	.+16     	; 0x432 <__fp_round+0x20>
 422:	bf 2b       	or	r27, r31
 424:	11 f4       	brne	.+4      	; 0x42a <__fp_round+0x18>
 426:	60 ff       	sbrs	r22, 0
 428:	04 c0       	rjmp	.+8      	; 0x432 <__fp_round+0x20>
 42a:	6f 5f       	subi	r22, 0xFF	; 255
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	8f 4f       	sbci	r24, 0xFF	; 255
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	08 95       	ret

00000434 <__fp_split3>:
 434:	57 fd       	sbrc	r21, 7
 436:	90 58       	subi	r25, 0x80	; 128
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	59 f0       	breq	.+22     	; 0x454 <__fp_splitA+0x10>
 43e:	5f 3f       	cpi	r21, 0xFF	; 255
 440:	71 f0       	breq	.+28     	; 0x45e <__fp_splitA+0x1a>
 442:	47 95       	ror	r20

00000444 <__fp_splitA>:
 444:	88 0f       	add	r24, r24
 446:	97 fb       	bst	r25, 7
 448:	99 1f       	adc	r25, r25
 44a:	61 f0       	breq	.+24     	; 0x464 <__fp_splitA+0x20>
 44c:	9f 3f       	cpi	r25, 0xFF	; 255
 44e:	79 f0       	breq	.+30     	; 0x46e <__fp_splitA+0x2a>
 450:	87 95       	ror	r24
 452:	08 95       	ret
 454:	12 16       	cp	r1, r18
 456:	13 06       	cpc	r1, r19
 458:	14 06       	cpc	r1, r20
 45a:	55 1f       	adc	r21, r21
 45c:	f2 cf       	rjmp	.-28     	; 0x442 <__fp_split3+0xe>
 45e:	46 95       	lsr	r20
 460:	f1 df       	rcall	.-30     	; 0x444 <__fp_splitA>
 462:	08 c0       	rjmp	.+16     	; 0x474 <__fp_splitA+0x30>
 464:	16 16       	cp	r1, r22
 466:	17 06       	cpc	r1, r23
 468:	18 06       	cpc	r1, r24
 46a:	99 1f       	adc	r25, r25
 46c:	f1 cf       	rjmp	.-30     	; 0x450 <__fp_splitA+0xc>
 46e:	86 95       	lsr	r24
 470:	71 05       	cpc	r23, r1
 472:	61 05       	cpc	r22, r1
 474:	08 94       	sec
 476:	08 95       	ret

00000478 <__fp_zero>:
 478:	e8 94       	clt

0000047a <__fp_szero>:
 47a:	bb 27       	eor	r27, r27
 47c:	66 27       	eor	r22, r22
 47e:	77 27       	eor	r23, r23
 480:	cb 01       	movw	r24, r22
 482:	97 f9       	bld	r25, 7
 484:	08 95       	ret

00000486 <__mulsf3>:
 486:	0e 94 56 02 	call	0x4ac	; 0x4ac <__mulsf3x>
 48a:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_round>
 48e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_pscA>
 492:	38 f0       	brcs	.+14     	; 0x4a2 <__mulsf3+0x1c>
 494:	0e 94 02 02 	call	0x404	; 0x404 <__fp_pscB>
 498:	20 f0       	brcs	.+8      	; 0x4a2 <__mulsf3+0x1c>
 49a:	95 23       	and	r25, r21
 49c:	11 f0       	breq	.+4      	; 0x4a2 <__mulsf3+0x1c>
 49e:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 4a2:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__fp_nan>
 4a6:	11 24       	eor	r1, r1
 4a8:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>

000004ac <__mulsf3x>:
 4ac:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_split3>
 4b0:	70 f3       	brcs	.-36     	; 0x48e <__mulsf3+0x8>

000004b2 <__mulsf3_pse>:
 4b2:	95 9f       	mul	r25, r21
 4b4:	c1 f3       	breq	.-16     	; 0x4a6 <__mulsf3+0x20>
 4b6:	95 0f       	add	r25, r21
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	55 1f       	adc	r21, r21
 4bc:	62 9f       	mul	r22, r18
 4be:	f0 01       	movw	r30, r0
 4c0:	72 9f       	mul	r23, r18
 4c2:	bb 27       	eor	r27, r27
 4c4:	f0 0d       	add	r31, r0
 4c6:	b1 1d       	adc	r27, r1
 4c8:	63 9f       	mul	r22, r19
 4ca:	aa 27       	eor	r26, r26
 4cc:	f0 0d       	add	r31, r0
 4ce:	b1 1d       	adc	r27, r1
 4d0:	aa 1f       	adc	r26, r26
 4d2:	64 9f       	mul	r22, r20
 4d4:	66 27       	eor	r22, r22
 4d6:	b0 0d       	add	r27, r0
 4d8:	a1 1d       	adc	r26, r1
 4da:	66 1f       	adc	r22, r22
 4dc:	82 9f       	mul	r24, r18
 4de:	22 27       	eor	r18, r18
 4e0:	b0 0d       	add	r27, r0
 4e2:	a1 1d       	adc	r26, r1
 4e4:	62 1f       	adc	r22, r18
 4e6:	73 9f       	mul	r23, r19
 4e8:	b0 0d       	add	r27, r0
 4ea:	a1 1d       	adc	r26, r1
 4ec:	62 1f       	adc	r22, r18
 4ee:	83 9f       	mul	r24, r19
 4f0:	a0 0d       	add	r26, r0
 4f2:	61 1d       	adc	r22, r1
 4f4:	22 1f       	adc	r18, r18
 4f6:	74 9f       	mul	r23, r20
 4f8:	33 27       	eor	r19, r19
 4fa:	a0 0d       	add	r26, r0
 4fc:	61 1d       	adc	r22, r1
 4fe:	23 1f       	adc	r18, r19
 500:	84 9f       	mul	r24, r20
 502:	60 0d       	add	r22, r0
 504:	21 1d       	adc	r18, r1
 506:	82 2f       	mov	r24, r18
 508:	76 2f       	mov	r23, r22
 50a:	6a 2f       	mov	r22, r26
 50c:	11 24       	eor	r1, r1
 50e:	9f 57       	subi	r25, 0x7F	; 127
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	9a f0       	brmi	.+38     	; 0x53a <__mulsf3_pse+0x88>
 514:	f1 f0       	breq	.+60     	; 0x552 <__mulsf3_pse+0xa0>
 516:	88 23       	and	r24, r24
 518:	4a f0       	brmi	.+18     	; 0x52c <__mulsf3_pse+0x7a>
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	bb 1f       	adc	r27, r27
 520:	66 1f       	adc	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	91 50       	subi	r25, 0x01	; 1
 528:	50 40       	sbci	r21, 0x00	; 0
 52a:	a9 f7       	brne	.-22     	; 0x516 <__mulsf3_pse+0x64>
 52c:	9e 3f       	cpi	r25, 0xFE	; 254
 52e:	51 05       	cpc	r21, r1
 530:	80 f0       	brcs	.+32     	; 0x552 <__mulsf3_pse+0xa0>
 532:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 536:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>
 53a:	5f 3f       	cpi	r21, 0xFF	; 255
 53c:	e4 f3       	brlt	.-8      	; 0x536 <__mulsf3_pse+0x84>
 53e:	98 3e       	cpi	r25, 0xE8	; 232
 540:	d4 f3       	brlt	.-12     	; 0x536 <__mulsf3_pse+0x84>
 542:	86 95       	lsr	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	b7 95       	ror	r27
 54a:	f7 95       	ror	r31
 54c:	e7 95       	ror	r30
 54e:	9f 5f       	subi	r25, 0xFF	; 255
 550:	c1 f7       	brne	.-16     	; 0x542 <__mulsf3_pse+0x90>
 552:	fe 2b       	or	r31, r30
 554:	88 0f       	add	r24, r24
 556:	91 1d       	adc	r25, r1
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	97 f9       	bld	r25, 7
 55e:	08 95       	ret

00000560 <__adddi3_s8>:
 560:	00 24       	eor	r0, r0
 562:	a7 fd       	sbrc	r26, 7
 564:	00 94       	com	r0
 566:	2a 0f       	add	r18, r26
 568:	30 1d       	adc	r19, r0
 56a:	40 1d       	adc	r20, r0
 56c:	50 1d       	adc	r21, r0
 56e:	60 1d       	adc	r22, r0
 570:	70 1d       	adc	r23, r0
 572:	80 1d       	adc	r24, r0
 574:	90 1d       	adc	r25, r0
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
