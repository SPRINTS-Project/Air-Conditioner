
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080006c  0080006c  00000840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ad  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6c  00000000  00000000  00002a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eaa  00000000  00000000  000035dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00004488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095f  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aeb  00000000  00000000  00005063  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005b4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include"keypad.h"
#include"../lcd/lcd.h"
 st_lcdConfigType st_gs_lcdConfig;
 st_keypadConfigType st_gs_keypadConfig;
int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
  9c:	ed e6       	ldi	r30, 0x6D	; 109
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	st_gs_lcdConfig.u8_d4Pin[0] = porta;
  a2:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[1] = pin0;
  a4:	12 86       	std	Z+10, r1	; 0x0a
	st_gs_lcdConfig.u8_d5Pin[0] = porta;
  a6:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[1] = pin1;
  a8:	01 e0       	ldi	r16, 0x01	; 1
  aa:	04 87       	std	Z+12, r16	; 0x0c
	st_gs_lcdConfig.u8_d6Pin[0] = porta;
  ac:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[1] = pin2;
  ae:	12 e0       	ldi	r17, 0x02	; 2
  b0:	16 87       	std	Z+14, r17	; 0x0e
	st_gs_lcdConfig.u8_d7Pin[0] = porta;
  b2:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[1] = pin3;
  b4:	0f 2e       	mov	r0, r31
  b6:	f3 e0       	ldi	r31, 0x03	; 3
  b8:	cf 2e       	mov	r12, r31
  ba:	f0 2d       	mov	r31, r0
  bc:	c0 8a       	std	Z+16, r12	; 0x10
	st_gs_lcdConfig.u8_RSpin[0]=porta;
  be:	11 8a       	std	Z+17, r1	; 0x11
	st_gs_lcdConfig.u8_RSpin[1]=pin4;
  c0:	68 94       	set
  c2:	dd 24       	eor	r13, r13
  c4:	d2 f8       	bld	r13, 2
  c6:	d2 8a       	std	Z+18, r13	; 0x12
	st_gs_lcdConfig.u8_RWpin[0]=porta;
  c8:	13 8a       	std	Z+19, r1	; 0x13
	st_gs_lcdConfig.u8_RWpin[1]=pin5;
  ca:	0f 2e       	mov	r0, r31
  cc:	f5 e0       	ldi	r31, 0x05	; 5
  ce:	ef 2e       	mov	r14, r31
  d0:	f0 2d       	mov	r31, r0
  d2:	e4 8a       	std	Z+20, r14	; 0x14
	st_gs_lcdConfig.u8_Epin[0]=porta;
  d4:	15 8a       	std	Z+21, r1	; 0x15
	st_gs_lcdConfig.u8_Epin[1]=pin6;
  d6:	0f 2e       	mov	r0, r31
  d8:	f6 e0       	ldi	r31, 0x06	; 6
  da:	ff 2e       	mov	r15, r31
  dc:	f0 2d       	mov	r31, r0
  de:	f6 8a       	std	Z+22, r15	; 0x16
	LCD_init(&st_gs_lcdConfig);
  e0:	cf 01       	movw	r24, r30
  e2:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_init>

	
	
		st_gs_keypadConfig.u8_col1Pin[0] = portc;
  e6:	e4 e8       	ldi	r30, 0x84	; 132
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	16 83       	std	Z+6, r17	; 0x06
		st_gs_keypadConfig.u8_col1Pin[1] = pin3;
  ec:	c7 82       	std	Z+7, r12	; 0x07
		st_gs_keypadConfig.u8_col2Pin[0] = portc;
  ee:	10 87       	std	Z+8, r17	; 0x08
		st_gs_keypadConfig.u8_col2Pin[1] = pin4;
  f0:	d1 86       	std	Z+9, r13	; 0x09
		st_gs_keypadConfig.u8_col3Pin[0] = portc;
  f2:	12 87       	std	Z+10, r17	; 0x0a
		st_gs_keypadConfig.u8_col3Pin[1] = pin5;
  f4:	e3 86       	std	Z+11, r14	; 0x0b
		st_gs_keypadConfig.u8_col4Pin[0] = portc;
  f6:	14 87       	std	Z+12, r17	; 0x0c
		st_gs_keypadConfig.u8_col4Pin[1] = pin6;
  f8:	f5 86       	std	Z+13, r15	; 0x0d
		st_gs_keypadConfig.u8_row1Pin[0] = portc;
  fa:	10 83       	st	Z, r17
		st_gs_keypadConfig.u8_row1Pin[1] = pin0 ;
  fc:	11 82       	std	Z+1, r1	; 0x01
		st_gs_keypadConfig.u8_row2Pin[0] = portc;
  fe:	12 83       	std	Z+2, r17	; 0x02
		st_gs_keypadConfig.u8_row2Pin[1] = pin1 ;
 100:	03 83       	std	Z+3, r16	; 0x03
		st_gs_keypadConfig.u8_row3Pin[0] = portc;
 102:	14 83       	std	Z+4, r17	; 0x04
		st_gs_keypadConfig.u8_row3Pin[1] = pin2 ;
 104:	15 83       	std	Z+5, r17	; 0x05
	KEYPAD_init(&st_gs_keypadConfig);
 106:	cf 01       	movw	r24, r30
 108:	0e 94 92 00 	call	0x124	; 0x124 <KEYPAD_init>
	uint8_t value;
	
	
	
	while(1)
	{	KEYPAD_read(&value);
 10c:	ce 01       	movw	r24, r28
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	0e 94 cf 00 	call	0x19e	; 0x19e <KEYPAD_read>
		if(value !='N')
 114:	69 81       	ldd	r22, Y+1	; 0x01
 116:	6e 34       	cpi	r22, 0x4E	; 78
 118:	c9 f3       	breq	.-14     	; 0x10c <main+0x7a>
		{
			LCD_char(&st_gs_lcdConfig,value);
 11a:	8d e6       	ldi	r24, 0x6D	; 109
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_char>
 122:	f4 cf       	rjmp	.-24     	; 0x10c <main+0x7a>

00000124 <KEYPAD_init>:
#define F_CPU 1000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	a9 f1       	breq	.+106    	; 0x196 <KEYPAD_init+0x72>
 12c:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
 12e:	69 81       	ldd	r22, Y+1	; 0x01
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	88 81       	ld	r24, Y
 134:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
 138:	6b 81       	ldd	r22, Y+3	; 0x03
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
 142:	6d 81       	ldd	r22, Y+5	; 0x05
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	8c 81       	ldd	r24, Y+4	; 0x04
 148:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
 14c:	69 81       	ldd	r22, Y+1	; 0x01
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	88 81       	ld	r24, Y
 152:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
 156:	6b 81       	ldd	r22, Y+3	; 0x03
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
 160:	6d 81       	ldd	r22, Y+5	; 0x05
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	8c 81       	ldd	r24, Y+4	; 0x04
 166:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
 16a:	6f 81       	ldd	r22, Y+7	; 0x07
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	8e 81       	ldd	r24, Y+6	; 0x06
 170:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
 174:	69 85       	ldd	r22, Y+9	; 0x09
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	88 85       	ldd	r24, Y+8	; 0x08
 17a:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
 17e:	6b 85       	ldd	r22, Y+11	; 0x0b
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	8a 85       	ldd	r24, Y+10	; 0x0a
 184:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
 188:	6d 85       	ldd	r22, Y+13	; 0x0d
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	8c 85       	ldd	r24, Y+12	; 0x0c
 18e:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	01 c0       	rjmp	.+2      	; 0x198 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
 196:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	1f 92       	push	r1
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
 1b4:	04 e8       	ldi	r16, 0x84	; 132
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	f8 01       	movw	r30, r16
 1ba:	67 81       	ldd	r22, Z+7	; 0x07
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	86 81       	ldd	r24, Z+6	; 0x06
 1c0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
 1c4:	f8 01       	movw	r30, r16
 1c6:	61 85       	ldd	r22, Z+9	; 0x09
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	80 85       	ldd	r24, Z+8	; 0x08
 1cc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
 1d0:	f8 01       	movw	r30, r16
 1d2:	63 85       	ldd	r22, Z+11	; 0x0b
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	82 85       	ldd	r24, Z+10	; 0x0a
 1d8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
 1dc:	f8 01       	movw	r30, r16
 1de:	65 85       	ldd	r22, Z+13	; 0x0d
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	84 85       	ldd	r24, Z+12	; 0x0c
 1e4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
 1e8:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
 1ea:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
 1ec:	42 c0       	rjmp	.+132    	; 0x272 <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
 1ee:	e4 e8       	ldi	r30, 0x84	; 132
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	67 81       	ldd	r22, Z+7	; 0x07
 1f4:	60 0f       	add	r22, r16
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	86 81       	ldd	r24, Z+6	; 0x06
 1fa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		for(j=0;j<3;j++)
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	2d c0       	rjmp	.+90     	; 0x25c <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
 202:	e4 e8       	ldi	r30, 0x84	; 132
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	61 81       	ldd	r22, Z+1	; 0x01
 208:	61 0f       	add	r22, r17
 20a:	ae 01       	movw	r20, r28
 20c:	4f 5f       	subi	r20, 0xFF	; 255
 20e:	5f 4f       	sbci	r21, 0xFF	; 255
 210:	80 81       	ld	r24, Z
 212:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DIO_readPIN>
			if(value==0)
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	81 11       	cpse	r24, r1
 21a:	1f c0       	rjmp	.+62     	; 0x25a <KEYPAD_read+0xbc>
 21c:	0a c0       	rjmp	.+20     	; 0x232 <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
 21e:	e4 e8       	ldi	r30, 0x84	; 132
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	61 81       	ldd	r22, Z+1	; 0x01
 224:	61 0f       	add	r22, r17
 226:	ae 01       	movw	r20, r28
 228:	4f 5f       	subi	r20, 0xFF	; 255
 22a:	5f 4f       	sbci	r21, 0xFF	; 255
 22c:	80 81       	ld	r24, Z
 22e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	88 23       	and	r24, r24
 236:	99 f3       	breq	.-26     	; 0x21e <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
 238:	80 2f       	mov	r24, r16
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e8 0f       	add	r30, r24
 244:	f9 1f       	adc	r31, r25
 246:	e0 5a       	subi	r30, 0xA0	; 160
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	e1 0f       	add	r30, r17
 24c:	f1 1d       	adc	r31, r1
 24e:	80 81       	ld	r24, Z
 250:	f7 01       	movw	r30, r14
 252:	80 83       	st	Z, r24
				flag=1;
 254:	dd 24       	eor	r13, r13
 256:	d3 94       	inc	r13
				
				break;
 258:	03 c0       	rjmp	.+6      	; 0x260 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
 25a:	1f 5f       	subi	r17, 0xFF	; 255
 25c:	13 30       	cpi	r17, 0x03	; 3
 25e:	88 f2       	brcs	.-94     	; 0x202 <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
 260:	e4 e8       	ldi	r30, 0x84	; 132
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	67 81       	ldd	r22, Z+7	; 0x07
 266:	60 0f       	add	r22, r16
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	86 81       	ldd	r24, Z+6	; 0x06
 26c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
 270:	0f 5f       	subi	r16, 0xFF	; 255
 272:	04 30       	cpi	r16, 0x04	; 4
 274:	08 f4       	brcc	.+2      	; 0x278 <KEYPAD_read+0xda>
 276:	bb cf       	rjmp	.-138    	; 0x1ee <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	df 16       	cp	r13, r31
 27c:	19 f0       	breq	.+6      	; 0x284 <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
 27e:	8e e4       	ldi	r24, 0x4E	; 78
 280:	f7 01       	movw	r30, r14
 282:	80 83       	st	Z, r24
		return ret_val;
	}
	
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0f 90       	pop	r0
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	08 95       	ret

00000298 <ENABLE>:
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
		
	}
}
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd e6       	ldi	r28, 0x6D	; 109
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	6e 89       	ldd	r22, Y+22	; 0x16
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	8d 89       	ldd	r24, Y+21	; 0x15
 2a6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 2aa:	00 00       	nop
 2ac:	6e 89       	ldd	r22, Y+22	; 0x16
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	8d 89       	ldd	r24, Y+21	; 0x15
 2b2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LCD_cmd>:
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	ec 01       	movw	r28, r24
 2c4:	16 2f       	mov	r17, r22
 2c6:	6e 89       	ldd	r22, Y+22	; 0x16
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	8d 89       	ldd	r24, Y+21	; 0x15
 2cc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 2d0:	6a 89       	ldd	r22, Y+18	; 0x12
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	89 89       	ldd	r24, Y+17	; 0x11
 2d6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 2da:	6c 89       	ldd	r22, Y+20	; 0x14
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	8b 89       	ldd	r24, Y+19	; 0x13
 2e0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 2e4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 2e8:	81 11       	cpse	r24, r1
 2ea:	48 c0       	rjmp	.+144    	; 0x37c <LCD_cmd+0xc0>
 2ec:	68 89       	ldd	r22, Y+16	; 0x10
 2ee:	41 2f       	mov	r20, r17
 2f0:	44 1f       	adc	r20, r20
 2f2:	44 27       	eor	r20, r20
 2f4:	44 1f       	adc	r20, r20
 2f6:	8f 85       	ldd	r24, Y+15	; 0x0f
 2f8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 2fc:	6e 85       	ldd	r22, Y+14	; 0x0e
 2fe:	16 fb       	bst	r17, 6
 300:	44 27       	eor	r20, r20
 302:	40 f9       	bld	r20, 0
 304:	8d 85       	ldd	r24, Y+13	; 0x0d
 306:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 30a:	6c 85       	ldd	r22, Y+12	; 0x0c
 30c:	15 fb       	bst	r17, 5
 30e:	44 27       	eor	r20, r20
 310:	40 f9       	bld	r20, 0
 312:	8b 85       	ldd	r24, Y+11	; 0x0b
 314:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 318:	6a 85       	ldd	r22, Y+10	; 0x0a
 31a:	14 fb       	bst	r17, 4
 31c:	44 27       	eor	r20, r20
 31e:	40 f9       	bld	r20, 0
 320:	89 85       	ldd	r24, Y+9	; 0x09
 322:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 326:	0e 94 4c 01 	call	0x298	; 0x298 <ENABLE>
 32a:	8d ee       	ldi	r24, 0xED	; 237
 32c:	92 e0       	ldi	r25, 0x02	; 2
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_cmd+0x72>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_cmd+0x78>
 334:	00 00       	nop
 336:	68 89       	ldd	r22, Y+16	; 0x10
 338:	13 fb       	bst	r17, 3
 33a:	44 27       	eor	r20, r20
 33c:	40 f9       	bld	r20, 0
 33e:	8f 85       	ldd	r24, Y+15	; 0x0f
 340:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 344:	6e 85       	ldd	r22, Y+14	; 0x0e
 346:	12 fb       	bst	r17, 2
 348:	44 27       	eor	r20, r20
 34a:	40 f9       	bld	r20, 0
 34c:	8d 85       	ldd	r24, Y+13	; 0x0d
 34e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 352:	6c 85       	ldd	r22, Y+12	; 0x0c
 354:	11 fb       	bst	r17, 1
 356:	44 27       	eor	r20, r20
 358:	40 f9       	bld	r20, 0
 35a:	8b 85       	ldd	r24, Y+11	; 0x0b
 35c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 360:	6a 85       	ldd	r22, Y+10	; 0x0a
 362:	41 2f       	mov	r20, r17
 364:	41 70       	andi	r20, 0x01	; 1
 366:	89 85       	ldd	r24, Y+9	; 0x09
 368:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
 36c:	0e 94 4c 01 	call	0x298	; 0x298 <ENABLE>
 370:	8d ee       	ldi	r24, 0xED	; 237
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCD_cmd+0xb8>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_cmd+0xbe>
 37a:	00 00       	nop
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	08 95       	ret

00000384 <LCD_init>:
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
 38a:	6a 89       	ldd	r22, Y+18	; 0x12
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	89 89       	ldd	r24, Y+17	; 0x11
 390:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 394:	6c 89       	ldd	r22, Y+20	; 0x14
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	8b 89       	ldd	r24, Y+19	; 0x13
 39a:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 39e:	6e 89       	ldd	r22, Y+22	; 0x16
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	8d 89       	ldd	r24, Y+21	; 0x15
 3a4:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 3a8:	88 81       	ld	r24, Y
 3aa:	88 23       	and	r24, r24
 3ac:	19 f0       	breq	.+6      	; 0x3b4 <LCD_init+0x30>
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	79 f1       	breq	.+94     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3b2:	6a c0       	rjmp	.+212    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 3b4:	62 e0       	ldi	r22, 0x02	; 2
 3b6:	8d e6       	ldi	r24, 0x6D	; 109
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 3be:	68 e2       	ldi	r22, 0x28	; 40
 3c0:	8d e6       	ldi	r24, 0x6D	; 109
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 3c8:	6c e0       	ldi	r22, 0x0C	; 12
 3ca:	8d e6       	ldi	r24, 0x6D	; 109
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 3d2:	66 e0       	ldi	r22, 0x06	; 6
 3d4:	8d e6       	ldi	r24, 0x6D	; 109
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	8d e6       	ldi	r24, 0x6D	; 109
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 3e6:	6a 85       	ldd	r22, Y+10	; 0x0a
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	89 85       	ldd	r24, Y+9	; 0x09
 3ec:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 3f0:	6c 85       	ldd	r22, Y+12	; 0x0c
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	8b 85       	ldd	r24, Y+11	; 0x0b
 3f6:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 3fa:	6e 85       	ldd	r22, Y+14	; 0x0e
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	8d 85       	ldd	r24, Y+13	; 0x0d
 400:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 404:	68 89       	ldd	r22, Y+16	; 0x10
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	8f 85       	ldd	r24, Y+15	; 0x0f
 40a:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 40e:	3c c0       	rjmp	.+120    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 410:	68 e3       	ldi	r22, 0x38	; 56
 412:	8d e6       	ldi	r24, 0x6D	; 109
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 41a:	6c e0       	ldi	r22, 0x0C	; 12
 41c:	8d e6       	ldi	r24, 0x6D	; 109
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 424:	66 e0       	ldi	r22, 0x06	; 6
 426:	8d e6       	ldi	r24, 0x6D	; 109
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8d e6       	ldi	r24, 0x6D	; 109
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_cmd>
 438:	6a 81       	ldd	r22, Y+2	; 0x02
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 442:	6c 81       	ldd	r22, Y+4	; 0x04
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	8b 81       	ldd	r24, Y+3	; 0x03
 448:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 44c:	6e 81       	ldd	r22, Y+6	; 0x06
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	8d 81       	ldd	r24, Y+5	; 0x05
 452:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 456:	68 85       	ldd	r22, Y+8	; 0x08
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	8f 81       	ldd	r24, Y+7	; 0x07
 45c:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 460:	6a 85       	ldd	r22, Y+10	; 0x0a
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	89 85       	ldd	r24, Y+9	; 0x09
 466:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 46a:	6c 85       	ldd	r22, Y+12	; 0x0c
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	8b 85       	ldd	r24, Y+11	; 0x0b
 470:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 474:	6e 85       	ldd	r22, Y+14	; 0x0e
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	8d 85       	ldd	r24, Y+13	; 0x0d
 47a:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 47e:	68 89       	ldd	r22, Y+16	; 0x10
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	8f 85       	ldd	r24, Y+15	; 0x0f
 484:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
 488:	88 81       	ld	r24, Y
 48a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <LCD_char>:
	{
		//do nothing
	}
}
  void LCD_char(st_lcdConfigType* st_config,uint8_t cmd)
{
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	ec 01       	movw	r28, r24
 49c:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 49e:	6e 89       	ldd	r22, Y+22	; 0x16
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	8d 89       	ldd	r24, Y+21	; 0x15
 4a4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_HIGH);
 4a8:	6a 89       	ldd	r22, Y+18	; 0x12
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	89 89       	ldd	r24, Y+17	; 0x11
 4ae:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 4b2:	6c 89       	ldd	r22, Y+20	; 0x14
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	8b 89       	ldd	r24, Y+19	; 0x13
 4b8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 4bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 4c0:	81 11       	cpse	r24, r1
 4c2:	48 c0       	rjmp	.+144    	; 0x554 <LCD_char+0xc0>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 4c4:	68 89       	ldd	r22, Y+16	; 0x10
 4c6:	41 2f       	mov	r20, r17
 4c8:	44 1f       	adc	r20, r20
 4ca:	44 27       	eor	r20, r20
 4cc:	44 1f       	adc	r20, r20
 4ce:	8f 85       	ldd	r24, Y+15	; 0x0f
 4d0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 4d4:	6e 85       	ldd	r22, Y+14	; 0x0e
 4d6:	16 fb       	bst	r17, 6
 4d8:	44 27       	eor	r20, r20
 4da:	40 f9       	bld	r20, 0
 4dc:	8d 85       	ldd	r24, Y+13	; 0x0d
 4de:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 4e2:	6c 85       	ldd	r22, Y+12	; 0x0c
 4e4:	15 fb       	bst	r17, 5
 4e6:	44 27       	eor	r20, r20
 4e8:	40 f9       	bld	r20, 0
 4ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 4ec:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 4f0:	6a 85       	ldd	r22, Y+10	; 0x0a
 4f2:	14 fb       	bst	r17, 4
 4f4:	44 27       	eor	r20, r20
 4f6:	40 f9       	bld	r20, 0
 4f8:	89 85       	ldd	r24, Y+9	; 0x09
 4fa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		ENABLE();
 4fe:	0e 94 4c 01 	call	0x298	; 0x298 <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 502:	8d ee       	ldi	r24, 0xED	; 237
 504:	92 e0       	ldi	r25, 0x02	; 2
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <LCD_char+0x72>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <LCD_char+0x78>
 50c:	00 00       	nop
		_delay_ms(3);
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 50e:	68 89       	ldd	r22, Y+16	; 0x10
 510:	13 fb       	bst	r17, 3
 512:	44 27       	eor	r20, r20
 514:	40 f9       	bld	r20, 0
 516:	8f 85       	ldd	r24, Y+15	; 0x0f
 518:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 51c:	6e 85       	ldd	r22, Y+14	; 0x0e
 51e:	12 fb       	bst	r17, 2
 520:	44 27       	eor	r20, r20
 522:	40 f9       	bld	r20, 0
 524:	8d 85       	ldd	r24, Y+13	; 0x0d
 526:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 52a:	6c 85       	ldd	r22, Y+12	; 0x0c
 52c:	11 fb       	bst	r17, 1
 52e:	44 27       	eor	r20, r20
 530:	40 f9       	bld	r20, 0
 532:	8b 85       	ldd	r24, Y+11	; 0x0b
 534:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 538:	6a 85       	ldd	r22, Y+10	; 0x0a
 53a:	41 2f       	mov	r20, r17
 53c:	41 70       	andi	r20, 0x01	; 1
 53e:	89 85       	ldd	r24, Y+9	; 0x09
 540:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_writePIN>
		ENABLE();
 544:	0e 94 4c 01 	call	0x298	; 0x298 <ENABLE>
 548:	8d ee       	ldi	r24, 0xED	; 237
 54a:	92 e0       	ldi	r25, 0x02	; 2
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <LCD_char+0xb8>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_char+0xbe>
 552:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	08 95       	ret

0000055c <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 55c:	68 30       	cpi	r22, 0x08	; 8
 55e:	a0 f5       	brcc	.+104    	; 0x5c8 <DIO_init+0x6c>
	{
		if (port == porta)
 560:	81 11       	cpse	r24, r1
 562:	0b c0       	rjmp	.+22     	; 0x57a <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 564:	8a b3       	in	r24, 0x1a	; 26
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_init+0x12>
 56a:	44 0f       	add	r20, r20
 56c:	55 1f       	adc	r21, r21
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_init+0xe>
 572:	48 2b       	or	r20, r24
 574:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	08 95       	ret
		}
		else if (port == portb)
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	59 f4       	brne	.+22     	; 0x594 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 57e:	87 b3       	in	r24, 0x17	; 23
 580:	50 e0       	ldi	r21, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_init+0x2c>
 584:	44 0f       	add	r20, r20
 586:	55 1f       	adc	r21, r21
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_init+0x28>
 58c:	48 2b       	or	r20, r24
 58e:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret
		}
		else if (port == portc)
 594:	82 30       	cpi	r24, 0x02	; 2
 596:	59 f4       	brne	.+22     	; 0x5ae <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 598:	84 b3       	in	r24, 0x14	; 20
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_init+0x46>
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_init+0x42>
 5a6:	48 2b       	or	r20, r24
 5a8:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	08 95       	ret
		}
		else if (port == portd)
 5ae:	83 30       	cpi	r24, 0x03	; 3
 5b0:	69 f4       	brne	.+26     	; 0x5cc <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 5b2:	81 b3       	in	r24, 0x11	; 17
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_init+0x60>
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_init+0x5c>
 5c0:	48 2b       	or	r20, r24
 5c2:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 5cc:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 5ce:	08 95       	ret

000005d0 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 5d0:	68 30       	cpi	r22, 0x08	; 8
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <DIO_writePIN+0x6>
 5d4:	74 c0       	rjmp	.+232    	; 0x6be <DIO_writePIN+0xee>
	{
		if (port == porta)
 5d6:	81 11       	cpse	r24, r1
 5d8:	1b c0       	rjmp	.+54     	; 0x610 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 5da:	41 30       	cpi	r20, 0x01	; 1
 5dc:	61 f4       	brne	.+24     	; 0x5f6 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 5de:	2b b3       	in	r18, 0x1b	; 27
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_writePIN+0x1a>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_writePIN+0x16>
 5ee:	82 2b       	or	r24, r18
 5f0:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 5f6:	2b b3       	in	r18, 0x1b	; 27
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_writePIN+0x32>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_writePIN+0x2e>
 606:	80 95       	com	r24
 608:	82 23       	and	r24, r18
 60a:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	08 95       	ret
		}
		else if (port == portb)
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	d9 f4       	brne	.+54     	; 0x64a <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 614:	41 30       	cpi	r20, 0x01	; 1
 616:	61 f4       	brne	.+24     	; 0x630 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 618:	28 b3       	in	r18, 0x18	; 24
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_writePIN+0x54>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_writePIN+0x50>
 628:	82 2b       	or	r24, r18
 62a:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 630:	28 b3       	in	r18, 0x18	; 24
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_writePIN+0x6c>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_writePIN+0x68>
 640:	80 95       	com	r24
 642:	82 23       	and	r24, r18
 644:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	08 95       	ret
		}
		else if (port == portc)
 64a:	82 30       	cpi	r24, 0x02	; 2
 64c:	d9 f4       	brne	.+54     	; 0x684 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 64e:	41 30       	cpi	r20, 0x01	; 1
 650:	61 f4       	brne	.+24     	; 0x66a <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 652:	25 b3       	in	r18, 0x15	; 21
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_writePIN+0x8e>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_writePIN+0x8a>
 662:	82 2b       	or	r24, r18
 664:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 66a:	25 b3       	in	r18, 0x15	; 21
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_writePIN+0xa6>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_writePIN+0xa2>
 67a:	80 95       	com	r24
 67c:	82 23       	and	r24, r18
 67e:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	08 95       	ret
		}
		else if (port == portd)
 684:	83 30       	cpi	r24, 0x03	; 3
 686:	e9 f4       	brne	.+58     	; 0x6c2 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 688:	41 30       	cpi	r20, 0x01	; 1
 68a:	61 f4       	brne	.+24     	; 0x6a4 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 68c:	22 b3       	in	r18, 0x12	; 18
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_writePIN+0xc8>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_writePIN+0xc4>
 69c:	82 2b       	or	r24, r18
 69e:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 6a4:	22 b3       	in	r18, 0x12	; 18
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_writePIN+0xe0>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_writePIN+0xdc>
 6b4:	80 95       	com	r24
 6b6:	82 23       	and	r24, r18
 6b8:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 6c2:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 6c4:	08 95       	ret

000006c6 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
 6c6:	68 30       	cpi	r22, 0x08	; 8
 6c8:	08 f0       	brcs	.+2      	; 0x6cc <DIO_readPIN+0x6>
 6ca:	64 c0       	rjmp	.+200    	; 0x794 <DIO_readPIN+0xce>
	{
		if (port == porta)
 6cc:	81 11       	cpse	r24, r1
 6ce:	17 c0       	rjmp	.+46     	; 0x6fe <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
 6d0:	79 b3       	in	r23, 0x19	; 25
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	9c 01       	movw	r18, r24
 6d8:	06 2e       	mov	r0, r22
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_readPIN+0x1a>
 6dc:	22 0f       	add	r18, r18
 6de:	33 1f       	adc	r19, r19
 6e0:	0a 94       	dec	r0
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_readPIN+0x16>
 6e4:	87 2f       	mov	r24, r23
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	82 23       	and	r24, r18
 6ea:	93 23       	and	r25, r19
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_readPIN+0x2c>
 6ee:	96 95       	lsr	r25
 6f0:	87 95       	ror	r24
 6f2:	6a 95       	dec	r22
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_readPIN+0x28>
 6f6:	fa 01       	movw	r30, r20
 6f8:	80 83       	st	Z, r24
			return DIO_E_OK;
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	08 95       	ret
		}
		else if (port == portb)
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	b9 f4       	brne	.+46     	; 0x730 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
 702:	76 b3       	in	r23, 0x16	; 22
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	9c 01       	movw	r18, r24
 70a:	06 2e       	mov	r0, r22
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_readPIN+0x4c>
 70e:	22 0f       	add	r18, r18
 710:	33 1f       	adc	r19, r19
 712:	0a 94       	dec	r0
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_readPIN+0x48>
 716:	87 2f       	mov	r24, r23
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	82 23       	and	r24, r18
 71c:	93 23       	and	r25, r19
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_readPIN+0x5e>
 720:	96 95       	lsr	r25
 722:	87 95       	ror	r24
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_readPIN+0x5a>
 728:	fa 01       	movw	r30, r20
 72a:	80 83       	st	Z, r24
			return DIO_E_OK;
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	08 95       	ret
		}
		else if (port == portc)
 730:	82 30       	cpi	r24, 0x02	; 2
 732:	b9 f4       	brne	.+46     	; 0x762 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
 734:	73 b3       	in	r23, 0x13	; 19
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	9c 01       	movw	r18, r24
 73c:	06 2e       	mov	r0, r22
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_readPIN+0x7e>
 740:	22 0f       	add	r18, r18
 742:	33 1f       	adc	r19, r19
 744:	0a 94       	dec	r0
 746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_readPIN+0x7a>
 748:	87 2f       	mov	r24, r23
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	82 23       	and	r24, r18
 74e:	93 23       	and	r25, r19
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_readPIN+0x90>
 752:	96 95       	lsr	r25
 754:	87 95       	ror	r24
 756:	6a 95       	dec	r22
 758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_readPIN+0x8c>
 75a:	fa 01       	movw	r30, r20
 75c:	80 83       	st	Z, r24
			return DIO_E_OK;
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	08 95       	ret
		}
		else if (port == portd)
 762:	83 30       	cpi	r24, 0x03	; 3
 764:	c9 f4       	brne	.+50     	; 0x798 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
 766:	70 b3       	in	r23, 0x10	; 16
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	9c 01       	movw	r18, r24
 76e:	06 2e       	mov	r0, r22
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_readPIN+0xb0>
 772:	22 0f       	add	r18, r18
 774:	33 1f       	adc	r19, r19
 776:	0a 94       	dec	r0
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_readPIN+0xac>
 77a:	87 2f       	mov	r24, r23
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	82 23       	and	r24, r18
 780:	93 23       	and	r25, r19
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_readPIN+0xc2>
 784:	96 95       	lsr	r25
 786:	87 95       	ror	r24
 788:	6a 95       	dec	r22
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_readPIN+0xbe>
 78c:	fa 01       	movw	r30, r20
 78e:	80 83       	st	Z, r24
			return DIO_E_OK;
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 798:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
 79a:	08 95       	ret

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
