
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00001484  00001518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008000f8  008000f8  000015b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e26  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010b4  00000000  00000000  0000466a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001eb1  00000000  00000000  0000571e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  000075d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3f  00000000  00000000  00007b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c39  00000000  00000000  00008767  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 33       	cpi	r26, 0x38	; 56
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 05 	call	0xb94	; 0xb94 <main>
      8a:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
      92:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <u8_delay>
      96:	8f 5f       	subi	r24, 0xFF	; 255
      98:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <u8_delay>
	TIMER_Manager_reset(&st_gs_timer_0_config);
      9c:	80 e0       	ldi	r24, 0x00	; 0
      9e:	91 e0       	ldi	r25, 0x01	; 1
      a0:	0e 94 b8 05 	call	0xb70	; 0xb70 <TIMER_Manager_reset>
      a4:	08 95       	ret

000000a6 <APP_init>:
	}
}


void APP_init(void)
{
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_0_config.u8_timerNum = TIMER_0;
      b2:	e0 e0       	ldi	r30, 0x00	; 0
      b4:	f1 e0       	ldi	r31, 0x01	; 1
      b6:	10 82       	st	Z, r1
	st_gs_timer_0_config.u8_timer_ovf_int_enable = 1;
      b8:	d1 e0       	ldi	r29, 0x01	; 1
      ba:	d4 83       	std	Z+4, r29	; 0x04
	st_gs_timer_0_config.u16_timer_InitialValue = APP_TIMER_0_INIT_VALUE;
      bc:	80 ef       	ldi	r24, 0xF0	; 240
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	93 83       	std	Z+3, r25	; 0x03
      c2:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_0_config.callBackFunction =  APP_timer0OvfHandeler;
      c4:	89 e4       	ldi	r24, 0x49	; 73
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	96 83       	std	Z+6, r25	; 0x06
      ca:	85 83       	std	Z+5, r24	; 0x05
	TIMER_Manager_init(&st_gs_timer_0_config);
      cc:	cf 01       	movw	r24, r30
      ce:	0e 94 98 05 	call	0xb30	; 0xb30 <TIMER_Manager_init>
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
      d2:	ed ef       	ldi	r30, 0xFD	; 253
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	87 e0       	ldi	r24, 0x07	; 7
      d8:	82 83       	std	Z+2, r24	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
      da:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
      dc:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
      de:	cf 01       	movw	r24, r30
      e0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <TEMP_SENSOR_init>
	
	
	
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
      e4:	e3 e1       	ldi	r30, 0x13	; 19
      e6:	f1 e0       	ldi	r31, 0x01	; 1
      e8:	10 82       	st	Z, r1
	
	st_gs_lcdConfig.u8_d4Pin[APP_PORT]	 = porta;
      ea:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[APP_PIN]	 = pin0;
      ec:	12 86       	std	Z+10, r1	; 0x0a
	
	st_gs_lcdConfig.u8_d5Pin[APP_PORT]	 = porta;
      ee:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[APP_PIN]	 = pin1;
      f0:	d4 87       	std	Z+12, r29	; 0x0c
	
	st_gs_lcdConfig.u8_d6Pin[APP_PORT]	 = porta;
      f2:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[APP_PIN]	 = pin2;
      f4:	c2 e0       	ldi	r28, 0x02	; 2
      f6:	c6 87       	std	Z+14, r28	; 0x0e
	
	st_gs_lcdConfig.u8_d7Pin[APP_PORT]	 = porta;
      f8:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[APP_PIN]	 = pin3;
      fa:	0f 2e       	mov	r0, r31
      fc:	f3 e0       	ldi	r31, 0x03	; 3
      fe:	ef 2e       	mov	r14, r31
     100:	f0 2d       	mov	r31, r0
     102:	e0 8a       	std	Z+16, r14	; 0x10
	
	st_gs_lcdConfig.u8_RSpin[APP_PORT]	 = porta;
     104:	11 8a       	std	Z+17, r1	; 0x11
	st_gs_lcdConfig.u8_RSpin[APP_PIN]	 = pin4;
     106:	68 94       	set
     108:	ff 24       	eor	r15, r15
     10a:	f2 f8       	bld	r15, 2
     10c:	f2 8a       	std	Z+18, r15	; 0x12
	
	st_gs_lcdConfig.u8_RWpin[APP_PORT]	 = porta;
     10e:	13 8a       	std	Z+19, r1	; 0x13
	st_gs_lcdConfig.u8_RWpin[APP_PIN]	 = pin5;
     110:	05 e0       	ldi	r16, 0x05	; 5
     112:	04 8b       	std	Z+20, r16	; 0x14
	
	st_gs_lcdConfig.u8_Epin[APP_PORT]	 = porta;
     114:	15 8a       	std	Z+21, r1	; 0x15
	st_gs_lcdConfig.u8_Epin[APP_PIN]	 = pin6;
     116:	16 e0       	ldi	r17, 0x06	; 6
     118:	16 8b       	std	Z+22, r17	; 0x16
	
	LCD_init(&st_gs_lcdConfig);
     11a:	cf 01       	movw	r24, r30
     11c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_init>
	
	
	
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[APP_PORT]	 = portc;
     120:	ea e2       	ldi	r30, 0x2A	; 42
     122:	f1 e0       	ldi	r31, 0x01	; 1
     124:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[APP_PIN]	 = pin3;
     126:	e7 82       	std	Z+7, r14	; 0x07
	
	st_gs_keypadConfig.u8_col2Pin[APP_PORT]	 = portc;
     128:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[APP_PIN]	 = pin4;
     12a:	f1 86       	std	Z+9, r15	; 0x09
	
	st_gs_keypadConfig.u8_col3Pin[APP_PORT]  = portc;
     12c:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[APP_PIN]	 = pin5;
     12e:	03 87       	std	Z+11, r16	; 0x0b
	
	st_gs_keypadConfig.u8_col4Pin[APP_PORT]	 = portc;
     130:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[APP_PIN]	 = pin6;
     132:	15 87       	std	Z+13, r17	; 0x0d
	
	st_gs_keypadConfig.u8_row1Pin[APP_PORT]	 = portc;
     134:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[APP_PIN]	 = pin0 ;
     136:	11 82       	std	Z+1, r1	; 0x01
	
	st_gs_keypadConfig.u8_row2Pin[APP_PORT]  = portc;
     138:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[APP_PIN]	 = pin1 ;
     13a:	d3 83       	std	Z+3, r29	; 0x03
	
	st_gs_keypadConfig.u8_row3Pin[APP_PORT]	 = portc;
     13c:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[APP_PIN]	 = pin2 ;
     13e:	c5 83       	std	Z+5, r28	; 0x05
	
	KEYPAD_init(&st_gs_keypadConfig);
     140:	cf 01       	movw	r24, r30
     142:	0e 94 3e 02 	call	0x47c	; 0x47c <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
     146:	eb ef       	ldi	r30, 0xFB	; 251
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
     14c:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
     14e:	cf 01       	movw	r24, r30
     150:	0e 94 05 02 	call	0x40a	; 0x40a <BUZZER_init>
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	ff 90       	pop	r15
     15e:	ef 90       	pop	r14
     160:	08 95       	ret

00000162 <APP_welcome>:


void APP_welcome(void)
{
	LCD_clear();
     162:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Welcome");
     16e:	89 e6       	ldi	r24, 0x69	; 105
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	u8_delay = 0 ;
     176:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17a:	2f ef       	ldi	r18, 0xFF	; 255
     17c:	89 e6       	ldi	r24, 0x69	; 105
     17e:	98 e1       	ldi	r25, 0x18	; 24
     180:	21 50       	subi	r18, 0x01	; 1
     182:	80 40       	sbci	r24, 0x00	; 0
     184:	90 40       	sbci	r25, 0x00	; 0
     186:	e1 f7       	brne	.-8      	; 0x180 <APP_welcome+0x1e>
     188:	00 c0       	rjmp	.+0      	; 0x18a <APP_welcome+0x28>
     18a:	00 00       	nop
	//while(u8_delay <= 2);
	_delay_ms(1000);
	LCD_clear();
     18c:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"default Temp is");
     198:	81 e7       	ldi	r24, 0x71	; 113
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	LCD_setCursor(2,1);
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"20");
     1a8:	8b ec       	ldi	r24, 0xCB	; 203
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	u8_delay = 0;
     1b0:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
     1b4:	2f ef       	ldi	r18, 0xFF	; 255
     1b6:	89 e6       	ldi	r24, 0x69	; 105
     1b8:	98 e1       	ldi	r25, 0x18	; 24
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	80 40       	sbci	r24, 0x00	; 0
     1be:	90 40       	sbci	r25, 0x00	; 0
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <APP_welcome+0x58>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <APP_welcome+0x62>
     1c4:	00 00       	nop
	//while(u8_delay <= 2);
	_delay_ms(1000);
	
	u8_gs_programTemp = u8_gc_defaultTemp;
     1c6:	84 e1       	ldi	r24, 0x14	; 20
     1c8:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
	u8_en_gs_programState = APP_SET_TEMP;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
     1d2:	08 95       	ret

000001d4 <APP_set>:




void APP_set(void)
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	00 d0       	rcall	.+0      	; 0x1da <APP_set+0x6>
     1da:	1f 92       	push	r1
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
     1e0:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	LCD_clear();
     1e2:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Set Initial Temp");
     1ee:	81 e8       	ldi	r24, 0x81	; 129
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	u8_delay = 0;
     1f6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
     1fa:	2f ef       	ldi	r18, 0xFF	; 255
     1fc:	84 e3       	ldi	r24, 0x34	; 52
     1fe:	9c e0       	ldi	r25, 0x0C	; 12
     200:	21 50       	subi	r18, 0x01	; 1
     202:	80 40       	sbci	r24, 0x00	; 0
     204:	90 40       	sbci	r25, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <APP_set+0x2c>
     208:	00 c0       	rjmp	.+0      	; 0x20a <APP_set+0x36>
     20a:	00 00       	nop
	//while(u8_delay <= 1);
	_delay_ms(500);
	LCD_clear();
     20c:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     210:	61 e0       	ldi	r22, 0x01	; 1
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
     218:	82 e9       	ldi	r24, 0x92	; 146
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	//LCD_setCursor(1,8);
	//LCD_writeString((uint8_t*)ch_arrs_curTempToString);
	LCD_setCursor(1,11);
     220:	6b e0       	ldi	r22, 0x0B	; 11
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Max=35");
     228:	89 e9       	ldi	r24, 0x99	; 153
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	
	while(1)
	{
		itoa(u8_gs_programTemp,ch_arrs_curTempToString,10);
     230:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     234:	4a e0       	ldi	r20, 0x0A	; 10
     236:	be 01       	movw	r22, r28
     238:	6e 5f       	subi	r22, 0xFE	; 254
     23a:	7f 4f       	sbci	r23, 0xFF	; 255
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__itoa_ncheck>
		LCD_setCursor(1,8);
     242:	68 e0       	ldi	r22, 0x08	; 8
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
     24a:	ce 01       	movw	r24, r28
     24c:	02 96       	adiw	r24, 0x02	; 2
     24e:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
		KEYPAD_read(&u8_keypadData);
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <KEYPAD_read>
		
		if (u8_keypadData == APP_INCREMENT_BTN)
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	81 33       	cpi	r24, 0x31	; 49
     25e:	41 f4       	brne	.+16     	; 0x270 <APP_set+0x9c>
		{
		
			// Increment
			if (u8_gs_programTemp < 35)
     260:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
     264:	83 32       	cpi	r24, 0x23	; 35
     266:	20 f7       	brcc	.-56     	; 0x230 <APP_set+0x5c>
			{
				u8_gs_programTemp++;
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
     26e:	e0 cf       	rjmp	.-64     	; 0x230 <APP_set+0x5c>
			}
		}
		else if (u8_keypadData == APP_DECREMENT_BTN)
     270:	82 33       	cpi	r24, 0x32	; 50
     272:	41 f4       	brne	.+16     	; 0x284 <APP_set+0xb0>
		{
			// Decrement
			if (u8_gs_programTemp >18)
     274:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
     278:	83 31       	cpi	r24, 0x13	; 19
     27a:	d0 f2       	brcs	.-76     	; 0x230 <APP_set+0x5c>
			{
				u8_gs_programTemp--;
     27c:	81 50       	subi	r24, 0x01	; 1
     27e:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
     282:	d6 cf       	rjmp	.-84     	; 0x230 <APP_set+0x5c>
			}
		}
		else if (u8_keypadData == APP_SET_BTN)
     284:	83 33       	cpi	r24, 0x33	; 51
     286:	a1 f6       	brne	.-88     	; 0x230 <APP_set+0x5c>
		{
			// Set
			u8_en_gs_programState = APP_WORKING;
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
		else{
			// do nothing
		}
	}
	
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <APP_working>:



void APP_working(void)
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <APP_working+0x6>
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
     2a6:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	
	
	
	// print current temp
	LCD_clear();
     2a8:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
	LCD_setCursor(1,1);
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Current Temp = ");
     2b4:	80 ea       	ldi	r24, 0xA0	; 160
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	
	
	while(u8_en_gs_programState == APP_WORKING)
     2bc:	81 c0       	rjmp	.+258    	; 0x3c0 <APP_working+0x126>
	{
		// read the temp from the sensor
		PORTD = TEMP_SENSOR_read(&st_gs_tempSensorConfig,&u8_gs_curTemp);
     2be:	60 e6       	ldi	r22, 0x60	; 96
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	8d ef       	ldi	r24, 0xFD	; 253
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 13 05 	call	0xa26	; 0xa26 <TEMP_SENSOR_read>
     2ca:	82 bb       	out	0x12, r24	; 18
		
		
		// convert int to string
		itoa(u8_gs_curTemp,ch_arrs_curTempToString,10);
     2cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2d0:	4a e0       	ldi	r20, 0x0A	; 10
     2d2:	be 01       	movw	r22, r28
     2d4:	6e 5f       	subi	r22, 0xFE	; 254
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__itoa_ncheck>
		
		
		LCD_setCursor(2,2);
     2de:	62 e0       	ldi	r22, 0x02	; 2
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
     2e6:	ce 01       	movw	r24, r28
     2e8:	02 96       	adiw	r24, 0x02	; 2
     2ea:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
		if (u8_gs_curTemp > u8_gs_programTemp)
     2ee:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f2:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
     2f6:	89 17       	cp	r24, r25
     2f8:	28 f4       	brcc	.+10     	; 0x304 <APP_working+0x6a>
		{
			// print the bell shape 
			//LCD_setCursor(2,3);
			LCD_writeSpChar(LCD_BELL);
     2fa:	83 e0       	ldi	r24, 0x03	; 3
     2fc:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_writeSpChar>
			
			
			// start the BUZZER
			BUZZER_start();
     300:	0e 94 20 02 	call	0x440	; 0x440 <BUZZER_start>
		}
		KEYPAD_read(&u8_keypadData);
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <KEYPAD_read>
		switch(u8_keypadData)
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	85 33       	cpi	r24, 0x35	; 53
     310:	31 f0       	breq	.+12     	; 0x31e <APP_working+0x84>
     312:	8e 34       	cpi	r24, 0x4E	; 78
     314:	09 f4       	brne	.+2      	; 0x318 <APP_working+0x7e>
     316:	54 c0       	rjmp	.+168    	; 0x3c0 <APP_working+0x126>
     318:	84 33       	cpi	r24, 0x34	; 52
     31a:	69 f5       	brne	.+90     	; 0x376 <APP_working+0xdc>
     31c:	26 c0       	rjmp	.+76     	; 0x36a <APP_working+0xd0>
			case  APP_NO_BTN :
				break;
			case  APP_RESET_BTN :
				// reset
				// Stop the BUZZER
				BUZZER_stop();
     31e:	0e 94 2f 02 	call	0x45e	; 0x45e <BUZZER_stop>
				
				// Set the program temp with the default temp
				u8_gs_programTemp = u8_gc_defaultTemp;
     322:	84 e1       	ldi	r24, 0x14	; 20
     324:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
				
				// clear LCD and print Temp value is resettled to 20
				LCD_clear();
     328:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
				LCD_setCursor(1,1);
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"Temp value is");
     334:	80 eb       	ldi	r24, 0xB0	; 176
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
				LCD_setCursor(2,1);
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"resettled to 20");
     344:	8e eb       	ldi	r24, 0xBE	; 190
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
				
				// 1s timeout
				u8_delay = 0;
     34c:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
     350:	2f ef       	ldi	r18, 0xFF	; 255
     352:	89 e6       	ldi	r24, 0x69	; 105
     354:	98 e1       	ldi	r25, 0x18	; 24
     356:	21 50       	subi	r18, 0x01	; 1
     358:	80 40       	sbci	r24, 0x00	; 0
     35a:	90 40       	sbci	r25, 0x00	; 0
     35c:	e1 f7       	brne	.-8      	; 0x356 <APP_working+0xbc>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <APP_working+0xc6>
     360:	00 00       	nop
				//while(u8_delay <= 2);
				_delay_ms(1000);
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
				break;
     368:	2b c0       	rjmp	.+86     	; 0x3c0 <APP_working+0x126>
			
			case APP_ADJUST_BTN : 
				// adjust
				
				// Stop the BUZZER
				BUZZER_stop();
     36a:	0e 94 2f 02 	call	0x45e	; 0x45e <BUZZER_stop>
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
				break;
     374:	25 c0       	rjmp	.+74     	; 0x3c0 <APP_working+0x126>
			default:
				
				// Invalid button
				LCD_clear();
     376:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
				LCD_setCursor(1,1);
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"the operation is");
     382:	8e ec       	ldi	r24, 0xCE	; 206
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
				LCD_setCursor(2,1);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"not allowed");
     392:	8f ed       	ldi	r24, 0xDF	; 223
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
     39a:	2f ef       	ldi	r18, 0xFF	; 255
     39c:	89 e6       	ldi	r24, 0x69	; 105
     39e:	98 e1       	ldi	r25, 0x18	; 24
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	80 40       	sbci	r24, 0x00	; 0
     3a4:	90 40       	sbci	r25, 0x00	; 0
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <APP_working+0x106>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <APP_working+0x110>
     3aa:	00 00       	nop
				//u8_delay = 0;
				//while(u8_delay <= 2);
				_delay_ms(1000);
				
				// print current temp
				LCD_clear();
     3ac:	0e 94 13 04 	call	0x826	; 0x826 <LCD_clear>
				LCD_setCursor(1,1);
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	0e 94 19 04 	call	0x832	; 0x832 <LCD_setCursor>
				LCD_writeString((uint8_t*)"Current Temp = ");
     3b8:	80 ea       	ldi	r24, 0xA0	; 160
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 92 04 	call	0x924	; 0x924 <LCD_writeString>
	LCD_clear();
	LCD_setCursor(1,1);
	LCD_writeString((uint8_t*)"Current Temp = ");
	
	
	while(u8_en_gs_programState == APP_WORKING)
     3c0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	09 f4       	brne	.+2      	; 0x3ca <APP_working+0x130>
     3c8:	7a cf       	rjmp	.-268    	; 0x2be <APP_working+0x24>
				LCD_writeString((uint8_t*)"Current Temp = ");
				break;
		}
	}
	
}
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <APP_start>:
void APP_timer0OvfHandeler(void);


void APP_start(void)
{
	DDRD = 0xff;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	81 bb       	out	0x11, r24	; 17
	APP_init();
     3da:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_init>
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <APP_start+0xe>
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
     3e0:	0e 94 b1 00 	call	0x162	; 0x162 <APP_welcome>
{
	DDRD = 0xff;
	APP_init();
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
     3e4:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
     3e8:	81 11       	cpse	r24, r1
     3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <APP_start+0x1c>
     3ec:	f9 cf       	rjmp	.-14     	; 0x3e0 <APP_start+0xa>
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
     3ee:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <APP_set>
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
     3f2:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	d1 f3       	breq	.-12     	; 0x3ee <APP_start+0x18>
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
		{
			APP_working();
     3fc:	0e 94 4d 01 	call	0x29a	; 0x29a <APP_working>
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
     400:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	d1 f3       	breq	.-12     	; 0x3fc <APP_start+0x26>
     408:	ed cf       	rjmp	.-38     	; 0x3e4 <APP_start+0xe>

0000040a <BUZZER_init>:
static uint8_t u8_gs_buzzerState = NOT_INIT;



u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
     40e:	00 97       	sbiw	r24, 0x00	; 0
     410:	99 f0       	breq	.+38     	; 0x438 <BUZZER_init+0x2e>
     412:	ec 01       	movw	r28, r24
		return BUZZER_E_NOT_OK;
	
	// Set Buzzer pin as output
	u8_en_dioErrors u8_dioRetVal = DIO_init(st_config->u8_port, st_config->u8_pin, STD_OUTPUT);
     414:	68 81       	ld	r22, Y
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
	
	// Check if there is an error from dio driver
	if(u8_dioRetVal)
     41e:	81 11       	cpse	r24, r1
     420:	0c c0       	rjmp	.+24     	; 0x43a <BUZZER_init+0x30>
		return u8_dioRetVal;
	
	// Store configuration locally
	st_gs_buzzerConfig.u8_port = st_config->u8_port;
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	e8 e0       	ldi	r30, 0x08	; 8
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	81 83       	std	Z+1, r24	; 0x01
	st_gs_buzzerConfig.u8_pin = st_config->u8_pin;
     42a:	88 81       	ld	r24, Y
     42c:	80 83       	st	Z, r24
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <u8_gs_buzzerState>
	
	return BUZZER_E_OK;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	01 c0       	rjmp	.+2      	; 0x43a <BUZZER_init+0x30>

u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
		return BUZZER_E_NOT_OK;
     438:	86 e0       	ldi	r24, 0x06	; 6
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
	
	return BUZZER_E_OK;
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <BUZZER_start>:
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
     440:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u8_gs_buzzerState>
     444:	88 23       	and	r24, r24
     446:	49 f0       	breq	.+18     	; 0x45a <BUZZER_start+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
     448:	e8 e0       	ldi	r30, 0x08	; 8
     44a:	f1 e0       	ldi	r31, 0x01	; 1
     44c:	60 81       	ld	r22, Z
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	81 81       	ldd	r24, Z+1	; 0x01
     452:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	
	return BUZZER_E_OK;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
     45a:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
	
	return BUZZER_E_OK;
}
     45c:	08 95       	ret

0000045e <BUZZER_stop>:
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
     45e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u8_gs_buzzerState>
     462:	88 23       	and	r24, r24
     464:	49 f0       	breq	.+18     	; 0x478 <BUZZER_stop+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
     466:	e8 e0       	ldi	r30, 0x08	; 8
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	60 81       	ld	r22, Z
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	81 81       	ldd	r24, Z+1	; 0x01
     470:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	
	return BUZZER_E_OK;
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
     478:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
	
	return BUZZER_E_OK;
     47a:	08 95       	ret

0000047c <KEYPAD_init>:
#define F_CPU 1000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
     480:	00 97       	sbiw	r24, 0x00	; 0
     482:	a9 f1       	breq	.+106    	; 0x4ee <KEYPAD_init+0x72>
     484:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
     486:	69 81       	ldd	r22, Y+1	; 0x01
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	88 81       	ld	r24, Y
     48c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
     490:	6b 81       	ldd	r22, Y+3	; 0x03
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	8a 81       	ldd	r24, Y+2	; 0x02
     496:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
     49a:	6d 81       	ldd	r22, Y+5	; 0x05
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	8c 81       	ldd	r24, Y+4	; 0x04
     4a0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
     4a4:	69 81       	ldd	r22, Y+1	; 0x01
     4a6:	41 e0       	ldi	r20, 0x01	; 1
     4a8:	88 81       	ld	r24, Y
     4aa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
     4ae:	6b 81       	ldd	r22, Y+3	; 0x03
     4b0:	41 e0       	ldi	r20, 0x01	; 1
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
     4b8:	6d 81       	ldd	r22, Y+5	; 0x05
     4ba:	41 e0       	ldi	r20, 0x01	; 1
     4bc:	8c 81       	ldd	r24, Y+4	; 0x04
     4be:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
     4c2:	6f 81       	ldd	r22, Y+7	; 0x07
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	8e 81       	ldd	r24, Y+6	; 0x06
     4c8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
     4cc:	69 85       	ldd	r22, Y+9	; 0x09
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	88 85       	ldd	r24, Y+8	; 0x08
     4d2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
     4d6:	6b 85       	ldd	r22, Y+11	; 0x0b
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	8a 85       	ldd	r24, Y+10	; 0x0a
     4dc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
     4e0:	6d 85       	ldd	r22, Y+13	; 0x0d
     4e2:	41 e0       	ldi	r20, 0x01	; 1
     4e4:	8c 85       	ldd	r24, Y+12	; 0x0c
     4e6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
     4ee:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	1f 92       	push	r1
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
     50c:	0a e2       	ldi	r16, 0x2A	; 42
     50e:	11 e0       	ldi	r17, 0x01	; 1
     510:	f8 01       	movw	r30, r16
     512:	67 81       	ldd	r22, Z+7	; 0x07
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	86 81       	ldd	r24, Z+6	; 0x06
     518:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
     51c:	f8 01       	movw	r30, r16
     51e:	61 85       	ldd	r22, Z+9	; 0x09
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	80 85       	ldd	r24, Z+8	; 0x08
     524:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
     528:	f8 01       	movw	r30, r16
     52a:	63 85       	ldd	r22, Z+11	; 0x0b
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	82 85       	ldd	r24, Z+10	; 0x0a
     530:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
     534:	f8 01       	movw	r30, r16
     536:	65 85       	ldd	r22, Z+13	; 0x0d
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	84 85       	ldd	r24, Z+12	; 0x0c
     53c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
     540:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
     542:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     544:	42 c0       	rjmp	.+132    	; 0x5ca <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
     546:	ea e2       	ldi	r30, 0x2A	; 42
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	67 81       	ldd	r22, Z+7	; 0x07
     54c:	60 0f       	add	r22, r16
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	86 81       	ldd	r24, Z+6	; 0x06
     552:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		for(j=0;j<3;j++)
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	2d c0       	rjmp	.+90     	; 0x5b4 <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     55a:	ea e2       	ldi	r30, 0x2A	; 42
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	61 81       	ldd	r22, Z+1	; 0x01
     560:	61 0f       	add	r22, r17
     562:	ae 01       	movw	r20, r28
     564:	4f 5f       	subi	r20, 0xFF	; 255
     566:	5f 4f       	sbci	r21, 0xFF	; 255
     568:	80 81       	ld	r24, Z
     56a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_readPIN>
			if(value==0)
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	81 11       	cpse	r24, r1
     572:	1f c0       	rjmp	.+62     	; 0x5b2 <KEYPAD_read+0xbc>
     574:	0a c0       	rjmp	.+20     	; 0x58a <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
     576:	ea e2       	ldi	r30, 0x2A	; 42
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	61 81       	ldd	r22, Z+1	; 0x01
     57c:	61 0f       	add	r22, r17
     57e:	ae 01       	movw	r20, r28
     580:	4f 5f       	subi	r20, 0xFF	; 255
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	80 81       	ld	r24, Z
     586:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	88 23       	and	r24, r24
     58e:	99 f3       	breq	.-26     	; 0x576 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
     590:	80 2f       	mov	r24, r16
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	e8 0f       	add	r30, r24
     59c:	f9 1f       	adc	r31, r25
     59e:	e5 51       	subi	r30, 0x15	; 21
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	e1 0f       	add	r30, r17
     5a4:	f1 1d       	adc	r31, r1
     5a6:	80 81       	ld	r24, Z
     5a8:	f7 01       	movw	r30, r14
     5aa:	80 83       	st	Z, r24
				flag=1;
     5ac:	dd 24       	eor	r13, r13
     5ae:	d3 94       	inc	r13
				
				break;
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
     5b2:	1f 5f       	subi	r17, 0xFF	; 255
     5b4:	13 30       	cpi	r17, 0x03	; 3
     5b6:	88 f2       	brcs	.-94     	; 0x55a <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
     5b8:	ea e2       	ldi	r30, 0x2A	; 42
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
     5bc:	67 81       	ldd	r22, Z+7	; 0x07
     5be:	60 0f       	add	r22, r16
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	86 81       	ldd	r24, Z+6	; 0x06
     5c4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
     5c8:	0f 5f       	subi	r16, 0xFF	; 255
     5ca:	04 30       	cpi	r16, 0x04	; 4
     5cc:	08 f4       	brcc	.+2      	; 0x5d0 <KEYPAD_read+0xda>
     5ce:	bb cf       	rjmp	.-138    	; 0x546 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	df 16       	cp	r13, r31
     5d4:	19 f0       	breq	.+6      	; 0x5dc <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
     5d6:	8e e4       	ldi	r24, 0x4E	; 78
     5d8:	f7 01       	movw	r30, r14
     5da:	80 83       	st	Z, r24
		return ret_val;
	}
	
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	08 95       	ret

000005f0 <ENABLE>:
	{
		//do nothing
	}
}
void ENABLE(void)
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
	
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_HIGH);
     5f4:	c3 e1       	ldi	r28, 0x13	; 19
     5f6:	d1 e0       	ldi	r29, 0x01	; 1
     5f8:	6e 89       	ldd	r22, Y+22	; 0x16
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	8d 89       	ldd	r24, Y+21	; 0x15
     5fe:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	8a 95       	dec	r24
     606:	f1 f7       	brne	.-4      	; 0x604 <ENABLE+0x14>
     608:	00 c0       	rjmp	.+0      	; 0x60a <ENABLE+0x1a>
	_delay_us(1);
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_LOW);
     60a:	6e 89       	ldd	r22, Y+22	; 0x16
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	8d 89       	ldd	r24, Y+21	; 0x15
     610:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	//_delay_us(1);

     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <LCD_cmd>:
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	ec 01       	movw	r28, r24
     622:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
     624:	6e 89       	ldd	r22, Y+22	; 0x16
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	8d 89       	ldd	r24, Y+21	; 0x15
     62a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_LOW);
     62e:	6a 89       	ldd	r22, Y+18	; 0x12
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	89 89       	ldd	r24, Y+17	; 0x11
     634:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
     638:	6c 89       	ldd	r22, Y+20	; 0x14
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	8b 89       	ldd	r24, Y+19	; 0x13
     63e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
     642:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mode>
     646:	81 11       	cpse	r24, r1
     648:	4a c0       	rjmp	.+148    	; 0x6de <LCD_cmd+0xc4>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
     64a:	68 89       	ldd	r22, Y+16	; 0x10
     64c:	41 2f       	mov	r20, r17
     64e:	44 1f       	adc	r20, r20
     650:	44 27       	eor	r20, r20
     652:	44 1f       	adc	r20, r20
     654:	8f 85       	ldd	r24, Y+15	; 0x0f
     656:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
     65a:	6e 85       	ldd	r22, Y+14	; 0x0e
     65c:	16 fb       	bst	r17, 6
     65e:	44 27       	eor	r20, r20
     660:	40 f9       	bld	r20, 0
     662:	8d 85       	ldd	r24, Y+13	; 0x0d
     664:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
     668:	6c 85       	ldd	r22, Y+12	; 0x0c
     66a:	15 fb       	bst	r17, 5
     66c:	44 27       	eor	r20, r20
     66e:	40 f9       	bld	r20, 0
     670:	8b 85       	ldd	r24, Y+11	; 0x0b
     672:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
     676:	6a 85       	ldd	r22, Y+10	; 0x0a
     678:	14 fb       	bst	r17, 4
     67a:	44 27       	eor	r20, r20
     67c:	40 f9       	bld	r20, 0
     67e:	89 85       	ldd	r24, Y+9	; 0x09
     680:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		ENABLE();
     684:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     688:	8f e6       	ldi	r24, 0x6F	; 111
     68a:	97 e1       	ldi	r25, 0x17	; 23
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <LCD_cmd+0x72>
     690:	00 c0       	rjmp	.+0      	; 0x692 <LCD_cmd+0x78>
     692:	00 00       	nop
		_delay_ms(3);
	    DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
     694:	68 89       	ldd	r22, Y+16	; 0x10
     696:	13 fb       	bst	r17, 3
     698:	44 27       	eor	r20, r20
     69a:	40 f9       	bld	r20, 0
     69c:	8f 85       	ldd	r24, Y+15	; 0x0f
     69e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
     6a2:	6e 85       	ldd	r22, Y+14	; 0x0e
     6a4:	12 fb       	bst	r17, 2
     6a6:	44 27       	eor	r20, r20
     6a8:	40 f9       	bld	r20, 0
     6aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ac:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
     6b0:	6c 85       	ldd	r22, Y+12	; 0x0c
     6b2:	11 fb       	bst	r17, 1
     6b4:	44 27       	eor	r20, r20
     6b6:	40 f9       	bld	r20, 0
     6b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ba:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
     6be:	6a 85       	ldd	r22, Y+10	; 0x0a
     6c0:	41 2f       	mov	r20, r17
     6c2:	41 70       	andi	r20, 0x01	; 1
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		ENABLE();
     6ca:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ENABLE>
     6ce:	8f e6       	ldi	r24, 0x6F	; 111
     6d0:	97 e1       	ldi	r25, 0x17	; 23
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <LCD_cmd+0xb8>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <LCD_cmd+0xbe>
     6d8:	00 00       	nop
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <LCD_cmd+0xce>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
		ENABLE();
		_delay_ms(3);
	}
	else if(mode==LCD_8_BIT_MODE)
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <LCD_cmd+0xcc>
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <LCD_cmd+0xce>
		
	}
	else
	{
		//do nothing
		ret_val=LCD_E_NOT_OK;
     6e6:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ret_val;
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	08 95       	ret

000006f0 <LCD_init>:
#include<util/delay.h>
extern st_lcdConfigType st_gs_lcdConfig;
static uint8_t mode;
static void ENABLE(void);
u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	ec 01       	movw	r28, r24
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=DIO_init(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_OUTPUT);
     6f8:	6a 89       	ldd	r22, Y+18	; 0x12
     6fa:	41 e0       	ldi	r20, 0x01	; 1
     6fc:	89 89       	ldd	r24, Y+17	; 0x11
     6fe:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     702:	18 2f       	mov	r17, r24
	ret_val |=DIO_init(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_OUTPUT);
     704:	6c 89       	ldd	r22, Y+20	; 0x14
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	8b 89       	ldd	r24, Y+19	; 0x13
     70a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     70e:	18 2b       	or	r17, r24
	ret_val |=DIO_init(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_OUTPUT);
     710:	6e 89       	ldd	r22, Y+22	; 0x16
     712:	41 e0       	ldi	r20, 0x01	; 1
     714:	8d 89       	ldd	r24, Y+21	; 0x15
     716:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     71a:	18 2b       	or	r17, r24
	switch(st_config->u8_mode)
     71c:	88 81       	ld	r24, Y
     71e:	88 23       	and	r24, r24
     720:	19 f0       	breq	.+6      	; 0x728 <LCD_init+0x38>
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	99 f1       	breq	.+102    	; 0x78c <LCD_init+0x9c>
     726:	77 c0       	rjmp	.+238    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		case LCD_4_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x02);
     728:	62 e0       	ldi	r22, 0x02	; 2
     72a:	83 e1       	ldi	r24, 0x13	; 19
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x28);
     732:	68 e2       	ldi	r22, 0x28	; 40
     734:	83 e1       	ldi	r24, 0x13	; 19
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
     73c:	6c e0       	ldi	r22, 0x0C	; 12
     73e:	83 e1       	ldi	r24, 0x13	; 19
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	83 e1       	ldi	r24, 0x13	; 19
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	83 e1       	ldi	r24, 0x13	; 19
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
     75a:	6a 85       	ldd	r22, Y+10	; 0x0a
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	89 85       	ldd	r24, Y+9	; 0x09
     760:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     764:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
     766:	6c 85       	ldd	r22, Y+12	; 0x0c
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	8b 85       	ldd	r24, Y+11	; 0x0b
     76c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     770:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
     772:	6e 85       	ldd	r22, Y+14	; 0x0e
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	8d 85       	ldd	r24, Y+13	; 0x0d
     778:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     77c:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
     77e:	68 89       	ldd	r22, Y+16	; 0x10
     780:	41 e0       	ldi	r20, 0x01	; 1
     782:	8f 85       	ldd	r24, Y+15	; 0x0f
     784:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     788:	81 2b       	or	r24, r17
								break;
     78a:	46 c0       	rjmp	.+140    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
								
	case LCD_8_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x38);
     78c:	68 e3       	ldi	r22, 0x38	; 56
     78e:	83 e1       	ldi	r24, 0x13	; 19
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
     796:	6c e0       	ldi	r22, 0x0C	; 12
     798:	83 e1       	ldi	r24, 0x13	; 19
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
     7a0:	66 e0       	ldi	r22, 0x06	; 6
     7a2:	83 e1       	ldi	r24, 0x13	; 19
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	83 e1       	ldi	r24, 0x13	; 19
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
		                        ret_val |=DIO_init(st_config->u8_d0Pin[0],st_config->u8_d0Pin[1],STD_OUTPUT);
     7b4:	6a 81       	ldd	r22, Y+2	; 0x02
     7b6:	41 e0       	ldi	r20, 0x01	; 1
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     7be:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d1Pin[0],st_config->u8_d1Pin[1],STD_OUTPUT);
     7c0:	6c 81       	ldd	r22, Y+4	; 0x04
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     7ca:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d2Pin[0],st_config->u8_d2Pin[1],STD_OUTPUT);
     7cc:	6e 81       	ldd	r22, Y+6	; 0x06
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     7d6:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d3Pin[0],st_config->u8_d3Pin[1],STD_OUTPUT);
     7d8:	68 85       	ldd	r22, Y+8	; 0x08
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	8f 81       	ldd	r24, Y+7	; 0x07
     7de:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     7e2:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
     7e4:	6a 85       	ldd	r22, Y+10	; 0x0a
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	89 85       	ldd	r24, Y+9	; 0x09
     7ea:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     7ee:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
     7f0:	6c 85       	ldd	r22, Y+12	; 0x0c
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     7f6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     7fa:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
     7fc:	6e 85       	ldd	r22, Y+14	; 0x0e
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	8d 85       	ldd	r24, Y+13	; 0x0d
     802:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     806:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
     808:	68 89       	ldd	r22, Y+16	; 0x10
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	8f 85       	ldd	r24, Y+15	; 0x0f
     80e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
     812:	81 2b       	or	r24, r17
								break;
     814:	01 c0       	rjmp	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	default: ret_val=LCD_E_NOT_OK;
     816:	85 e0       	ldi	r24, 0x05	; 5
				break;
								
	}
	mode=st_config->u8_mode;
     818:	98 81       	ld	r25, Y
     81a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <mode>
	return ret_val;
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	08 95       	ret

00000826 <LCD_clear>:
u8_en_lcdErrorsType LCD_clear (void)
{

	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=LCD_cmd(&st_gs_lcdConfig,0x01);
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	83 e1       	ldi	r24, 0x13	; 19
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	return ret_val;

}
     830:	08 95       	ret

00000832 <LCD_setCursor>:
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	switch(u8_row)
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	19 f0       	breq	.+6      	; 0x83c <LCD_setCursor+0xa>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	41 f0       	breq	.+16     	; 0x84a <LCD_setCursor+0x18>
     83a:	0e c0       	rjmp	.+28     	; 0x858 <LCD_setCursor+0x26>
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
     83c:	61 58       	subi	r22, 0x81	; 129
     83e:	83 e1       	ldi	r24, 0x13	; 19
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     846:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
     848:	08 95       	ret
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
     84a:	61 54       	subi	r22, 0x41	; 65
     84c:	83 e1       	ldi	r24, 0x13	; 19
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     854:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
     856:	08 95       	ret
		default:ret_val=LCD_E_NOT_OK;break;
     858:	85 e0       	ldi	r24, 0x05	; 5
	}

	return ret_val;

}
     85a:	08 95       	ret

0000085c <LCD_char>:
		ret_val=LCD_E_NOT_OK;
	}
	return ret_val;
}
  void LCD_char(st_lcdConfigType* st_config,uint8_t cmd)
{
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
     864:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
     866:	6e 89       	ldd	r22, Y+22	; 0x16
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	8d 89       	ldd	r24, Y+21	; 0x15
     86c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_HIGH);
     870:	6a 89       	ldd	r22, Y+18	; 0x12
     872:	41 e0       	ldi	r20, 0x01	; 1
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
     87a:	6c 89       	ldd	r22, Y+20	; 0x14
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	8b 89       	ldd	r24, Y+19	; 0x13
     880:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
     884:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mode>
     888:	81 11       	cpse	r24, r1
     88a:	48 c0       	rjmp	.+144    	; 0x91c <__stack+0xbd>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
     88c:	68 89       	ldd	r22, Y+16	; 0x10
     88e:	41 2f       	mov	r20, r17
     890:	44 1f       	adc	r20, r20
     892:	44 27       	eor	r20, r20
     894:	44 1f       	adc	r20, r20
     896:	8f 85       	ldd	r24, Y+15	; 0x0f
     898:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
     89c:	6e 85       	ldd	r22, Y+14	; 0x0e
     89e:	16 fb       	bst	r17, 6
     8a0:	44 27       	eor	r20, r20
     8a2:	40 f9       	bld	r20, 0
     8a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
     8aa:	6c 85       	ldd	r22, Y+12	; 0x0c
     8ac:	15 fb       	bst	r17, 5
     8ae:	44 27       	eor	r20, r20
     8b0:	40 f9       	bld	r20, 0
     8b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
     8b8:	6a 85       	ldd	r22, Y+10	; 0x0a
     8ba:	14 fb       	bst	r17, 4
     8bc:	44 27       	eor	r20, r20
     8be:	40 f9       	bld	r20, 0
     8c0:	89 85       	ldd	r24, Y+9	; 0x09
     8c2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		ENABLE();
     8c6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ENABLE>
     8ca:	8f e6       	ldi	r24, 0x6F	; 111
     8cc:	97 e1       	ldi	r25, 0x17	; 23
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <__stack+0x6f>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <__stack+0x75>
     8d4:	00 00       	nop
		_delay_ms(3);
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
     8d6:	68 89       	ldd	r22, Y+16	; 0x10
     8d8:	13 fb       	bst	r17, 3
     8da:	44 27       	eor	r20, r20
     8dc:	40 f9       	bld	r20, 0
     8de:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
     8e4:	6e 85       	ldd	r22, Y+14	; 0x0e
     8e6:	12 fb       	bst	r17, 2
     8e8:	44 27       	eor	r20, r20
     8ea:	40 f9       	bld	r20, 0
     8ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ee:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
     8f2:	6c 85       	ldd	r22, Y+12	; 0x0c
     8f4:	11 fb       	bst	r17, 1
     8f6:	44 27       	eor	r20, r20
     8f8:	40 f9       	bld	r20, 0
     8fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     8fc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
     900:	6a 85       	ldd	r22, Y+10	; 0x0a
     902:	41 2f       	mov	r20, r17
     904:	41 70       	andi	r20, 0x01	; 1
     906:	89 85       	ldd	r24, Y+9	; 0x09
     908:	0e 94 68 06 	call	0xcd0	; 0xcd0 <DIO_writePIN>
		ENABLE();
     90c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ENABLE>
     910:	8f e6       	ldi	r24, 0x6F	; 111
     912:	97 e1       	ldi	r25, 0x17	; 23
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <__stack+0xb5>
     918:	00 c0       	rjmp	.+0      	; 0x91a <__stack+0xbb>
     91a:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <LCD_writeString>:

	return ret_val;

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	if(u8_data==(void*)0)
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	81 f0       	breq	.+32     	; 0x94e <LCD_writeString+0x2a>
     92e:	8c 01       	movw	r16, r24
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	05 c0       	rjmp	.+10     	; 0x93e <LCD_writeString+0x1a>

	else
	{
		while(u8_data[i] !='\0')
		{
			LCD_char(&st_gs_lcdConfig,u8_data[i]);
     934:	83 e1       	ldi	r24, 0x13	; 19
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_char>
			i++;
     93c:	cf 5f       	subi	r28, 0xFF	; 255
		ret_val=LCD_E_NOT_OK;
	}

	else
	{
		while(u8_data[i] !='\0')
     93e:	f8 01       	movw	r30, r16
     940:	ec 0f       	add	r30, r28
     942:	f1 1d       	adc	r31, r1
     944:	60 81       	ld	r22, Z
     946:	61 11       	cpse	r22, r1
     948:	f5 cf       	rjmp	.-22     	; 0x934 <LCD_writeString+0x10>

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	01 c0       	rjmp	.+2      	; 0x950 <LCD_writeString+0x2c>
	if(u8_data==(void*)0)
	{
		ret_val=LCD_E_NOT_OK;
     94e:	85 e0       	ldi	r24, 0x05	; 5
		}
	}
	return ret_val;
	

}
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <LCD_writeSpChar>:
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	28 97       	sbiw	r28, 0x08	; 8
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
     96e:	98 e0       	ldi	r25, 0x08	; 8
     970:	e1 e6       	ldi	r30, 0x61	; 97
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	de 01       	movw	r26, r28
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	01 90       	ld	r0, Z+
     97a:	0d 92       	st	X+, r0
     97c:	9a 95       	dec	r25
     97e:	e1 f7       	brne	.-8      	; 0x978 <LCD_writeSpChar+0x20>
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
     980:	68 2f       	mov	r22, r24
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	68 5f       	subi	r22, 0xF8	; 248
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	66 0f       	add	r22, r22
     98a:	66 0f       	add	r22, r22
     98c:	66 0f       	add	r22, r22
     98e:	83 e1       	ldi	r24, 0x13	; 19
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	for(i=0;i<8;i++)
     996:	10 e0       	ldi	r17, 0x00	; 0
     998:	0c c0       	rjmp	.+24     	; 0x9b2 <LCD_writeSpChar+0x5a>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
     99a:	e1 e0       	ldi	r30, 0x01	; 1
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	ec 0f       	add	r30, r28
     9a0:	fd 1f       	adc	r31, r29
     9a2:	e1 0f       	add	r30, r17
     9a4:	f1 1d       	adc	r31, r1
     9a6:	60 81       	ld	r22, Z
     9a8:	83 e1       	ldi	r24, 0x13	; 19
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_char>
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
	for(i=0;i<8;i++)
     9b0:	1f 5f       	subi	r17, 0xFF	; 255
     9b2:	18 30       	cpi	r17, 0x08	; 8
     9b4:	90 f3       	brcs	.-28     	; 0x99a <LCD_writeSpChar+0x42>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
	}	
	
	LCD_cmd(&st_gs_lcdConfig,0xc0);
     9b6:	60 ec       	ldi	r22, 0xC0	; 192
     9b8:	83 e1       	ldi	r24, 0x13	; 19
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_cmd>
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
     9c0:	63 e0       	ldi	r22, 0x03	; 3
     9c2:	83 e1       	ldi	r24, 0x13	; 19
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 2e 04 	call	0x85c	; 0x85c <LCD_char>
	return ret_val;
}
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	28 96       	adiw	r28, 0x08	; 8
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	08 95       	ret

000009e0 <TEMP_SENSOR_init>:
static void get_Vref(u8_en_adcRefType u8_a_Vref);*/

static st_adcConfigType st_sg_adc;

u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	u8_en_dioErrors l_dio_ret = DIO_E_OK;
	
	if(NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER )
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	b9 f0       	breq	.+46     	; 0xa16 <TEMP_SENSOR_init+0x36>
     9e8:	fc 01       	movw	r30, r24
     9ea:	22 81       	ldd	r18, Z+2	; 0x02
     9ec:	28 30       	cpi	r18, 0x08	; 8
     9ee:	a8 f4       	brcc	.+42     	; 0xa1a <TEMP_SENSOR_init+0x3a>
     9f0:	21 81       	ldd	r18, Z+1	; 0x01
     9f2:	28 30       	cpi	r18, 0x08	; 8
     9f4:	a0 f4       	brcc	.+40     	; 0xa1e <TEMP_SENSOR_init+0x3e>
     9f6:	ec 01       	movw	r28, r24
	{
		l_TempSensor_ret = TEMP_E_NOT_OK;
	}
	else
	{
		st_sg_adc.u8_prescaler_selection = st_config->u8_prescaler_selection;
     9f8:	eb e0       	ldi	r30, 0x0B	; 11
     9fa:	f1 e0       	ldi	r31, 0x01	; 1
     9fc:	21 83       	std	Z+1, r18	; 0x01
		st_sg_adc.u8_ref_selection = st_config->u8_ref_selection;
     9fe:	88 81       	ld	r24, Y
     a00:	80 83       	st	Z, r24
		l_adc_ret = ADC_init(&st_sg_adc);
     a02:	cf 01       	movw	r24, r30
     a04:	0e 94 cf 05 	call	0xb9e	; 0xb9e <ADC_init>
		l_dio_ret = DIO_init(porta,st_config->u8_channel,STD_INPUT);
     a08:	6a 81       	ldd	r22, Y+2	; 0x02
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>

static st_adcConfigType st_sg_adc;

u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <TEMP_SENSOR_init+0x40>
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	u8_en_dioErrors l_dio_ret = DIO_E_OK;
	
	if(NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER )
	{
		l_TempSensor_ret = TEMP_E_NOT_OK;
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <TEMP_SENSOR_init+0x40>
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <TEMP_SENSOR_init+0x40>
     a1e:	88 e0       	ldi	r24, 0x08	; 8
		/*get_channel(st_config->u8_channel);
		get_Vref(st_config->u8_ref_selection);*/
				
	}
	return l_TempSensor_ret;
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <TEMP_SENSOR_read>:

u8_en_tempSensorErrorsType TEMP_SENSOR_read (st_tempSensorConfigType* st_config , uint8_t * u8_data)
{
     a26:	8f 92       	push	r8
     a28:	9f 92       	push	r9
     a2a:	af 92       	push	r10
     a2c:	bf 92       	push	r11
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <TEMP_SENSOR_read+0x14>
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	uint16_t f64_l_readTemp_ADC = 0;
     a3e:	1a 82       	std	Y+2, r1	; 0x02
     a40:	19 82       	std	Y+1, r1	; 0x01
	double f64_l_stepSize = 0.0;
	
	if(NULL== u8_data || NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER)
     a42:	61 15       	cp	r22, r1
     a44:	71 05       	cpc	r23, r1
     a46:	09 f4       	brne	.+2      	; 0xa4a <TEMP_SENSOR_read+0x24>
     a48:	5f c0       	rjmp	.+190    	; 0xb08 <TEMP_SENSOR_read+0xe2>
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	09 f4       	brne	.+2      	; 0xa50 <TEMP_SENSOR_read+0x2a>
     a4e:	5e c0       	rjmp	.+188    	; 0xb0c <TEMP_SENSOR_read+0xe6>
     a50:	fc 01       	movw	r30, r24
     a52:	22 81       	ldd	r18, Z+2	; 0x02
     a54:	28 30       	cpi	r18, 0x08	; 8
     a56:	08 f0       	brcs	.+2      	; 0xa5a <TEMP_SENSOR_read+0x34>
     a58:	5b c0       	rjmp	.+182    	; 0xb10 <TEMP_SENSOR_read+0xea>
     a5a:	31 81       	ldd	r19, Z+1	; 0x01
     a5c:	38 30       	cpi	r19, 0x08	; 8
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <TEMP_SENSOR_read+0x3c>
     a60:	59 c0       	rjmp	.+178    	; 0xb14 <TEMP_SENSOR_read+0xee>
     a62:	7b 01       	movw	r14, r22
     a64:	5c 01       	movw	r10, r24
		l_TempSensor_ret = TEMP_E_NOT_OK;
	}
	else
	{
		
		l_adc_ret = ADC_read(st_config->u8_channel,&f64_l_readTemp_ADC);
     a66:	be 01       	movw	r22, r28
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	82 2f       	mov	r24, r18
     a6e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <ADC_read>
     a72:	18 2f       	mov	r17, r24
		
		if(ADC_E_OK==l_adc_ret)
     a74:	81 11       	cpse	r24, r1
     a76:	0a c0       	rjmp	.+20     	; 0xa8c <TEMP_SENSOR_read+0x66>
		{
			if( ADC_INTERNAL_2_56V_REF == st_config->u8_ref_selection)
     a78:	f5 01       	movw	r30, r10
     a7a:	80 81       	ld	r24, Z
     a7c:	83 30       	cpi	r24, 0x03	; 3
     a7e:	51 f0       	breq	.+20     	; 0xa94 <TEMP_SENSOR_read+0x6e>
			{
				f64_l_stepSize = ( INTERNAL_VOLTAGE /ADC_MAX_RESOLUTION);
			}
			else if(ADC_AVCC == st_config->u8_ref_selection)
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	99 f0       	breq	.+38     	; 0xaaa <TEMP_SENSOR_read+0x84>
u8_en_tempSensorErrorsType TEMP_SENSOR_read (st_tempSensorConfigType* st_config , uint8_t * u8_data)
{
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	uint16_t f64_l_readTemp_ADC = 0;
	double f64_l_stepSize = 0.0;
     a84:	81 2c       	mov	r8, r1
     a86:	91 2c       	mov	r9, r1
     a88:	54 01       	movw	r10, r8
     a8a:	17 c0       	rjmp	.+46     	; 0xaba <TEMP_SENSOR_read+0x94>
     a8c:	81 2c       	mov	r8, r1
     a8e:	91 2c       	mov	r9, r1
     a90:	54 01       	movw	r10, r8
     a92:	13 c0       	rjmp	.+38     	; 0xaba <TEMP_SENSOR_read+0x94>
		
		if(ADC_E_OK==l_adc_ret)
		{
			if( ADC_INTERNAL_2_56V_REF == st_config->u8_ref_selection)
			{
				f64_l_stepSize = ( INTERNAL_VOLTAGE /ADC_MAX_RESOLUTION);
     a94:	0f 2e       	mov	r0, r31
     a96:	fa e0       	ldi	r31, 0x0A	; 10
     a98:	8f 2e       	mov	r8, r31
     a9a:	f7 ed       	ldi	r31, 0xD7	; 215
     a9c:	9f 2e       	mov	r9, r31
     a9e:	f3 e2       	ldi	r31, 0x23	; 35
     aa0:	af 2e       	mov	r10, r31
     aa2:	fb e3       	ldi	r31, 0x3B	; 59
     aa4:	bf 2e       	mov	r11, r31
     aa6:	f0 2d       	mov	r31, r0
     aa8:	08 c0       	rjmp	.+16     	; 0xaba <TEMP_SENSOR_read+0x94>
			}
			else if(ADC_AVCC == st_config->u8_ref_selection)
			{
				f64_l_stepSize = ( AVCC_VOLTAGE /ADC_MAX_RESOLUTION);
     aaa:	0f 2e       	mov	r0, r31
     aac:	81 2c       	mov	r8, r1
     aae:	91 2c       	mov	r9, r1
     ab0:	f0 ea       	ldi	r31, 0xA0	; 160
     ab2:	af 2e       	mov	r10, r31
     ab4:	fb e3       	ldi	r31, 0x3B	; 59
     ab6:	bf 2e       	mov	r11, r31
     ab8:	f0 2d       	mov	r31, r0
		{
			l_TempSensor_ret = l_adc_ret;
		}
		
		/*get the ADC digital value in analog voltage(DAC) then in temperature degree*/
		if((((double)f64_l_readTemp_ADC )* f64_l_stepSize * VOLTAGE_TO_CELSUIS_FACTOR) >= MAX_TEMPERATURE_SENSOR_VALUE)
     aba:	69 81       	ldd	r22, Y+1	; 0x01
     abc:	7a 81       	ldd	r23, Y+2	; 0x02
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__floatunsisf>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	c5 01       	movw	r24, r10
     acc:	b4 01       	movw	r22, r8
     ace:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__mulsf3>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	48 ec       	ldi	r20, 0xC8	; 200
     ad8:	52 e4       	ldi	r21, 0x42	; 66
     ada:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__mulsf3>
     ade:	4b 01       	movw	r8, r22
     ae0:	5c 01       	movw	r10, r24
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	46 ec       	ldi	r20, 0xC6	; 198
     ae8:	52 e4       	ldi	r21, 0x42	; 66
     aea:	0e 94 4d 09 	call	0x129a	; 0x129a <__gesf2>
     aee:	88 23       	and	r24, r24
     af0:	24 f0       	brlt	.+8      	; 0xafa <TEMP_SENSOR_read+0xd4>
		{
			// if temperature more than maximum ,will saturate at maximum possible temperature the sensor can measure 
			*u8_data = MAX_TEMPERATURE_SENSOR_VALUE ;
     af2:	83 e6       	ldi	r24, 0x63	; 99
     af4:	f7 01       	movw	r30, r14
     af6:	80 83       	st	Z, r24
     af8:	0e c0       	rjmp	.+28     	; 0xb16 <TEMP_SENSOR_read+0xf0>
		}
		else
		{
			*u8_data = (uint8_t)(((double)f64_l_readTemp_ADC) * f64_l_stepSize * VOLTAGE_TO_CELSUIS_FACTOR);
     afa:	c5 01       	movw	r24, r10
     afc:	b4 01       	movw	r22, r8
     afe:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fixunssfsi>
     b02:	f7 01       	movw	r30, r14
     b04:	60 83       	st	Z, r22
     b06:	07 c0       	rjmp	.+14     	; 0xb16 <TEMP_SENSOR_read+0xf0>
	uint16_t f64_l_readTemp_ADC = 0;
	double f64_l_stepSize = 0.0;
	
	if(NULL== u8_data || NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER)
	{
		l_TempSensor_ret = TEMP_E_NOT_OK;
     b08:	18 e0       	ldi	r17, 0x08	; 8
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <TEMP_SENSOR_read+0xf0>
     b0c:	18 e0       	ldi	r17, 0x08	; 8
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <TEMP_SENSOR_read+0xf0>
     b10:	18 e0       	ldi	r17, 0x08	; 8
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <TEMP_SENSOR_read+0xf0>
     b14:	18 e0       	ldi	r17, 0x08	; 8
			*u8_data = (uint8_t)(((double)f64_l_readTemp_ADC) * f64_l_stepSize * VOLTAGE_TO_CELSUIS_FACTOR);
		}
		
	}
	return l_TempSensor_ret;
}
     b16:	81 2f       	mov	r24, r17
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	08 95       	ret

00000b30 <TIMER_Manager_init>:
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	91 f0       	breq	.+36     	; 0xb5e <TIMER_Manager_init+0x2e>
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 81       	ld	r18, Z
     b3e:	23 30       	cpi	r18, 0x03	; 3
     b40:	80 f4       	brcc	.+32     	; 0xb62 <TIMER_Manager_init+0x32>
     b42:	21 81       	ldd	r18, Z+1	; 0x01
     b44:	2a 30       	cpi	r18, 0x0A	; 10
     b46:	78 f4       	brcc	.+30     	; 0xb66 <TIMER_Manager_init+0x36>
     b48:	ec 01       	movw	r28, r24
     b4a:	0e 94 de 07 	call	0xfbc	; 0xfbc <TIMER_init>
     b4e:	18 2f       	mov	r17, r24
     b50:	68 81       	ld	r22, Y
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	0e 94 96 08 	call	0x112c	; 0x112c <TIMER_setCallBack>
     b5a:	81 2b       	or	r24, r17
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <TIMER_Manager_init+0x38>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <TIMER_Manager_init+0x38>
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <TIMER_Manager_init+0x38>
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	08 95       	ret

00000b70 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	51 f0       	breq	.+20     	; 0xb88 <TIMER_Manager_reset+0x18>
     b74:	fc 01       	movw	r30, r24
     b76:	20 81       	ld	r18, Z
     b78:	23 30       	cpi	r18, 0x03	; 3
     b7a:	40 f4       	brcc	.+16     	; 0xb8c <TIMER_Manager_reset+0x1c>
     b7c:	21 81       	ldd	r18, Z+1	; 0x01
     b7e:	2a 30       	cpi	r18, 0x0A	; 10
     b80:	38 f4       	brcc	.+14     	; 0xb90 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
     b82:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TIMER_reset>
     b86:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	08 95       	ret
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	08 95       	ret
     b90:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
     b92:	08 95       	ret

00000b94 <main>:

#include "APP/app.h"
#include "MCAL/adc/adc.h"
int main(void)
{
	APP_start();
     b94:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <APP_start>
}
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	08 95       	ret

00000b9e <ADC_init>:

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(st_config == NULL){
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	99 f0       	breq	.+38     	; 0xbc8 <ADC_init+0x2a>
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
     ba2:	fc 01       	movw	r30, r24
     ba4:	21 81       	ldd	r18, Z+1	; 0x01
     ba6:	20 68       	ori	r18, 0x80	; 128
     ba8:	26 b9       	out	0x06, r18	; 6
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
     baa:	80 81       	ld	r24, Z
     bac:	82 95       	swap	r24
     bae:	88 0f       	add	r24, r24
     bb0:	88 0f       	add	r24, r24
     bb2:	80 7c       	andi	r24, 0xC0	; 192
     bb4:	87 b9       	out	0x07, r24	; 7
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <ADC_init+0x20>
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	8a 30       	cpi	r24, 0x0A	; 10
     bc0:	91 05       	cpc	r25, r1
     bc2:	e4 f3       	brlt	.-8      	; 0xbbc <ADC_init+0x1e>
#include "adc.h"

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 95       	ret
	if(st_config == NULL){
		ret = ADC_E_NOT_OK;
     bc8:	84 e0       	ldi	r24, 0x04	; 4
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
		
	}
	return ret;
	
}
     bca:	08 95       	ret

00000bcc <ADC_read>:
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, uint16_t * u16_data)
{
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
     bd2:	88 30       	cpi	r24, 0x08	; 8
     bd4:	e0 f5       	brcc	.+120    	; 0xc4e <ADC_read+0x82>
     bd6:	61 15       	cp	r22, r1
     bd8:	71 05       	cpc	r23, r1
     bda:	d9 f1       	breq	.+118    	; 0xc52 <ADC_read+0x86>
     bdc:	8b 01       	movw	r16, r22
     bde:	c8 2f       	mov	r28, r24
		ret =	ADC_E_NOT_OK;
	}
	else{
		if(((DDRA & (1U<<u8_channelID))>>u8_channelID) != 0)
     be0:	4a b3       	in	r20, 0x1a	; 26
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9c 01       	movw	r18, r24
     be8:	0c 2e       	mov	r0, r28
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <ADC_read+0x24>
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <ADC_read+0x20>
     bf4:	84 2f       	mov	r24, r20
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	82 23       	and	r24, r18
     bfa:	93 23       	and	r25, r19
     bfc:	0c 2e       	mov	r0, r28
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <ADC_read+0x38>
     c00:	96 95       	lsr	r25
     c02:	87 95       	ror	r24
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <ADC_read+0x34>
     c08:	89 2b       	or	r24, r25
     c0a:	29 f0       	breq	.+10     	; 0xc16 <ADC_read+0x4a>
		{
			DIO_init (porta, u8_channelID, STD_INPUT);
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	6c 2f       	mov	r22, r28
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_init>
		}
		
		while(READ_BIT(ADCSRA_ADD, ADC_START_CONVERSION) == 1);
     c16:	36 99       	sbic	0x06, 6	; 6
     c18:	fe cf       	rjmp	.-4      	; 0xc16 <ADC_read+0x4a>
		
		ADMUX_ADD  = (0xf8 & ADMUX_ADD) | u8_channelID;
     c1a:	87 b1       	in	r24, 0x07	; 7
     c1c:	88 7f       	andi	r24, 0xF8	; 248
     c1e:	8c 2b       	or	r24, r28
     c20:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADCSRA_ADD, ADC_START_CONVERSION);
     c22:	86 b1       	in	r24, 0x06	; 6
     c24:	80 64       	ori	r24, 0x40	; 64
     c26:	86 b9       	out	0x06, r24	; 6
     c28:	8f e1       	ldi	r24, 0x1F	; 31
     c2a:	9e e4       	ldi	r25, 0x4E	; 78
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <ADC_read+0x60>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <ADC_read+0x66>
     c32:	00 00       	nop
		_delay_ms(10);
		while(READ_BIT(ADCSRA_ADD, ADC_INT_FLAG) == 0);
     c34:	34 9b       	sbis	0x06, 4	; 6
     c36:	fe cf       	rjmp	.-4      	; 0xc34 <ADC_read+0x68>
		uint16_t	adc_data_temp=0;	
		adc_data_temp = ADCL_ADD;
     c38:	24 b1       	in	r18, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
     c3a:	85 b1       	in	r24, 0x05	; 5
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	98 2f       	mov	r25, r24
     c40:	88 27       	eor	r24, r24
     c42:	82 2b       	or	r24, r18
		*u16_data  = adc_data_temp;
     c44:	f8 01       	movw	r30, r16
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	80 83       	st	Z, r24
	return ret;
	
}
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, uint16_t * u16_data)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <ADC_read+0x88>
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
		ret =	ADC_E_NOT_OK;
     c4e:	84 e0       	ldi	r24, 0x04	; 4
     c50:	01 c0       	rjmp	.+2      	; 0xc54 <ADC_read+0x88>
     c52:	84 e0       	ldi	r24, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
		*u16_data  = adc_data_temp;
	}
	
	return ret;
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     c5c:	68 30       	cpi	r22, 0x08	; 8
     c5e:	a0 f5       	brcc	.+104    	; 0xcc8 <DIO_init+0x6c>
	{
		if (port == porta)
     c60:	81 11       	cpse	r24, r1
     c62:	0b c0       	rjmp	.+22     	; 0xc7a <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     c64:	8a b3       	in	r24, 0x1a	; 26
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_init+0x12>
     c6a:	44 0f       	add	r20, r20
     c6c:	55 1f       	adc	r21, r21
     c6e:	6a 95       	dec	r22
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_init+0xe>
     c72:	48 2b       	or	r20, r24
     c74:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	08 95       	ret
		}
		else if (port == portb)
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	59 f4       	brne	.+22     	; 0xc94 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     c7e:	87 b3       	in	r24, 0x17	; 23
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_init+0x2c>
     c84:	44 0f       	add	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <DIO_init+0x28>
     c8c:	48 2b       	or	r20, r24
     c8e:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	08 95       	ret
		}
		else if (port == portc)
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	59 f4       	brne	.+22     	; 0xcae <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     c98:	84 b3       	in	r24, 0x14	; 20
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_init+0x46>
     c9e:	44 0f       	add	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_init+0x42>
     ca6:	48 2b       	or	r20, r24
     ca8:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	08 95       	ret
		}
		else if (port == portd)
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	69 f4       	brne	.+26     	; 0xccc <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     cb2:	81 b3       	in	r24, 0x11	; 17
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_init+0x60>
     cb8:	44 0f       	add	r20, r20
     cba:	55 1f       	adc	r21, r21
     cbc:	6a 95       	dec	r22
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_init+0x5c>
     cc0:	48 2b       	or	r20, r24
     cc2:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     ccc:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     cce:	08 95       	ret

00000cd0 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     cd0:	68 30       	cpi	r22, 0x08	; 8
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <DIO_writePIN+0x6>
     cd4:	74 c0       	rjmp	.+232    	; 0xdbe <DIO_writePIN+0xee>
	{
		if (port == porta)
     cd6:	81 11       	cpse	r24, r1
     cd8:	1b c0       	rjmp	.+54     	; 0xd10 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     cda:	41 30       	cpi	r20, 0x01	; 1
     cdc:	61 f4       	brne	.+24     	; 0xcf6 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     cde:	2b b3       	in	r18, 0x1b	; 27
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_writePIN+0x1a>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	6a 95       	dec	r22
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_writePIN+0x16>
     cee:	82 2b       	or	r24, r18
     cf0:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     cf6:	2b b3       	in	r18, 0x1b	; 27
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_writePIN+0x32>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	6a 95       	dec	r22
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_writePIN+0x2e>
     d06:	80 95       	com	r24
     d08:	82 23       	and	r24, r18
     d0a:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	08 95       	ret
		}
		else if (port == portb)
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	d9 f4       	brne	.+54     	; 0xd4a <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     d14:	41 30       	cpi	r20, 0x01	; 1
     d16:	61 f4       	brne	.+24     	; 0xd30 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     d18:	28 b3       	in	r18, 0x18	; 24
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_writePIN+0x54>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	6a 95       	dec	r22
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_writePIN+0x50>
     d28:	82 2b       	or	r24, r18
     d2a:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     d30:	28 b3       	in	r18, 0x18	; 24
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_writePIN+0x6c>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	6a 95       	dec	r22
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_writePIN+0x68>
     d40:	80 95       	com	r24
     d42:	82 23       	and	r24, r18
     d44:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	08 95       	ret
		}
		else if (port == portc)
     d4a:	82 30       	cpi	r24, 0x02	; 2
     d4c:	d9 f4       	brne	.+54     	; 0xd84 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     d4e:	41 30       	cpi	r20, 0x01	; 1
     d50:	61 f4       	brne	.+24     	; 0xd6a <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     d52:	25 b3       	in	r18, 0x15	; 21
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_writePIN+0x8e>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	6a 95       	dec	r22
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_writePIN+0x8a>
     d62:	82 2b       	or	r24, r18
     d64:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     d6a:	25 b3       	in	r18, 0x15	; 21
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_writePIN+0xa6>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	6a 95       	dec	r22
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_writePIN+0xa2>
     d7a:	80 95       	com	r24
     d7c:	82 23       	and	r24, r18
     d7e:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	08 95       	ret
		}
		else if (port == portd)
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	e9 f4       	brne	.+58     	; 0xdc2 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     d88:	41 30       	cpi	r20, 0x01	; 1
     d8a:	61 f4       	brne	.+24     	; 0xda4 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     d8c:	22 b3       	in	r18, 0x12	; 18
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_writePIN+0xc8>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	6a 95       	dec	r22
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_writePIN+0xc4>
     d9c:	82 2b       	or	r24, r18
     d9e:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     da4:	22 b3       	in	r18, 0x12	; 18
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_writePIN+0xe0>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	6a 95       	dec	r22
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_writePIN+0xdc>
     db4:	80 95       	com	r24
     db6:	82 23       	and	r24, r18
     db8:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     dc2:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     dc4:	08 95       	ret

00000dc6 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     dc6:	68 30       	cpi	r22, 0x08	; 8
     dc8:	08 f0       	brcs	.+2      	; 0xdcc <DIO_readPIN+0x6>
     dca:	64 c0       	rjmp	.+200    	; 0xe94 <DIO_readPIN+0xce>
	{
		if (port == porta)
     dcc:	81 11       	cpse	r24, r1
     dce:	17 c0       	rjmp	.+46     	; 0xdfe <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     dd0:	79 b3       	in	r23, 0x19	; 25
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9c 01       	movw	r18, r24
     dd8:	06 2e       	mov	r0, r22
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_readPIN+0x1a>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_readPIN+0x16>
     de4:	87 2f       	mov	r24, r23
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	82 23       	and	r24, r18
     dea:	93 23       	and	r25, r19
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_readPIN+0x2c>
     dee:	96 95       	lsr	r25
     df0:	87 95       	ror	r24
     df2:	6a 95       	dec	r22
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_readPIN+0x28>
     df6:	fa 01       	movw	r30, r20
     df8:	80 83       	st	Z, r24
			return DIO_E_OK;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	08 95       	ret
		}
		else if (port == portb)
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	b9 f4       	brne	.+46     	; 0xe30 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     e02:	76 b3       	in	r23, 0x16	; 22
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9c 01       	movw	r18, r24
     e0a:	06 2e       	mov	r0, r22
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_readPIN+0x4c>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_readPIN+0x48>
     e16:	87 2f       	mov	r24, r23
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	82 23       	and	r24, r18
     e1c:	93 23       	and	r25, r19
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_readPIN+0x5e>
     e20:	96 95       	lsr	r25
     e22:	87 95       	ror	r24
     e24:	6a 95       	dec	r22
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_readPIN+0x5a>
     e28:	fa 01       	movw	r30, r20
     e2a:	80 83       	st	Z, r24
			return DIO_E_OK;
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	08 95       	ret
		}
		else if (port == portc)
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	b9 f4       	brne	.+46     	; 0xe62 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     e34:	73 b3       	in	r23, 0x13	; 19
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9c 01       	movw	r18, r24
     e3c:	06 2e       	mov	r0, r22
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_readPIN+0x7e>
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_readPIN+0x7a>
     e48:	87 2f       	mov	r24, r23
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	82 23       	and	r24, r18
     e4e:	93 23       	and	r25, r19
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_readPIN+0x90>
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	6a 95       	dec	r22
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_readPIN+0x8c>
     e5a:	fa 01       	movw	r30, r20
     e5c:	80 83       	st	Z, r24
			return DIO_E_OK;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret
		}
		else if (port == portd)
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	c9 f4       	brne	.+50     	; 0xe98 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     e66:	70 b3       	in	r23, 0x10	; 16
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9c 01       	movw	r18, r24
     e6e:	06 2e       	mov	r0, r22
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_readPIN+0xb0>
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_readPIN+0xac>
     e7a:	87 2f       	mov	r24, r23
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	82 23       	and	r24, r18
     e80:	93 23       	and	r25, r19
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_readPIN+0xc2>
     e84:	96 95       	lsr	r25
     e86:	87 95       	ror	r24
     e88:	6a 95       	dec	r22
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_readPIN+0xbe>
     e8c:	fa 01       	movw	r30, r20
     e8e:	80 83       	st	Z, r24
			return DIO_E_OK;
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     e98:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     e9a:	08 95       	ret

00000e9c <__vector_11>:
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	2f 93       	push	r18
     ea8:	3f 93       	push	r19
     eaa:	4f 93       	push	r20
     eac:	5f 93       	push	r21
     eae:	6f 93       	push	r22
     eb0:	7f 93       	push	r23
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
     eb6:	af 93       	push	r26
     eb8:	bf 93       	push	r27
     eba:	ef 93       	push	r30
     ebc:	ff 93       	push	r31
     ebe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sg_Timer0_callBackPtr>
     ec2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sg_Timer0_callBackPtr+0x1>
     ec6:	89 2b       	or	r24, r25
     ec8:	41 f0       	breq	.+16     	; 0xeda <__vector_11+0x3e>
     eca:	88 b7       	in	r24, 0x38	; 56
     ecc:	8e 7f       	andi	r24, 0xFE	; 254
     ece:	88 bf       	out	0x38, r24	; 56
     ed0:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <sg_Timer0_callBackPtr>
     ed4:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <sg_Timer0_callBackPtr+0x1>
     ed8:	09 95       	icall
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_9>:
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sg_Timer1_callBackPtr>
     f22:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <sg_Timer1_callBackPtr+0x1>
     f26:	89 2b       	or	r24, r25
     f28:	41 f0       	breq	.+16     	; 0xf3a <__vector_9+0x3e>
     f2a:	88 b7       	in	r24, 0x38	; 56
     f2c:	8b 7f       	andi	r24, 0xFB	; 251
     f2e:	88 bf       	out	0x38, r24	; 56
     f30:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <sg_Timer1_callBackPtr>
     f34:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <sg_Timer1_callBackPtr+0x1>
     f38:	09 95       	icall
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_5>:
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	2f 93       	push	r18
     f68:	3f 93       	push	r19
     f6a:	4f 93       	push	r20
     f6c:	5f 93       	push	r21
     f6e:	6f 93       	push	r22
     f70:	7f 93       	push	r23
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	af 93       	push	r26
     f78:	bf 93       	push	r27
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
     f7e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <sg_Timer2_callBackPtr>
     f82:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <sg_Timer2_callBackPtr+0x1>
     f86:	89 2b       	or	r24, r25
     f88:	41 f0       	breq	.+16     	; 0xf9a <__vector_5+0x3e>
     f8a:	88 b7       	in	r24, 0x38	; 56
     f8c:	8f 7b       	andi	r24, 0xBF	; 191
     f8e:	88 bf       	out	0x38, r24	; 56
     f90:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <sg_Timer2_callBackPtr>
     f94:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <sg_Timer2_callBackPtr+0x1>
     f98:	09 95       	icall
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <TIMER_init>:
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <TIMER_init+0x6>
     fc0:	7b c0       	rjmp	.+246    	; 0x10b8 <TIMER_init+0xfc>
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 81       	ld	r18, Z
     fc6:	23 30       	cpi	r18, 0x03	; 3
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <TIMER_init+0x10>
     fca:	78 c0       	rjmp	.+240    	; 0x10bc <TIMER_init+0x100>
     fcc:	31 81       	ldd	r19, Z+1	; 0x01
     fce:	3a 30       	cpi	r19, 0x0A	; 10
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <TIMER_init+0x18>
     fd2:	76 c0       	rjmp	.+236    	; 0x10c0 <TIMER_init+0x104>
     fd4:	21 30       	cpi	r18, 0x01	; 1
     fd6:	11 f1       	breq	.+68     	; 0x101c <TIMER_init+0x60>
     fd8:	20 f0       	brcs	.+8      	; 0xfe2 <TIMER_init+0x26>
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <TIMER_init+0x24>
     fde:	4f c0       	rjmp	.+158    	; 0x107e <TIMER_init+0xc2>
     fe0:	71 c0       	rjmp	.+226    	; 0x10c4 <TIMER_init+0x108>
     fe2:	12 be       	out	0x32, r1	; 50
     fe4:	13 be       	out	0x33, r1	; 51
     fe6:	1c be       	out	0x3c, r1	; 60
     fe8:	fc 01       	movw	r30, r24
     fea:	22 81       	ldd	r18, Z+2	; 0x02
     fec:	22 bf       	out	0x32, r18	; 50
     fee:	23 b7       	in	r18, 0x33	; 51
     ff0:	20 68       	ori	r18, 0x80	; 128
     ff2:	23 bf       	out	0x33, r18	; 51
     ff4:	23 b7       	in	r18, 0x33	; 51
     ff6:	2f 7b       	andi	r18, 0xBF	; 191
     ff8:	23 bf       	out	0x33, r18	; 51
     ffa:	23 b7       	in	r18, 0x33	; 51
     ffc:	27 7f       	andi	r18, 0xF7	; 247
     ffe:	23 bf       	out	0x33, r18	; 51
    1000:	23 b7       	in	r18, 0x33	; 51
    1002:	2f 7e       	andi	r18, 0xEF	; 239
    1004:	23 bf       	out	0x33, r18	; 51
    1006:	23 b7       	in	r18, 0x33	; 51
    1008:	2f 7d       	andi	r18, 0xDF	; 223
    100a:	23 bf       	out	0x33, r18	; 51
    100c:	84 81       	ldd	r24, Z+4	; 0x04
    100e:	81 11       	cpse	r24, r1
    1010:	5b c0       	rjmp	.+182    	; 0x10c8 <TIMER_init+0x10c>
    1012:	89 b7       	in	r24, 0x39	; 57
    1014:	81 60       	ori	r24, 0x01	; 1
    1016:	89 bf       	out	0x39, r24	; 57
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	08 95       	ret
    101c:	1c bc       	out	0x2c, r1	; 44
    101e:	1d bc       	out	0x2d, r1	; 45
    1020:	1f bc       	out	0x2f, r1	; 47
    1022:	1e bc       	out	0x2e, r1	; 46
    1024:	1b bc       	out	0x2b, r1	; 43
    1026:	1a bc       	out	0x2a, r1	; 42
    1028:	fc 01       	movw	r30, r24
    102a:	22 81       	ldd	r18, Z+2	; 0x02
    102c:	33 81       	ldd	r19, Z+3	; 0x03
    102e:	3d bd       	out	0x2d, r19	; 45
    1030:	2c bd       	out	0x2c, r18	; 44
    1032:	2f b5       	in	r18, 0x2f	; 47
    1034:	28 60       	ori	r18, 0x08	; 8
    1036:	2f bd       	out	0x2f, r18	; 47
    1038:	2f b5       	in	r18, 0x2f	; 47
    103a:	24 60       	ori	r18, 0x04	; 4
    103c:	2f bd       	out	0x2f, r18	; 47
    103e:	2f b5       	in	r18, 0x2f	; 47
    1040:	2e 7f       	andi	r18, 0xFE	; 254
    1042:	2f bd       	out	0x2f, r18	; 47
    1044:	2f b5       	in	r18, 0x2f	; 47
    1046:	2d 7f       	andi	r18, 0xFD	; 253
    1048:	2f bd       	out	0x2f, r18	; 47
    104a:	2e b5       	in	r18, 0x2e	; 46
    104c:	2f 7e       	andi	r18, 0xEF	; 239
    104e:	2e bd       	out	0x2e, r18	; 46
    1050:	2e b5       	in	r18, 0x2e	; 46
    1052:	27 7f       	andi	r18, 0xF7	; 247
    1054:	2e bd       	out	0x2e, r18	; 46
    1056:	2f b5       	in	r18, 0x2f	; 47
    1058:	2f 7b       	andi	r18, 0xBF	; 191
    105a:	2f bd       	out	0x2f, r18	; 47
    105c:	2f b5       	in	r18, 0x2f	; 47
    105e:	2f 77       	andi	r18, 0x7F	; 127
    1060:	2f bd       	out	0x2f, r18	; 47
    1062:	2f b5       	in	r18, 0x2f	; 47
    1064:	2f 7e       	andi	r18, 0xEF	; 239
    1066:	2f bd       	out	0x2f, r18	; 47
    1068:	2f b5       	in	r18, 0x2f	; 47
    106a:	2f 7d       	andi	r18, 0xDF	; 223
    106c:	2f bd       	out	0x2f, r18	; 47
    106e:	84 81       	ldd	r24, Z+4	; 0x04
    1070:	81 11       	cpse	r24, r1
    1072:	2c c0       	rjmp	.+88     	; 0x10cc <TIMER_init+0x110>
    1074:	89 b7       	in	r24, 0x39	; 57
    1076:	84 60       	ori	r24, 0x04	; 4
    1078:	89 bf       	out	0x39, r24	; 57
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret
    107e:	14 bc       	out	0x24, r1	; 36
    1080:	15 bc       	out	0x25, r1	; 37
    1082:	13 bc       	out	0x23, r1	; 35
    1084:	fc 01       	movw	r30, r24
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	24 bd       	out	0x24, r18	; 36
    108a:	25 b5       	in	r18, 0x25	; 37
    108c:	20 68       	ori	r18, 0x80	; 128
    108e:	25 bd       	out	0x25, r18	; 37
    1090:	25 b5       	in	r18, 0x25	; 37
    1092:	2f 7b       	andi	r18, 0xBF	; 191
    1094:	25 bd       	out	0x25, r18	; 37
    1096:	25 b5       	in	r18, 0x25	; 37
    1098:	27 7f       	andi	r18, 0xF7	; 247
    109a:	25 bd       	out	0x25, r18	; 37
    109c:	25 b5       	in	r18, 0x25	; 37
    109e:	2f 7e       	andi	r18, 0xEF	; 239
    10a0:	25 bd       	out	0x25, r18	; 37
    10a2:	25 b5       	in	r18, 0x25	; 37
    10a4:	2f 7d       	andi	r18, 0xDF	; 223
    10a6:	25 bd       	out	0x25, r18	; 37
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	81 11       	cpse	r24, r1
    10ac:	11 c0       	rjmp	.+34     	; 0x10d0 <TIMER_init+0x114>
    10ae:	89 b7       	in	r24, 0x39	; 57
    10b0:	80 64       	ori	r24, 0x40	; 64
    10b2:	89 bf       	out	0x39, r24	; 57
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	08 95       	ret
    10b8:	83 e0       	ldi	r24, 0x03	; 3
    10ba:	08 95       	ret
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	08 95       	ret
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	08 95       	ret
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	08 95       	ret
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	08 95       	ret
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	08 95       	ret
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	08 95       	ret

000010d4 <TIMER_reset>:
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	11 f1       	breq	.+68     	; 0x111c <TIMER_reset+0x48>
    10d8:	fc 01       	movw	r30, r24
    10da:	20 81       	ld	r18, Z
    10dc:	23 30       	cpi	r18, 0x03	; 3
    10de:	00 f5       	brcc	.+64     	; 0x1120 <TIMER_reset+0x4c>
    10e0:	81 81       	ldd	r24, Z+1	; 0x01
    10e2:	8a 30       	cpi	r24, 0x0A	; 10
    10e4:	f8 f4       	brcc	.+62     	; 0x1124 <TIMER_reset+0x50>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
    10e6:	21 30       	cpi	r18, 0x01	; 1
    10e8:	51 f0       	breq	.+20     	; 0x10fe <TIMER_reset+0x2a>
    10ea:	18 f0       	brcs	.+6      	; 0x10f2 <TIMER_reset+0x1e>
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	81 f0       	breq	.+32     	; 0x1110 <TIMER_reset+0x3c>
    10f0:	1b c0       	rjmp	.+54     	; 0x1128 <TIMER_reset+0x54>
		{
			case TIMER_0:
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
    10f2:	12 be       	out	0x32, r1	; 50
				CLEAR_REG(TCCR0);
    10f4:	13 be       	out	0x33, r1	; 51
				CLEAR_REG(OCR0);
    10f6:	1c be       	out	0x3c, r1	; 60
				CLEAR_REG(TIFR);
    10f8:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    10fa:	80 e0       	ldi	r24, 0x00	; 0
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
				CLEAR_REG(TCCR0);
				CLEAR_REG(OCR0);
				CLEAR_REG(TIFR);
				break;
    10fc:	08 95       	ret
				
			case TIMER_1:
				/*Clear registers of Timer1 before processing any of them*/
				CLEAR_REG(TCNT1L);
    10fe:	1c bc       	out	0x2c, r1	; 44
				CLEAR_REG(TCNT1H);
    1100:	1d bc       	out	0x2d, r1	; 45
				CLEAR_REG(TCCR1A);
    1102:	1f bc       	out	0x2f, r1	; 47
				CLEAR_REG(TCCR1B);
    1104:	1e bc       	out	0x2e, r1	; 46
				CLEAR_REG(OCR1AH);
    1106:	1b bc       	out	0x2b, r1	; 43
				CLEAR_REG(OCR1AL);
    1108:	1a bc       	out	0x2a, r1	; 42
				CLEAR_REG(TIFR);
    110a:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    110c:	80 e0       	ldi	r24, 0x00	; 0
				CLEAR_REG(TCCR1A);
				CLEAR_REG(TCCR1B);
				CLEAR_REG(OCR1AH);
				CLEAR_REG(OCR1AL);
				CLEAR_REG(TIFR);
				break;
    110e:	08 95       	ret
				
			case TIMER_2:
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
    1110:	14 bc       	out	0x24, r1	; 36
				CLEAR_REG(TCCR2);
    1112:	15 bc       	out	0x25, r1	; 37
				CLEAR_REG(OCR2);
    1114:	13 bc       	out	0x23, r1	; 35
				CLEAR_REG(TIFR);
    1116:	18 be       	out	0x38, r1	; 56
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1118:	80 e0       	ldi	r24, 0x00	; 0
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
				CLEAR_REG(TCCR2);
				CLEAR_REG(OCR2);
				CLEAR_REG(TIFR);
				break;
    111a:	08 95       	ret
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	08 95       	ret
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	08 95       	ret
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	08 95       	ret
				CLEAR_REG(OCR2);
				CLEAR_REG(TIFR);
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
    1128:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
    112a:	08 95       	ret

0000112c <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	d1 f0       	breq	.+52     	; 0x1164 <TIMER_setCallBack+0x38>
    1130:	63 30       	cpi	r22, 0x03	; 3
    1132:	d0 f4       	brcc	.+52     	; 0x1168 <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
    1134:	61 30       	cpi	r22, 0x01	; 1
    1136:	51 f0       	breq	.+20     	; 0x114c <TIMER_setCallBack+0x20>
    1138:	18 f0       	brcs	.+6      	; 0x1140 <TIMER_setCallBack+0x14>
    113a:	62 30       	cpi	r22, 0x02	; 2
    113c:	69 f0       	breq	.+26     	; 0x1158 <TIMER_setCallBack+0x2c>
    113e:	16 c0       	rjmp	.+44     	; 0x116c <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
    1140:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <sg_Timer0_callBackPtr+0x1>
    1144:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1148:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
    114a:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
    114c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <sg_Timer1_callBackPtr+0x1>
    1150:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1154:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
    1156:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
    1158:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <sg_Timer2_callBackPtr+0x1>
    115c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
    1160:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
    1162:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	08 95       	ret
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
    116c:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
    116e:	08 95       	ret

00001170 <__fixunssfsi>:
    1170:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fp_splitA>
    1174:	88 f0       	brcs	.+34     	; 0x1198 <__fixunssfsi+0x28>
    1176:	9f 57       	subi	r25, 0x7F	; 127
    1178:	98 f0       	brcs	.+38     	; 0x11a0 <__fixunssfsi+0x30>
    117a:	b9 2f       	mov	r27, r25
    117c:	99 27       	eor	r25, r25
    117e:	b7 51       	subi	r27, 0x17	; 23
    1180:	b0 f0       	brcs	.+44     	; 0x11ae <__fixunssfsi+0x3e>
    1182:	e1 f0       	breq	.+56     	; 0x11bc <__fixunssfsi+0x4c>
    1184:	66 0f       	add	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	88 1f       	adc	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	1a f0       	brmi	.+6      	; 0x1194 <__fixunssfsi+0x24>
    118e:	ba 95       	dec	r27
    1190:	c9 f7       	brne	.-14     	; 0x1184 <__fixunssfsi+0x14>
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <__fixunssfsi+0x4c>
    1194:	b1 30       	cpi	r27, 0x01	; 1
    1196:	91 f0       	breq	.+36     	; 0x11bc <__fixunssfsi+0x4c>
    1198:	0e 94 46 09 	call	0x128c	; 0x128c <__fp_zero>
    119c:	b1 e0       	ldi	r27, 0x01	; 1
    119e:	08 95       	ret
    11a0:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_zero>
    11a4:	67 2f       	mov	r22, r23
    11a6:	78 2f       	mov	r23, r24
    11a8:	88 27       	eor	r24, r24
    11aa:	b8 5f       	subi	r27, 0xF8	; 248
    11ac:	39 f0       	breq	.+14     	; 0x11bc <__fixunssfsi+0x4c>
    11ae:	b9 3f       	cpi	r27, 0xF9	; 249
    11b0:	cc f3       	brlt	.-14     	; 0x11a4 <__fixunssfsi+0x34>
    11b2:	86 95       	lsr	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	b3 95       	inc	r27
    11ba:	d9 f7       	brne	.-10     	; 0x11b2 <__fixunssfsi+0x42>
    11bc:	3e f4       	brtc	.+14     	; 0x11cc <__fixunssfsi+0x5c>
    11be:	90 95       	com	r25
    11c0:	80 95       	com	r24
    11c2:	70 95       	com	r23
    11c4:	61 95       	neg	r22
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ca:	9f 4f       	sbci	r25, 0xFF	; 255
    11cc:	08 95       	ret

000011ce <__floatunsisf>:
    11ce:	e8 94       	clt
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <__floatsisf+0x12>

000011d2 <__floatsisf>:
    11d2:	97 fb       	bst	r25, 7
    11d4:	3e f4       	brtc	.+14     	; 0x11e4 <__floatsisf+0x12>
    11d6:	90 95       	com	r25
    11d8:	80 95       	com	r24
    11da:	70 95       	com	r23
    11dc:	61 95       	neg	r22
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	8f 4f       	sbci	r24, 0xFF	; 255
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	99 23       	and	r25, r25
    11e6:	a9 f0       	breq	.+42     	; 0x1212 <__floatsisf+0x40>
    11e8:	f9 2f       	mov	r31, r25
    11ea:	96 e9       	ldi	r25, 0x96	; 150
    11ec:	bb 27       	eor	r27, r27
    11ee:	93 95       	inc	r25
    11f0:	f6 95       	lsr	r31
    11f2:	87 95       	ror	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b7 95       	ror	r27
    11fa:	f1 11       	cpse	r31, r1
    11fc:	f8 cf       	rjmp	.-16     	; 0x11ee <__floatsisf+0x1c>
    11fe:	fa f4       	brpl	.+62     	; 0x123e <__floatsisf+0x6c>
    1200:	bb 0f       	add	r27, r27
    1202:	11 f4       	brne	.+4      	; 0x1208 <__floatsisf+0x36>
    1204:	60 ff       	sbrs	r22, 0
    1206:	1b c0       	rjmp	.+54     	; 0x123e <__floatsisf+0x6c>
    1208:	6f 5f       	subi	r22, 0xFF	; 255
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	8f 4f       	sbci	r24, 0xFF	; 255
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	16 c0       	rjmp	.+44     	; 0x123e <__floatsisf+0x6c>
    1212:	88 23       	and	r24, r24
    1214:	11 f0       	breq	.+4      	; 0x121a <__floatsisf+0x48>
    1216:	96 e9       	ldi	r25, 0x96	; 150
    1218:	11 c0       	rjmp	.+34     	; 0x123c <__floatsisf+0x6a>
    121a:	77 23       	and	r23, r23
    121c:	21 f0       	breq	.+8      	; 0x1226 <__floatsisf+0x54>
    121e:	9e e8       	ldi	r25, 0x8E	; 142
    1220:	87 2f       	mov	r24, r23
    1222:	76 2f       	mov	r23, r22
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <__floatsisf+0x5e>
    1226:	66 23       	and	r22, r22
    1228:	71 f0       	breq	.+28     	; 0x1246 <__floatsisf+0x74>
    122a:	96 e8       	ldi	r25, 0x86	; 134
    122c:	86 2f       	mov	r24, r22
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	2a f0       	brmi	.+10     	; 0x123e <__floatsisf+0x6c>
    1234:	9a 95       	dec	r25
    1236:	66 0f       	add	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	da f7       	brpl	.-10     	; 0x1234 <__floatsisf+0x62>
    123e:	88 0f       	add	r24, r24
    1240:	96 95       	lsr	r25
    1242:	87 95       	ror	r24
    1244:	97 f9       	bld	r25, 7
    1246:	08 95       	ret

00001248 <__fp_split3>:
    1248:	57 fd       	sbrc	r21, 7
    124a:	90 58       	subi	r25, 0x80	; 128
    124c:	44 0f       	add	r20, r20
    124e:	55 1f       	adc	r21, r21
    1250:	59 f0       	breq	.+22     	; 0x1268 <__fp_splitA+0x10>
    1252:	5f 3f       	cpi	r21, 0xFF	; 255
    1254:	71 f0       	breq	.+28     	; 0x1272 <__fp_splitA+0x1a>
    1256:	47 95       	ror	r20

00001258 <__fp_splitA>:
    1258:	88 0f       	add	r24, r24
    125a:	97 fb       	bst	r25, 7
    125c:	99 1f       	adc	r25, r25
    125e:	61 f0       	breq	.+24     	; 0x1278 <__fp_splitA+0x20>
    1260:	9f 3f       	cpi	r25, 0xFF	; 255
    1262:	79 f0       	breq	.+30     	; 0x1282 <__fp_splitA+0x2a>
    1264:	87 95       	ror	r24
    1266:	08 95       	ret
    1268:	12 16       	cp	r1, r18
    126a:	13 06       	cpc	r1, r19
    126c:	14 06       	cpc	r1, r20
    126e:	55 1f       	adc	r21, r21
    1270:	f2 cf       	rjmp	.-28     	; 0x1256 <__fp_split3+0xe>
    1272:	46 95       	lsr	r20
    1274:	f1 df       	rcall	.-30     	; 0x1258 <__fp_splitA>
    1276:	08 c0       	rjmp	.+16     	; 0x1288 <__fp_splitA+0x30>
    1278:	16 16       	cp	r1, r22
    127a:	17 06       	cpc	r1, r23
    127c:	18 06       	cpc	r1, r24
    127e:	99 1f       	adc	r25, r25
    1280:	f1 cf       	rjmp	.-30     	; 0x1264 <__fp_splitA+0xc>
    1282:	86 95       	lsr	r24
    1284:	71 05       	cpc	r23, r1
    1286:	61 05       	cpc	r22, r1
    1288:	08 94       	sec
    128a:	08 95       	ret

0000128c <__fp_zero>:
    128c:	e8 94       	clt

0000128e <__fp_szero>:
    128e:	bb 27       	eor	r27, r27
    1290:	66 27       	eor	r22, r22
    1292:	77 27       	eor	r23, r23
    1294:	cb 01       	movw	r24, r22
    1296:	97 f9       	bld	r25, 7
    1298:	08 95       	ret

0000129a <__gesf2>:
    129a:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_cmp>
    129e:	08 f4       	brcc	.+2      	; 0x12a2 <__gesf2+0x8>
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	08 95       	ret

000012a4 <__mulsf3>:
    12a4:	0e 94 65 09 	call	0x12ca	; 0x12ca <__mulsf3x>
    12a8:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_round>
    12ac:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__fp_pscA>
    12b0:	38 f0       	brcs	.+14     	; 0x12c0 <__mulsf3+0x1c>
    12b2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__fp_pscB>
    12b6:	20 f0       	brcs	.+8      	; 0x12c0 <__mulsf3+0x1c>
    12b8:	95 23       	and	r25, r21
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <__mulsf3+0x1c>
    12bc:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__fp_inf>
    12c0:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_nan>
    12c4:	11 24       	eor	r1, r1
    12c6:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_szero>

000012ca <__mulsf3x>:
    12ca:	0e 94 24 09 	call	0x1248	; 0x1248 <__fp_split3>
    12ce:	70 f3       	brcs	.-36     	; 0x12ac <__mulsf3+0x8>

000012d0 <__mulsf3_pse>:
    12d0:	95 9f       	mul	r25, r21
    12d2:	c1 f3       	breq	.-16     	; 0x12c4 <__mulsf3+0x20>
    12d4:	95 0f       	add	r25, r21
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	55 1f       	adc	r21, r21
    12da:	62 9f       	mul	r22, r18
    12dc:	f0 01       	movw	r30, r0
    12de:	72 9f       	mul	r23, r18
    12e0:	bb 27       	eor	r27, r27
    12e2:	f0 0d       	add	r31, r0
    12e4:	b1 1d       	adc	r27, r1
    12e6:	63 9f       	mul	r22, r19
    12e8:	aa 27       	eor	r26, r26
    12ea:	f0 0d       	add	r31, r0
    12ec:	b1 1d       	adc	r27, r1
    12ee:	aa 1f       	adc	r26, r26
    12f0:	64 9f       	mul	r22, r20
    12f2:	66 27       	eor	r22, r22
    12f4:	b0 0d       	add	r27, r0
    12f6:	a1 1d       	adc	r26, r1
    12f8:	66 1f       	adc	r22, r22
    12fa:	82 9f       	mul	r24, r18
    12fc:	22 27       	eor	r18, r18
    12fe:	b0 0d       	add	r27, r0
    1300:	a1 1d       	adc	r26, r1
    1302:	62 1f       	adc	r22, r18
    1304:	73 9f       	mul	r23, r19
    1306:	b0 0d       	add	r27, r0
    1308:	a1 1d       	adc	r26, r1
    130a:	62 1f       	adc	r22, r18
    130c:	83 9f       	mul	r24, r19
    130e:	a0 0d       	add	r26, r0
    1310:	61 1d       	adc	r22, r1
    1312:	22 1f       	adc	r18, r18
    1314:	74 9f       	mul	r23, r20
    1316:	33 27       	eor	r19, r19
    1318:	a0 0d       	add	r26, r0
    131a:	61 1d       	adc	r22, r1
    131c:	23 1f       	adc	r18, r19
    131e:	84 9f       	mul	r24, r20
    1320:	60 0d       	add	r22, r0
    1322:	21 1d       	adc	r18, r1
    1324:	82 2f       	mov	r24, r18
    1326:	76 2f       	mov	r23, r22
    1328:	6a 2f       	mov	r22, r26
    132a:	11 24       	eor	r1, r1
    132c:	9f 57       	subi	r25, 0x7F	; 127
    132e:	50 40       	sbci	r21, 0x00	; 0
    1330:	9a f0       	brmi	.+38     	; 0x1358 <__mulsf3_pse+0x88>
    1332:	f1 f0       	breq	.+60     	; 0x1370 <__mulsf3_pse+0xa0>
    1334:	88 23       	and	r24, r24
    1336:	4a f0       	brmi	.+18     	; 0x134a <__mulsf3_pse+0x7a>
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	bb 1f       	adc	r27, r27
    133e:	66 1f       	adc	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	91 50       	subi	r25, 0x01	; 1
    1346:	50 40       	sbci	r21, 0x00	; 0
    1348:	a9 f7       	brne	.-22     	; 0x1334 <__mulsf3_pse+0x64>
    134a:	9e 3f       	cpi	r25, 0xFE	; 254
    134c:	51 05       	cpc	r21, r1
    134e:	80 f0       	brcs	.+32     	; 0x1370 <__mulsf3_pse+0xa0>
    1350:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__fp_inf>
    1354:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_szero>
    1358:	5f 3f       	cpi	r21, 0xFF	; 255
    135a:	e4 f3       	brlt	.-8      	; 0x1354 <__mulsf3_pse+0x84>
    135c:	98 3e       	cpi	r25, 0xE8	; 232
    135e:	d4 f3       	brlt	.-12     	; 0x1354 <__mulsf3_pse+0x84>
    1360:	86 95       	lsr	r24
    1362:	77 95       	ror	r23
    1364:	67 95       	ror	r22
    1366:	b7 95       	ror	r27
    1368:	f7 95       	ror	r31
    136a:	e7 95       	ror	r30
    136c:	9f 5f       	subi	r25, 0xFF	; 255
    136e:	c1 f7       	brne	.-16     	; 0x1360 <__mulsf3_pse+0x90>
    1370:	fe 2b       	or	r31, r30
    1372:	88 0f       	add	r24, r24
    1374:	91 1d       	adc	r25, r1
    1376:	96 95       	lsr	r25
    1378:	87 95       	ror	r24
    137a:	97 f9       	bld	r25, 7
    137c:	08 95       	ret

0000137e <__fp_cmp>:
    137e:	99 0f       	add	r25, r25
    1380:	00 08       	sbc	r0, r0
    1382:	55 0f       	add	r21, r21
    1384:	aa 0b       	sbc	r26, r26
    1386:	e0 e8       	ldi	r30, 0x80	; 128
    1388:	fe ef       	ldi	r31, 0xFE	; 254
    138a:	16 16       	cp	r1, r22
    138c:	17 06       	cpc	r1, r23
    138e:	e8 07       	cpc	r30, r24
    1390:	f9 07       	cpc	r31, r25
    1392:	c0 f0       	brcs	.+48     	; 0x13c4 <__fp_cmp+0x46>
    1394:	12 16       	cp	r1, r18
    1396:	13 06       	cpc	r1, r19
    1398:	e4 07       	cpc	r30, r20
    139a:	f5 07       	cpc	r31, r21
    139c:	98 f0       	brcs	.+38     	; 0x13c4 <__fp_cmp+0x46>
    139e:	62 1b       	sub	r22, r18
    13a0:	73 0b       	sbc	r23, r19
    13a2:	84 0b       	sbc	r24, r20
    13a4:	95 0b       	sbc	r25, r21
    13a6:	39 f4       	brne	.+14     	; 0x13b6 <__fp_cmp+0x38>
    13a8:	0a 26       	eor	r0, r26
    13aa:	61 f0       	breq	.+24     	; 0x13c4 <__fp_cmp+0x46>
    13ac:	23 2b       	or	r18, r19
    13ae:	24 2b       	or	r18, r20
    13b0:	25 2b       	or	r18, r21
    13b2:	21 f4       	brne	.+8      	; 0x13bc <__fp_cmp+0x3e>
    13b4:	08 95       	ret
    13b6:	0a 26       	eor	r0, r26
    13b8:	09 f4       	brne	.+2      	; 0x13bc <__fp_cmp+0x3e>
    13ba:	a1 40       	sbci	r26, 0x01	; 1
    13bc:	a6 95       	lsr	r26
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	81 1d       	adc	r24, r1
    13c2:	81 1d       	adc	r24, r1
    13c4:	08 95       	ret

000013c6 <__fp_inf>:
    13c6:	97 f9       	bld	r25, 7
    13c8:	9f 67       	ori	r25, 0x7F	; 127
    13ca:	80 e8       	ldi	r24, 0x80	; 128
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	08 95       	ret

000013d2 <__fp_nan>:
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	80 ec       	ldi	r24, 0xC0	; 192
    13d6:	08 95       	ret

000013d8 <__fp_pscA>:
    13d8:	00 24       	eor	r0, r0
    13da:	0a 94       	dec	r0
    13dc:	16 16       	cp	r1, r22
    13de:	17 06       	cpc	r1, r23
    13e0:	18 06       	cpc	r1, r24
    13e2:	09 06       	cpc	r0, r25
    13e4:	08 95       	ret

000013e6 <__fp_pscB>:
    13e6:	00 24       	eor	r0, r0
    13e8:	0a 94       	dec	r0
    13ea:	12 16       	cp	r1, r18
    13ec:	13 06       	cpc	r1, r19
    13ee:	14 06       	cpc	r1, r20
    13f0:	05 06       	cpc	r0, r21
    13f2:	08 95       	ret

000013f4 <__fp_round>:
    13f4:	09 2e       	mov	r0, r25
    13f6:	03 94       	inc	r0
    13f8:	00 0c       	add	r0, r0
    13fa:	11 f4       	brne	.+4      	; 0x1400 <__fp_round+0xc>
    13fc:	88 23       	and	r24, r24
    13fe:	52 f0       	brmi	.+20     	; 0x1414 <__fp_round+0x20>
    1400:	bb 0f       	add	r27, r27
    1402:	40 f4       	brcc	.+16     	; 0x1414 <__fp_round+0x20>
    1404:	bf 2b       	or	r27, r31
    1406:	11 f4       	brne	.+4      	; 0x140c <__fp_round+0x18>
    1408:	60 ff       	sbrs	r22, 0
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <__fp_round+0x20>
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	8f 4f       	sbci	r24, 0xFF	; 255
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	08 95       	ret

00001416 <__itoa_ncheck>:
    1416:	bb 27       	eor	r27, r27
    1418:	4a 30       	cpi	r20, 0x0A	; 10
    141a:	31 f4       	brne	.+12     	; 0x1428 <__itoa_ncheck+0x12>
    141c:	99 23       	and	r25, r25
    141e:	22 f4       	brpl	.+8      	; 0x1428 <__itoa_ncheck+0x12>
    1420:	bd e2       	ldi	r27, 0x2D	; 45
    1422:	90 95       	com	r25
    1424:	81 95       	neg	r24
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__utoa_common>

0000142c <__utoa_ncheck>:
    142c:	bb 27       	eor	r27, r27

0000142e <__utoa_common>:
    142e:	fb 01       	movw	r30, r22
    1430:	55 27       	eor	r21, r21
    1432:	aa 27       	eor	r26, r26
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	aa 1f       	adc	r26, r26
    143a:	a4 17       	cp	r26, r20
    143c:	10 f0       	brcs	.+4      	; 0x1442 <__utoa_common+0x14>
    143e:	a4 1b       	sub	r26, r20
    1440:	83 95       	inc	r24
    1442:	50 51       	subi	r21, 0x10	; 16
    1444:	b9 f7       	brne	.-18     	; 0x1434 <__utoa_common+0x6>
    1446:	a0 5d       	subi	r26, 0xD0	; 208
    1448:	aa 33       	cpi	r26, 0x3A	; 58
    144a:	08 f0       	brcs	.+2      	; 0x144e <__utoa_common+0x20>
    144c:	a9 5d       	subi	r26, 0xD9	; 217
    144e:	a1 93       	st	Z+, r26
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	79 f7       	brne	.-34     	; 0x1432 <__utoa_common+0x4>
    1454:	b1 11       	cpse	r27, r1
    1456:	b1 93       	st	Z+, r27
    1458:	11 92       	st	Z+, r1
    145a:	cb 01       	movw	r24, r22
    145c:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <strrev>

00001460 <strrev>:
    1460:	dc 01       	movw	r26, r24
    1462:	fc 01       	movw	r30, r24
    1464:	67 2f       	mov	r22, r23
    1466:	71 91       	ld	r23, Z+
    1468:	77 23       	and	r23, r23
    146a:	e1 f7       	brne	.-8      	; 0x1464 <strrev+0x4>
    146c:	32 97       	sbiw	r30, 0x02	; 2
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <strrev+0x18>
    1470:	7c 91       	ld	r23, X
    1472:	6d 93       	st	X+, r22
    1474:	70 83       	st	Z, r23
    1476:	62 91       	ld	r22, -Z
    1478:	ae 17       	cp	r26, r30
    147a:	bf 07       	cpc	r27, r31
    147c:	c8 f3       	brcs	.-14     	; 0x1470 <strrev+0x10>
    147e:	08 95       	ret

00001480 <_exit>:
    1480:	f8 94       	cli

00001482 <__stop_program>:
    1482:	ff cf       	rjmp	.-2      	; 0x1482 <__stop_program>
