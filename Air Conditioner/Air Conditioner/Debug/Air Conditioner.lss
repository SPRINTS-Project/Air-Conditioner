
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         0000057c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000005f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a83  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000742  00000000  00000000  00001157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051b  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000517  00000000  00000000  00002343  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000285a  2**0
=======
  0 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008000c6  008000c6  00000bbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c3  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdb  00000000  00000000  00003097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d9  00000000  00000000  00003d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00004f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7c  00000000  00000000  000052a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c98  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000069b8  2**0
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
<<<<<<< HEAD
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
=======
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
<<<<<<< HEAD
  78:	a0 e6       	ldi	r26, 0x60	; 96
=======
  78:	a6 ec       	ldi	r26, 0xC6	; 198
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
<<<<<<< HEAD
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>
=======
  80:	ae 3f       	cpi	r26, 0xFE	; 254
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 04 	call	0x80c	; 0x80c <main>
  8a:	0c 94 60 05 	jmp	0xac0	; 0xac0 <_exit>
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

<<<<<<< HEAD
00000092 <main>:
#include "MCAL/adc/adc.h"
st_adcConfigType adc_config;
double data;
int main(void)
{
	adc_config.u8_prescaler_selection = ADC_PRESCALER_16;
  92:	e8 e6       	ldi	r30, 0x68	; 104
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	81 83       	std	Z+1, r24	; 0x01
	adc_config.u8_ref_selection = ADC_AVCC;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 83       	st	Z, r24
	ADC_init (&adc_config);
  9e:	cf 01       	movw	r24, r30
  a0:	0e 94 86 00 	call	0x10c	; 0x10c <ADC_init>
	
	while(1){
	ADC_read (ADC_CHANNEL_0,&data);	
  a4:	64 e6       	ldi	r22, 0x64	; 100
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 b5 00 	call	0x16a	; 0x16a <ADC_read>
	for(uint64_t i=0; i<1000;i++);
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	f1 2c       	mov	r15, r1
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	13 c0       	rjmp	.+38     	; 0xe6 <main+0x54>
  c0:	2d 2f       	mov	r18, r29
  c2:	3c 2f       	mov	r19, r28
  c4:	4b 2f       	mov	r20, r27
  c6:	5a 2f       	mov	r21, r26
  c8:	6f 2f       	mov	r22, r31
  ca:	7f 2d       	mov	r23, r15
  cc:	80 2f       	mov	r24, r16
  ce:	91 2f       	mov	r25, r17
  d0:	a1 e0       	ldi	r26, 0x01	; 1
  d2:	0e 94 b0 02 	call	0x560	; 0x560 <__adddi3_s8>
  d6:	d2 2f       	mov	r29, r18
  d8:	c3 2f       	mov	r28, r19
  da:	b4 2f       	mov	r27, r20
  dc:	a5 2f       	mov	r26, r21
  de:	f6 2f       	mov	r31, r22
  e0:	f7 2e       	mov	r15, r23
  e2:	08 2f       	mov	r16, r24
  e4:	19 2f       	mov	r17, r25
  e6:	2d 2f       	mov	r18, r29
  e8:	3c 2f       	mov	r19, r28
  ea:	4b 2f       	mov	r20, r27
  ec:	5a 2f       	mov	r21, r26
  ee:	6f 2f       	mov	r22, r31
  f0:	7f 2d       	mov	r23, r15
  f2:	80 2f       	mov	r24, r16
  f4:	91 2f       	mov	r25, r17
  f6:	27 3e       	cpi	r18, 0xE7	; 231
  f8:	33 40       	sbci	r19, 0x03	; 3
  fa:	41 05       	cpc	r20, r1
  fc:	51 05       	cpc	r21, r1
  fe:	61 05       	cpc	r22, r1
 100:	71 05       	cpc	r23, r1
 102:	81 05       	cpc	r24, r1
 104:	91 05       	cpc	r25, r1
 106:	e1 f2       	breq	.-72     	; 0xc0 <main+0x2e>
 108:	d8 f2       	brcs	.-74     	; 0xc0 <main+0x2e>
 10a:	cc cf       	rjmp	.-104    	; 0xa4 <main+0x12>

0000010c <ADC_init>:

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(st_config == NULL){
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	59 f1       	breq	.+86     	; 0x166 <ADC_init+0x5a>
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
 110:	fc 01       	movw	r30, r24
 112:	21 81       	ldd	r18, Z+1	; 0x01
 114:	20 68       	ori	r18, 0x80	; 128
 116:	26 b9       	out	0x06, r18	; 6
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
 118:	80 81       	ld	r24, Z
 11a:	82 95       	swap	r24
 11c:	88 0f       	add	r24, r24
 11e:	88 0f       	add	r24, r24
 120:	80 7c       	andi	r24, 0xC0	; 192
 122:	87 b9       	out	0x07, r24	; 7
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
		uint16_t result = 2;
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	70 e0       	ldi	r23, 0x00	; 0
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 12c:	03 c0       	rjmp	.+6      	; 0x134 <ADC_init+0x28>
			result *= 2;
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	8a 30       	cpi	r24, 0x0A	; 10
 136:	91 05       	cpc	r25, r1
 138:	d4 f3       	brlt	.-12     	; 0x12e <ADC_init+0x22>
			result *= 2;
			
		}
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 b5 01 	call	0x36a	; 0x36a <__floatunsisf>
 142:	9b 01       	movw	r18, r22
 144:	ac 01       	movw	r20, r24
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 ea       	ldi	r24, 0xA0	; 160
 14c:	90 e4       	ldi	r25, 0x40	; 64
 14e:	0e 94 43 01 	call	0x286	; 0x286 <__divsf3>
 152:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 15e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
#include "adc.h"

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
	if(st_config == NULL){
		ret = ADC_E_NOT_OK;
 166:	84 e0       	ldi	r24, 0x04	; 4
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
		
=======
00000092 <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
  92:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <u8_delay>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <u8_delay>
	TIMER_Manager_reset(&st_gs_timer_0_config);
  9c:	8e ec       	ldi	r24, 0xCE	; 206
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 04 04 	call	0x808	; 0x808 <TIMER_Manager_reset>
  a4:	08 95       	ret

000000a6 <APP_init>:
	}
}


void APP_init(void)
{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_0_config.u8_timerNum = TIMER_0;
  b2:	ee ec       	ldi	r30, 0xCE	; 206
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	st_gs_timer_0_config.u8_timer_ovf_int_enable = 1;
  b8:	d1 e0       	ldi	r29, 0x01	; 1
  ba:	d4 83       	std	Z+4, r29	; 0x04
	st_gs_timer_0_config.u16_timer_InitialValue = APP_TIMER_0_INIT_VALUE;
  bc:	80 ef       	ldi	r24, 0xF0	; 240
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	93 83       	std	Z+3, r25	; 0x03
  c2:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_0_config.callBackFunction =  APP_timer0OvfHandeler;
  c4:	89 e4       	ldi	r24, 0x49	; 73
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	96 83       	std	Z+6, r25	; 0x06
  ca:	85 83       	std	Z+5, r24	; 0x05
	TIMER_Manager_init(&st_gs_timer_0_config);
  cc:	cf 01       	movw	r24, r30
  ce:	0e 94 02 04 	call	0x804	; 0x804 <TIMER_Manager_init>
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
  d2:	eb ec       	ldi	r30, 0xCB	; 203
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	82 83       	std	Z+2, r24	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
  da:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
  dc:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
  de:	cf 01       	movw	r24, r30
  e0:	0e 94 00 04 	call	0x800	; 0x800 <TEMP_SENSOR_init>
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
  e4:	e9 ed       	ldi	r30, 0xD9	; 217
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	st_gs_lcdConfig.u8_d4Pin[0] = porta;
  ea:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[1] = pin0;
  ec:	12 86       	std	Z+10, r1	; 0x0a
	st_gs_lcdConfig.u8_d5Pin[0] = porta;
  ee:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[1] = pin1;
  f0:	d4 87       	std	Z+12, r29	; 0x0c
	st_gs_lcdConfig.u8_d6Pin[0] = porta;
  f2:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[1] = pin2;
  f4:	c2 e0       	ldi	r28, 0x02	; 2
  f6:	c6 87       	std	Z+14, r28	; 0x0e
	st_gs_lcdConfig.u8_d7Pin[0] = porta;
  f8:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[1] = pin3;
  fa:	0f 2e       	mov	r0, r31
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	ef 2e       	mov	r14, r31
 100:	f0 2d       	mov	r31, r0
 102:	e0 8a       	std	Z+16, r14	; 0x10
	st_gs_lcdConfig.u8_RSpin[0] = porta;
 104:	11 8a       	std	Z+17, r1	; 0x11
	st_gs_lcdConfig.u8_RSpin[1] = pin4;
 106:	68 94       	set
 108:	ff 24       	eor	r15, r15
 10a:	f2 f8       	bld	r15, 2
 10c:	f2 8a       	std	Z+18, r15	; 0x12
	st_gs_lcdConfig.u8_RWpin[0] = porta;
 10e:	13 8a       	std	Z+19, r1	; 0x13
	st_gs_lcdConfig.u8_RWpin[1] = pin5;
 110:	05 e0       	ldi	r16, 0x05	; 5
 112:	04 8b       	std	Z+20, r16	; 0x14
	st_gs_lcdConfig.u8_Epin[0] = porta;
 114:	15 8a       	std	Z+21, r1	; 0x15
	st_gs_lcdConfig.u8_Epin[1] = pin6;
 116:	16 e0       	ldi	r17, 0x06	; 6
 118:	16 8b       	std	Z+22, r17	; 0x16
	LCD_init(&st_gs_lcdConfig);
 11a:	cf 01       	movw	r24, r30
 11c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_init>
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[0] = portc;
 120:	e0 ef       	ldi	r30, 0xF0	; 240
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[1] = pin3;
 126:	e7 82       	std	Z+7, r14	; 0x07
	st_gs_keypadConfig.u8_col2Pin[0] = portc;
 128:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[1] = pin4;
 12a:	f1 86       	std	Z+9, r15	; 0x09
	st_gs_keypadConfig.u8_col3Pin[0] = portc;
 12c:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[1] = pin5;
 12e:	03 87       	std	Z+11, r16	; 0x0b
	st_gs_keypadConfig.u8_col4Pin[0] = portc;
 130:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[1] = pin6;
 132:	15 87       	std	Z+13, r17	; 0x0d
	st_gs_keypadConfig.u8_row1Pin[0] = portc;
 134:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[1] = pin0 ;
 136:	11 82       	std	Z+1, r1	; 0x01
	st_gs_keypadConfig.u8_row2Pin[0] = portc;
 138:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[1] = pin1 ;
 13a:	d3 83       	std	Z+3, r29	; 0x03
	st_gs_keypadConfig.u8_row3Pin[0] = portc;
 13c:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[1] = pin2 ;
 13e:	c5 83       	std	Z+5, r28	; 0x05
	KEYPAD_init(&st_gs_keypadConfig);
 140:	cf 01       	movw	r24, r30
 142:	0e 94 9f 01 	call	0x33e	; 0x33e <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
 146:	e9 ec       	ldi	r30, 0xC9	; 201
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
 14c:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
 14e:	cf 01       	movw	r24, r30
 150:	0e 94 75 01 	call	0x2ea	; 0x2ea <BUZZER_init>
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <APP_welcome>:


void APP_welcome(void)
{
	LCD_clear();
 162:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_clear>
	LCD_setCursor(1,1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Welcome");
 16e:	80 e6       	ldi	r24, 0x60	; 96
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_writeString>
	u8_delay = 0 ;
 176:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <u8_delay>
 17a:	ff cf       	rjmp	.-2      	; 0x17a <APP_welcome+0x18>

0000017c <APP_set>:




void APP_set(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <APP_set+0x6>
 182:	1f 92       	push	r1
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
 188:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	itoa(u8_gs_programTemp,ch_arrs_curTempToString,10);
 18a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 18e:	4a e0       	ldi	r20, 0x0A	; 10
 190:	be 01       	movw	r22, r28
 192:	6e 5f       	subi	r22, 0xFE	; 254
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 2b 05 	call	0xa56	; 0xa56 <__itoa_ncheck>
	LCD_clear();
 19c:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_clear>
	LCD_setCursor(1,1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
 1a8:	88 e6       	ldi	r24, 0x68	; 104
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_writeString>
	LCD_setCursor(1,8);
 1b0:	68 e0       	ldi	r22, 0x08	; 8
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_setCursor>
	LCD_writeString((uint8_t*)ch_arrs_curTempToString);
 1b8:	ce 01       	movw	r24, r28
 1ba:	02 96       	adiw	r24, 0x02	; 2
 1bc:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_writeString>
	LCD_setCursor(1,11);
 1c0:	6b e0       	ldi	r22, 0x0B	; 11
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
 1c8:	88 e6       	ldi	r24, 0x68	; 104
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_writeString>
	
	
	KEYPAD_read(&u8_keypadData);
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <KEYPAD_read>
	if (u8_keypadData == '1')
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	81 33       	cpi	r24, 0x31	; 49
 1dc:	41 f4       	brne	.+16     	; 0x1ee <APP_set+0x72>
	{
		// Increment
		if (u8_gs_programTemp < 35)
 1de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_end>
 1e2:	83 32       	cpi	r24, 0x23	; 35
 1e4:	98 f4       	brcc	.+38     	; 0x20c <APP_set+0x90>
		{
			u8_gs_programTemp++;
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__data_end>
 1ec:	0f c0       	rjmp	.+30     	; 0x20c <APP_set+0x90>
		}
	}
	else if (u8_keypadData == '2')
 1ee:	82 33       	cpi	r24, 0x32	; 50
 1f0:	41 f4       	brne	.+16     	; 0x202 <APP_set+0x86>
	{
		// Decrement
		if (u8_gs_programTemp >18)
 1f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_end>
 1f6:	83 31       	cpi	r24, 0x13	; 19
 1f8:	48 f0       	brcs	.+18     	; 0x20c <APP_set+0x90>
		{
			u8_gs_programTemp--;
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__data_end>
 200:	05 c0       	rjmp	.+10     	; 0x20c <APP_set+0x90>
		}
	}
	else if (u8_keypadData == '3')
 202:	83 33       	cpi	r24, 0x33	; 51
 204:	19 f4       	brne	.+6      	; 0x20c <APP_set+0x90>
	{
		// Set
		u8_en_gs_programState = APP_WORKING;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <u8_en_gs_programState>
	}
	else{
		// do nothing
	}
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <APP_working>:



void APP_working(void)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <APP_working+0x6>
 21e:	1f 92       	push	r1
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
 224:	19 82       	std	Y+1, r1	; 0x01
 226:	4a e0       	ldi	r20, 0x0A	; 10
 228:	be 01       	movw	r22, r28
 22a:	6e 5f       	subi	r22, 0xFE	; 254
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 2b 05 	call	0xa56	; 0xa56 <__itoa_ncheck>
	
	// convert int to string
	itoa(u8_gs_curTemp,ch_arrs_curTempToString,10);
	
	// print current temp
	LCD_clear();
 236:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_clear>
	LCD_setCursor(1,1);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_setCursor>
	LCD_writeString((uint8_t*)"Current Temp = ");
 242:	8f e6       	ldi	r24, 0x6F	; 111
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_writeString>
	LCD_setCursor(2,1);
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_setCursor>
	LCD_writeString((uint8_t*)ch_arrs_curTempToString);
 252:	ce 01       	movw	r24, r28
 254:	02 96       	adiw	r24, 0x02	; 2
 256:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_writeString>
		
		
		// start the BUZZER
		BUZZER_start();
	}
	KEYPAD_read(&u8_keypadData);
 25a:	ce 01       	movw	r24, r28
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <KEYPAD_read>
	if (u8_keypadData == '5')
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	85 33       	cpi	r24, 0x35	; 53
 266:	81 f4       	brne	.+32     	; 0x288 <APP_working+0x70>
	{
		// reset
		
		// Stop the BUZZER
		BUZZER_stop();
 268:	0e 94 90 01 	call	0x320	; 0x320 <BUZZER_stop>
		
		// Set the program temp with the default temp
		u8_gs_programTemp = u8_gc_defaultTemp;
 26c:	84 e1       	ldi	r24, 0x14	; 20
 26e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__data_end>
		
		// clear LCD and print Temp value is resettled to 20
		LCD_clear();
 272:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_clear>
		LCD_setCursor(1,1);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_setCursor>
		LCD_writeString((uint8_t*)"Temp value is resettled to 20");
 27e:	8f e7       	ldi	r24, 0x7F	; 127
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_writeString>
 286:	ff cf       	rjmp	.-2      	; 0x286 <APP_working+0x6e>
		while(u8_delay <= 2);
		
		// change the program state
		u8_en_gs_programState = APP_SET_TEMP;
	}
	else if (u8_keypadData == '4')
 288:	84 33       	cpi	r24, 0x34	; 52
 28a:	31 f4       	brne	.+12     	; 0x298 <APP_working+0x80>
	{
		// adjust
		
		// Stop the BUZZER
		BUZZER_stop();
 28c:	0e 94 90 01 	call	0x320	; 0x320 <BUZZER_stop>
		
		// change the program state
		u8_en_gs_programState = APP_SET_TEMP;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <u8_en_gs_programState>
		
		// 1s timeout
		u8_delay = 0;
		while(u8_delay <= 2);
	}
}
 296:	0b c0       	rjmp	.+22     	; 0x2ae <APP_working+0x96>
		u8_en_gs_programState = APP_SET_TEMP;
	}
	else{
		
		// Invalid button
		LCD_clear();
 298:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_clear>
		LCD_setCursor(1,1);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_setCursor>
		LCD_writeString((uint8_t*)"the operation is not allowed");
 2a4:	8d e9       	ldi	r24, 0x9D	; 157
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_writeString>
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <APP_working+0x94>
		
		// 1s timeout
		u8_delay = 0;
		while(u8_delay <= 2);
	}
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <APP_start>:
void APP_timer0OvfHandeler(void);


void APP_start(void)
{
	APP_init();
 2ba:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_init>
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <APP_start+0xa>
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
 2c0:	0e 94 b1 00 	call	0x162	; 0x162 <APP_welcome>
void APP_start(void)
{
	APP_init();
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
 2c4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <u8_en_gs_programState>
 2c8:	81 11       	cpse	r24, r1
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <APP_start+0x18>
 2cc:	f9 cf       	rjmp	.-14     	; 0x2c0 <APP_start+0x6>
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
 2ce:	0e 94 be 00 	call	0x17c	; 0x17c <APP_set>
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
 2d2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <u8_en_gs_programState>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	d1 f3       	breq	.-12     	; 0x2ce <APP_start+0x14>
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <APP_start+0x26>
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
		{
			APP_working();
 2dc:	0e 94 0c 01 	call	0x218	; 0x218 <APP_working>
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
 2e0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <u8_en_gs_programState>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	d1 f3       	breq	.-12     	; 0x2dc <APP_start+0x22>
 2e8:	ed cf       	rjmp	.-38     	; 0x2c4 <APP_start+0xa>

000002ea <BUZZER_init>:
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
	
	return BUZZER_E_OK;
}
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	99 f0       	breq	.+38     	; 0x318 <BUZZER_init+0x2e>
 2f2:	ec 01       	movw	r28, r24
 2f4:	68 81       	ld	r22, Y
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 2fe:	81 11       	cpse	r24, r1
 300:	0c c0       	rjmp	.+24     	; 0x31a <BUZZER_init+0x30>
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	e6 ed       	ldi	r30, 0xD6	; 214
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	81 83       	std	Z+1, r24	; 0x01
 30a:	88 81       	ld	r24, Y
 30c:	80 83       	st	Z, r24
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <u8_gs_buzzerState>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	01 c0       	rjmp	.+2      	; 0x31a <BUZZER_init+0x30>
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <BUZZER_stop>:
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
 320:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <u8_gs_buzzerState>
 324:	88 23       	and	r24, r24
 326:	49 f0       	breq	.+18     	; 0x33a <BUZZER_stop+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
 328:	e6 ed       	ldi	r30, 0xD6	; 214
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	60 81       	ld	r22, Z
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	81 81       	ldd	r24, Z+1	; 0x01
 332:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	
	return BUZZER_E_OK;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
 33a:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
	
	return BUZZER_E_OK;
 33c:	08 95       	ret

0000033e <KEYPAD_init>:
#define F_CPU 1000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	a9 f1       	breq	.+106    	; 0x3b0 <KEYPAD_init+0x72>
 346:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
 348:	69 81       	ldd	r22, Y+1	; 0x01
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	88 81       	ld	r24, Y
 34e:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
 352:	6b 81       	ldd	r22, Y+3	; 0x03
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
 35c:	6d 81       	ldd	r22, Y+5	; 0x05
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	8c 81       	ldd	r24, Y+4	; 0x04
 362:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
 366:	69 81       	ldd	r22, Y+1	; 0x01
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	88 81       	ld	r24, Y
 36c:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
 370:	6b 81       	ldd	r22, Y+3	; 0x03
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
 37a:	6d 81       	ldd	r22, Y+5	; 0x05
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	8c 81       	ldd	r24, Y+4	; 0x04
 380:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
 384:	6f 81       	ldd	r22, Y+7	; 0x07
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	8e 81       	ldd	r24, Y+6	; 0x06
 38a:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
 38e:	69 85       	ldd	r22, Y+9	; 0x09
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	88 85       	ldd	r24, Y+8	; 0x08
 394:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
 398:	6b 85       	ldd	r22, Y+11	; 0x0b
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	8a 85       	ldd	r24, Y+10	; 0x0a
 39e:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
 3a2:	6d 85       	ldd	r22, Y+13	; 0x0d
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	8c 85       	ldd	r24, Y+12	; 0x0c
 3a8:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
 3b0:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	1f 92       	push	r1
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
 3ce:	00 ef       	ldi	r16, 0xF0	; 240
 3d0:	10 e0       	ldi	r17, 0x00	; 0
 3d2:	f8 01       	movw	r30, r16
 3d4:	67 81       	ldd	r22, Z+7	; 0x07
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	86 81       	ldd	r24, Z+6	; 0x06
 3da:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
 3de:	f8 01       	movw	r30, r16
 3e0:	61 85       	ldd	r22, Z+9	; 0x09
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	80 85       	ldd	r24, Z+8	; 0x08
 3e6:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
 3ea:	f8 01       	movw	r30, r16
 3ec:	63 85       	ldd	r22, Z+11	; 0x0b
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	82 85       	ldd	r24, Z+10	; 0x0a
 3f2:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
 3f6:	f8 01       	movw	r30, r16
 3f8:	65 85       	ldd	r22, Z+13	; 0x0d
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	84 85       	ldd	r24, Z+12	; 0x0c
 3fe:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
 402:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
 404:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
 406:	42 c0       	rjmp	.+132    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
 408:	e0 ef       	ldi	r30, 0xF0	; 240
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	67 81       	ldd	r22, Z+7	; 0x07
 40e:	60 0f       	add	r22, r16
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	86 81       	ldd	r24, Z+6	; 0x06
 414:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		for(j=0;j<3;j++)
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	2d c0       	rjmp	.+90     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
 41c:	e0 ef       	ldi	r30, 0xF0	; 240
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	61 81       	ldd	r22, Z+1	; 0x01
 422:	61 0f       	add	r22, r17
 424:	ae 01       	movw	r20, r28
 426:	4f 5f       	subi	r20, 0xFF	; 255
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	80 81       	ld	r24, Z
 42c:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_readPIN>
			if(value==0)
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	81 11       	cpse	r24, r1
 434:	1f c0       	rjmp	.+62     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 436:	0a c0       	rjmp	.+20     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
 438:	e0 ef       	ldi	r30, 0xF0	; 240
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	61 81       	ldd	r22, Z+1	; 0x01
 43e:	61 0f       	add	r22, r17
 440:	ae 01       	movw	r20, r28
 442:	4f 5f       	subi	r20, 0xFF	; 255
 444:	5f 4f       	sbci	r21, 0xFF	; 255
 446:	80 81       	ld	r24, Z
 448:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	88 23       	and	r24, r24
 450:	99 f3       	breq	.-26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
 452:	80 2f       	mov	r24, r16
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	fc 01       	movw	r30, r24
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	e8 0f       	add	r30, r24
 45e:	f9 1f       	adc	r31, r25
 460:	e6 54       	subi	r30, 0x46	; 70
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	e1 0f       	add	r30, r17
 466:	f1 1d       	adc	r31, r1
 468:	80 81       	ld	r24, Z
 46a:	f7 01       	movw	r30, r14
 46c:	80 83       	st	Z, r24
				flag=1;
 46e:	dd 24       	eor	r13, r13
 470:	d3 94       	inc	r13
				
				break;
 472:	03 c0       	rjmp	.+6      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
 474:	1f 5f       	subi	r17, 0xFF	; 255
 476:	13 30       	cpi	r17, 0x03	; 3
 478:	88 f2       	brcs	.-94     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
 47a:	e0 ef       	ldi	r30, 0xF0	; 240
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	67 81       	ldd	r22, Z+7	; 0x07
 480:	60 0f       	add	r22, r16
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	86 81       	ldd	r24, Z+6	; 0x06
 486:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
 48a:	0f 5f       	subi	r16, 0xFF	; 255
 48c:	04 30       	cpi	r16, 0x04	; 4
 48e:	08 f4       	brcc	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 490:	bb cf       	rjmp	.-138    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	df 16       	cp	r13, r31
 496:	19 f0       	breq	.+6      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
 498:	8e e4       	ldi	r24, 0x4E	; 78
 49a:	f7 01       	movw	r30, r14
 49c:	80 83       	st	Z, r24
		return ret_val;
	}
	
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0f 90       	pop	r0
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	08 95       	ret

000004b2 <ENABLE>:
	{
		//do nothing
	}
}
void ENABLE(void)
{
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
	
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_HIGH);
 4b6:	c9 ed       	ldi	r28, 0xD9	; 217
 4b8:	d0 e0       	ldi	r29, 0x00	; 0
 4ba:	6e 89       	ldd	r22, Y+22	; 0x16
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	8d 89       	ldd	r24, Y+21	; 0x15
 4c0:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	8a 95       	dec	r24
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <ENABLE+0x14>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <ENABLE+0x1a>
	_delay_us(1);
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_LOW);
 4cc:	6e 89       	ldd	r22, Y+22	; 0x16
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	8d 89       	ldd	r24, Y+21	; 0x15
 4d2:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	//_delay_us(1);

 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <LCD_cmd>:
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
void LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	ec 01       	movw	r28, r24
 4e4:	16 2f       	mov	r17, r22
 4e6:	6e 89       	ldd	r22, Y+22	; 0x16
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	8d 89       	ldd	r24, Y+21	; 0x15
 4ec:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_LOW);
 4f0:	6a 89       	ldd	r22, Y+18	; 0x12
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	89 89       	ldd	r24, Y+17	; 0x11
 4f6:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 4fa:	6c 89       	ldd	r22, Y+20	; 0x14
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	8b 89       	ldd	r24, Y+19	; 0x13
 500:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 504:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <mode>
 508:	81 11       	cpse	r24, r1
 50a:	48 c0       	rjmp	.+144    	; 0x59c <LCD_cmd+0xc0>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 50c:	68 89       	ldd	r22, Y+16	; 0x10
 50e:	41 2f       	mov	r20, r17
 510:	44 1f       	adc	r20, r20
 512:	44 27       	eor	r20, r20
 514:	44 1f       	adc	r20, r20
 516:	8f 85       	ldd	r24, Y+15	; 0x0f
 518:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 51c:	6e 85       	ldd	r22, Y+14	; 0x0e
 51e:	16 fb       	bst	r17, 6
 520:	44 27       	eor	r20, r20
 522:	40 f9       	bld	r20, 0
 524:	8d 85       	ldd	r24, Y+13	; 0x0d
 526:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 52a:	6c 85       	ldd	r22, Y+12	; 0x0c
 52c:	15 fb       	bst	r17, 5
 52e:	44 27       	eor	r20, r20
 530:	40 f9       	bld	r20, 0
 532:	8b 85       	ldd	r24, Y+11	; 0x0b
 534:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 538:	6a 85       	ldd	r22, Y+10	; 0x0a
 53a:	14 fb       	bst	r17, 4
 53c:	44 27       	eor	r20, r20
 53e:	40 f9       	bld	r20, 0
 540:	89 85       	ldd	r24, Y+9	; 0x09
 542:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		ENABLE();
 546:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54a:	8f e6       	ldi	r24, 0x6F	; 111
 54c:	97 e1       	ldi	r25, 0x17	; 23
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <LCD_cmd+0x72>
 552:	00 c0       	rjmp	.+0      	; 0x554 <LCD_cmd+0x78>
 554:	00 00       	nop
		_delay_ms(3);
	    DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 556:	68 89       	ldd	r22, Y+16	; 0x10
 558:	13 fb       	bst	r17, 3
 55a:	44 27       	eor	r20, r20
 55c:	40 f9       	bld	r20, 0
 55e:	8f 85       	ldd	r24, Y+15	; 0x0f
 560:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 564:	6e 85       	ldd	r22, Y+14	; 0x0e
 566:	12 fb       	bst	r17, 2
 568:	44 27       	eor	r20, r20
 56a:	40 f9       	bld	r20, 0
 56c:	8d 85       	ldd	r24, Y+13	; 0x0d
 56e:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 572:	6c 85       	ldd	r22, Y+12	; 0x0c
 574:	11 fb       	bst	r17, 1
 576:	44 27       	eor	r20, r20
 578:	40 f9       	bld	r20, 0
 57a:	8b 85       	ldd	r24, Y+11	; 0x0b
 57c:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 580:	6a 85       	ldd	r22, Y+10	; 0x0a
 582:	41 2f       	mov	r20, r17
 584:	41 70       	andi	r20, 0x01	; 1
 586:	89 85       	ldd	r24, Y+9	; 0x09
 588:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		ENABLE();
 58c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ENABLE>
 590:	8f e6       	ldi	r24, 0x6F	; 111
 592:	97 e1       	ldi	r25, 0x17	; 23
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <LCD_cmd+0xb8>
 598:	00 c0       	rjmp	.+0      	; 0x59a <LCD_cmd+0xbe>
 59a:	00 00       	nop
	}
	else
	{
		//do nothing
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d
	}
	return ret;
	
}
<<<<<<< HEAD
 168:	08 95       	ret

0000016a <ADC_read>:
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, double * u16_data)
{
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
 170:	88 30       	cpi	r24, 0x08	; 8
 172:	08 f0       	brcs	.+2      	; 0x176 <ADC_read+0xc>
 174:	47 c0       	rjmp	.+142    	; 0x204 <ADC_read+0x9a>
 176:	61 15       	cp	r22, r1
 178:	71 05       	cpc	r23, r1
 17a:	09 f4       	brne	.+2      	; 0x17e <ADC_read+0x14>
 17c:	45 c0       	rjmp	.+138    	; 0x208 <ADC_read+0x9e>
 17e:	8b 01       	movw	r16, r22
 180:	c8 2f       	mov	r28, r24
		ret =	ADC_E_NOT_OK;
	}
	else{
		if(((DDRD & (1U<<u8_channelID))>>u8_channelID) != 0){
 182:	41 b3       	in	r20, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9c 01       	movw	r18, r24
 18a:	0c 2e       	mov	r0, r28
 18c:	02 c0       	rjmp	.+4      	; 0x192 <ADC_read+0x28>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <ADC_read+0x24>
 196:	84 2f       	mov	r24, r20
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	82 23       	and	r24, r18
 19c:	93 23       	and	r25, r19
 19e:	0c 2e       	mov	r0, r28
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <ADC_read+0x3c>
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <ADC_read+0x38>
 1aa:	89 2b       	or	r24, r25
 1ac:	29 f0       	breq	.+10     	; 0x1b8 <ADC_read+0x4e>
			DIO_init (porta, u8_channelID, STD_INPUT);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	6c 2f       	mov	r22, r28
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
		}
		
		while(READ_BIT(ADCSRA_ADD, ADC_START_CONVERSION) == 1);
 1b8:	36 99       	sbic	0x06, 6	; 6
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <ADC_read+0x4e>
		
		ADMUX_ADD  = (0xE0 & ADMUX_ADD) | u8_channelID;
 1bc:	87 b1       	in	r24, 0x07	; 7
 1be:	80 7e       	andi	r24, 0xE0	; 224
 1c0:	8c 2b       	or	r24, r28
 1c2:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADCSRA_ADD, ADC_START_CONVERSION);
 1c4:	86 b1       	in	r24, 0x06	; 6
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	86 b9       	out	0x06, r24	; 6
		while(READ_BIT(ADCSRA_ADD, ADC_INT_FLAG) == 0);
 1ca:	34 9b       	sbis	0x06, 4	; 6
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <ADC_read+0x60>
		uint16_t	adc_data_temp=0;	
		adc_data_temp = ADCL_ADD;
 1ce:	84 b1       	in	r24, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
 1d0:	65 b1       	in	r22, 0x05	; 5
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	76 2f       	mov	r23, r22
 1d6:	66 27       	eor	r22, r22
 1d8:	68 2b       	or	r22, r24
		*u16_data  = (Quantisation_step*adc_data_temp);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 b5 01 	call	0x36a	; 0x36a <__floatunsisf>
 1e2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ee:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1f2:	0e 94 43 02 	call	0x486	; 0x486 <__mulsf3>
 1f6:	f8 01       	movw	r30, r16
 1f8:	60 83       	st	Z, r22
 1fa:	71 83       	std	Z+1, r23	; 0x01
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	93 83       	std	Z+3, r25	; 0x03
	return ret;
	
}
u8_en_adcErrorsType ADC_read (u8_en_adcChannelId u8_channelID, double * u16_data)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	03 c0       	rjmp	.+6      	; 0x20a <ADC_read+0xa0>
	if(u8_channelID < ADC_CHANNEL_0 || u8_channelID > ADC_CHANNEL_7 || u16_data == NULL){
		ret =	ADC_E_NOT_OK;
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	01 c0       	rjmp	.+2      	; 0x20a <ADC_read+0xa0>
 208:	84 e0       	ldi	r24, 0x04	; 4
		adc_data_temp |=(ADCH_ADD<<8);
		*u16_data  = (Quantisation_step*adc_data_temp);
	}
	
	return ret;
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <DIO_init>:
=======
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	08 95       	ret

000005a4 <LCD_init>:
#include<util/delay.h>
extern st_lcdConfigType st_gs_lcdConfig;
static uint8_t mode;

u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	ec 01       	movw	r28, r24
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=DIO_init(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_OUTPUT);
 5ac:	6a 89       	ldd	r22, Y+18	; 0x12
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	89 89       	ldd	r24, Y+17	; 0x11
 5b2:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 5b6:	18 2f       	mov	r17, r24
	ret_val |=DIO_init(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_OUTPUT);
 5b8:	6c 89       	ldd	r22, Y+20	; 0x14
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	8b 89       	ldd	r24, Y+19	; 0x13
 5be:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 5c2:	18 2b       	or	r17, r24
	ret_val |=DIO_init(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_OUTPUT);
 5c4:	6e 89       	ldd	r22, Y+22	; 0x16
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	8d 89       	ldd	r24, Y+21	; 0x15
 5ca:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 5ce:	18 2b       	or	r17, r24
	switch(st_config->u8_mode)
 5d0:	88 81       	ld	r24, Y
 5d2:	88 23       	and	r24, r24
 5d4:	19 f0       	breq	.+6      	; 0x5dc <LCD_init+0x38>
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	99 f1       	breq	.+102    	; 0x640 <LCD_init+0x9c>
 5da:	77 c0       	rjmp	.+238    	; 0x6ca <LCD_init+0x126>
	{
		case LCD_4_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x02);
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	89 ed       	ldi	r24, 0xD9	; 217
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x28);
 5e6:	68 e2       	ldi	r22, 0x28	; 40
 5e8:	89 ed       	ldi	r24, 0xD9	; 217
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 5f0:	6c e0       	ldi	r22, 0x0C	; 12
 5f2:	89 ed       	ldi	r24, 0xD9	; 217
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 5fa:	66 e0       	ldi	r22, 0x06	; 6
 5fc:	89 ed       	ldi	r24, 0xD9	; 217
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	89 ed       	ldi	r24, 0xD9	; 217
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 60e:	6a 85       	ldd	r22, Y+10	; 0x0a
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	89 85       	ldd	r24, Y+9	; 0x09
 614:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 618:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 61a:	6c 85       	ldd	r22, Y+12	; 0x0c
 61c:	41 e0       	ldi	r20, 0x01	; 1
 61e:	8b 85       	ldd	r24, Y+11	; 0x0b
 620:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 624:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 626:	6e 85       	ldd	r22, Y+14	; 0x0e
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	8d 85       	ldd	r24, Y+13	; 0x0d
 62c:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 630:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 632:	68 89       	ldd	r22, Y+16	; 0x10
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	8f 85       	ldd	r24, Y+15	; 0x0f
 638:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 63c:	81 2b       	or	r24, r17
								break;
 63e:	46 c0       	rjmp	.+140    	; 0x6cc <LCD_init+0x128>
								
	case LCD_8_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x38);
 640:	68 e3       	ldi	r22, 0x38	; 56
 642:	89 ed       	ldi	r24, 0xD9	; 217
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 64a:	6c e0       	ldi	r22, 0x0C	; 12
 64c:	89 ed       	ldi	r24, 0xD9	; 217
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 654:	66 e0       	ldi	r22, 0x06	; 6
 656:	89 ed       	ldi	r24, 0xD9	; 217
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	89 ed       	ldi	r24, 0xD9	; 217
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		                        ret_val |=DIO_init(st_config->u8_d0Pin[0],st_config->u8_d0Pin[1],STD_OUTPUT);
 668:	6a 81       	ldd	r22, Y+2	; 0x02
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 672:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d1Pin[0],st_config->u8_d1Pin[1],STD_OUTPUT);
 674:	6c 81       	ldd	r22, Y+4	; 0x04
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 67e:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d2Pin[0],st_config->u8_d2Pin[1],STD_OUTPUT);
 680:	6e 81       	ldd	r22, Y+6	; 0x06
 682:	41 e0       	ldi	r20, 0x01	; 1
 684:	8d 81       	ldd	r24, Y+5	; 0x05
 686:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 68a:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d3Pin[0],st_config->u8_d3Pin[1],STD_OUTPUT);
 68c:	68 85       	ldd	r22, Y+8	; 0x08
 68e:	41 e0       	ldi	r20, 0x01	; 1
 690:	8f 81       	ldd	r24, Y+7	; 0x07
 692:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 696:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 698:	6a 85       	ldd	r22, Y+10	; 0x0a
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	89 85       	ldd	r24, Y+9	; 0x09
 69e:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 6a2:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 6a4:	6c 85       	ldd	r22, Y+12	; 0x0c
 6a6:	41 e0       	ldi	r20, 0x01	; 1
 6a8:	8b 85       	ldd	r24, Y+11	; 0x0b
 6aa:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 6ae:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 6b0:	6e 85       	ldd	r22, Y+14	; 0x0e
 6b2:	41 e0       	ldi	r20, 0x01	; 1
 6b4:	8d 85       	ldd	r24, Y+13	; 0x0d
 6b6:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 6ba:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 6bc:	68 89       	ldd	r22, Y+16	; 0x10
 6be:	41 e0       	ldi	r20, 0x01	; 1
 6c0:	8f 85       	ldd	r24, Y+15	; 0x0f
 6c2:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_init>
 6c6:	81 2b       	or	r24, r17
								break;
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <LCD_init+0x128>
	default: ret_val=LCD_E_NOT_OK;
 6ca:	85 e0       	ldi	r24, 0x05	; 5
				break;
								
	}
	mode=st_config->u8_mode;
 6cc:	98 81       	ld	r25, Y
 6ce:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <mode>
	return ret_val;
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	08 95       	ret

000006da <LCD_clear>:
u8_en_lcdErrorsType LCD_clear (void)
{
	LCD_cmd(&st_gs_lcdConfig,0x01);
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	89 ed       	ldi	r24, 0xD9	; 217
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
	return LCD_E_OK;
}
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	08 95       	ret

000006e8 <LCD_setCursor>:
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	switch(u8_row)
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	19 f0       	breq	.+6      	; 0x6f2 <LCD_setCursor+0xa>
 6ec:	82 30       	cpi	r24, 0x02	; 2
 6ee:	39 f0       	breq	.+14     	; 0x6fe <LCD_setCursor+0x16>
 6f0:	0b c0       	rjmp	.+22     	; 0x708 <LCD_setCursor+0x20>
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
 6f2:	61 58       	subi	r22, 0x81	; 129
 6f4:	89 ed       	ldi	r24, 0xD9	; 217
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <LCD_setCursor+0x20>
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
 6fe:	61 54       	subi	r22, 0x41	; 65
 700:	89 ed       	ldi	r24, 0xD9	; 217
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_cmd>
		
	}
	return LCD_E_OK;
}
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	08 95       	ret

0000070c <LCD_char>:
	{
		//do nothing
	}
}
  void LCD_char(st_lcdConfigType* st_config,uint8_t cmd)
{
 70c:	1f 93       	push	r17
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	ec 01       	movw	r28, r24
 714:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 716:	6e 89       	ldd	r22, Y+22	; 0x16
 718:	40 e0       	ldi	r20, 0x00	; 0
 71a:	8d 89       	ldd	r24, Y+21	; 0x15
 71c:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_HIGH);
 720:	6a 89       	ldd	r22, Y+18	; 0x12
 722:	41 e0       	ldi	r20, 0x01	; 1
 724:	89 89       	ldd	r24, Y+17	; 0x11
 726:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 72a:	6c 89       	ldd	r22, Y+20	; 0x14
 72c:	40 e0       	ldi	r20, 0x00	; 0
 72e:	8b 89       	ldd	r24, Y+19	; 0x13
 730:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 734:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <mode>
 738:	81 11       	cpse	r24, r1
 73a:	48 c0       	rjmp	.+144    	; 0x7cc <LCD_char+0xc0>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 73c:	68 89       	ldd	r22, Y+16	; 0x10
 73e:	41 2f       	mov	r20, r17
 740:	44 1f       	adc	r20, r20
 742:	44 27       	eor	r20, r20
 744:	44 1f       	adc	r20, r20
 746:	8f 85       	ldd	r24, Y+15	; 0x0f
 748:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 74c:	6e 85       	ldd	r22, Y+14	; 0x0e
 74e:	16 fb       	bst	r17, 6
 750:	44 27       	eor	r20, r20
 752:	40 f9       	bld	r20, 0
 754:	8d 85       	ldd	r24, Y+13	; 0x0d
 756:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 75a:	6c 85       	ldd	r22, Y+12	; 0x0c
 75c:	15 fb       	bst	r17, 5
 75e:	44 27       	eor	r20, r20
 760:	40 f9       	bld	r20, 0
 762:	8b 85       	ldd	r24, Y+11	; 0x0b
 764:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 768:	6a 85       	ldd	r22, Y+10	; 0x0a
 76a:	14 fb       	bst	r17, 4
 76c:	44 27       	eor	r20, r20
 76e:	40 f9       	bld	r20, 0
 770:	89 85       	ldd	r24, Y+9	; 0x09
 772:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		ENABLE();
 776:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ENABLE>
 77a:	8f e6       	ldi	r24, 0x6F	; 111
 77c:	97 e1       	ldi	r25, 0x17	; 23
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <LCD_char+0x72>
 782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_char+0x78>
 784:	00 00       	nop
		_delay_ms(3);
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 786:	68 89       	ldd	r22, Y+16	; 0x10
 788:	13 fb       	bst	r17, 3
 78a:	44 27       	eor	r20, r20
 78c:	40 f9       	bld	r20, 0
 78e:	8f 85       	ldd	r24, Y+15	; 0x0f
 790:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 794:	6e 85       	ldd	r22, Y+14	; 0x0e
 796:	12 fb       	bst	r17, 2
 798:	44 27       	eor	r20, r20
 79a:	40 f9       	bld	r20, 0
 79c:	8d 85       	ldd	r24, Y+13	; 0x0d
 79e:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 7a2:	6c 85       	ldd	r22, Y+12	; 0x0c
 7a4:	11 fb       	bst	r17, 1
 7a6:	44 27       	eor	r20, r20
 7a8:	40 f9       	bld	r20, 0
 7aa:	8b 85       	ldd	r24, Y+11	; 0x0b
 7ac:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 7b0:	6a 85       	ldd	r22, Y+10	; 0x0a
 7b2:	41 2f       	mov	r20, r17
 7b4:	41 70       	andi	r20, 0x01	; 1
 7b6:	89 85       	ldd	r24, Y+9	; 0x09
 7b8:	0e 94 45 04 	call	0x88a	; 0x88a <DIO_writePIN>
		ENABLE();
 7bc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ENABLE>
 7c0:	8f e6       	ldi	r24, 0x6F	; 111
 7c2:	97 e1       	ldi	r25, 0x17	; 23
 7c4:	01 97       	sbiw	r24, 0x01	; 1
 7c6:	f1 f7       	brne	.-4      	; 0x7c4 <LCD_char+0xb8>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <LCD_char+0xbe>
 7ca:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
 7d2:	08 95       	ret

000007d4 <LCD_writeString>:
		
	}
	return LCD_E_OK;
}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	8c 01       	movw	r16, r24
	uint8_t i=0;
 7dc:	c0 e0       	ldi	r28, 0x00	; 0
	while(u8_data[i] !='\0')
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <LCD_writeString+0x16>
	{
		LCD_char(&st_gs_lcdConfig,u8_data[i]);
 7e0:	89 ed       	ldi	r24, 0xD9	; 217
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_char>
		i++;
 7e8:	cf 5f       	subi	r28, 0xFF	; 255
	return LCD_E_OK;
}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
	uint8_t i=0;
	while(u8_data[i] !='\0')
 7ea:	f8 01       	movw	r30, r16
 7ec:	ec 0f       	add	r30, r28
 7ee:	f1 1d       	adc	r31, r1
 7f0:	60 81       	ld	r22, Z
 7f2:	61 11       	cpse	r22, r1
 7f4:	f5 cf       	rjmp	.-22     	; 0x7e0 <LCD_writeString+0xc>
		LCD_char(&st_gs_lcdConfig,u8_data[i]);
		i++;
		
	}
	return LCD_E_OK;
}
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	cf 91       	pop	r28
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	08 95       	ret

00000800 <TEMP_SENSOR_init>:


u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
	return 0;
}
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	08 95       	ret

00000804 <TIMER_Manager_init>:
	return 0;
}
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	return 0;
}
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret

00000808 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	return 0;
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	08 95       	ret

0000080c <main>:

#include "APP/app.h"

int main(void)
{
	APP_start();
 80c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <APP_start>
}
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	08 95       	ret

00000816 <DIO_init>:
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
<<<<<<< HEAD
 212:	68 30       	cpi	r22, 0x08	; 8
 214:	a0 f5       	brcc	.+104    	; 0x27e <DIO_init+0x6c>
	{
		if (port == porta)
 216:	81 11       	cpse	r24, r1
 218:	0b c0       	rjmp	.+22     	; 0x230 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 21a:	8a b3       	in	r24, 0x1a	; 26
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_init+0x12>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_init+0xe>
 228:	48 2b       	or	r20, r24
 22a:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret
		}
		else if (port == portb)
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	59 f4       	brne	.+22     	; 0x24a <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 234:	87 b3       	in	r24, 0x17	; 23
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_init+0x2c>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_init+0x28>
 242:	48 2b       	or	r20, r24
 244:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
		}
		else if (port == portc)
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	59 f4       	brne	.+22     	; 0x264 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 24e:	84 b3       	in	r24, 0x14	; 20
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_init+0x46>
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_init+0x42>
 25c:	48 2b       	or	r20, r24
 25e:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
		}
		else if (port == portd)
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 268:	81 b3       	in	r24, 0x11	; 17
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_init+0x60>
 26e:	44 0f       	add	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_init+0x5c>
 276:	48 2b       	or	r20, r24
 278:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
=======
 816:	68 30       	cpi	r22, 0x08	; 8
 818:	a0 f5       	brcc	.+104    	; 0x882 <__stack+0x23>
	{
		if (port == porta)
 81a:	81 11       	cpse	r24, r1
 81c:	0b c0       	rjmp	.+22     	; 0x834 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 81e:	8a b3       	in	r24, 0x1a	; 26
 820:	50 e0       	ldi	r21, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_init+0x12>
 824:	44 0f       	add	r20, r20
 826:	55 1f       	adc	r21, r21
 828:	6a 95       	dec	r22
 82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_init+0xe>
 82c:	48 2b       	or	r20, r24
 82e:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	08 95       	ret
		}
		else if (port == portb)
 834:	81 30       	cpi	r24, 0x01	; 1
 836:	59 f4       	brne	.+22     	; 0x84e <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 838:	87 b3       	in	r24, 0x17	; 23
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	02 c0       	rjmp	.+4      	; 0x842 <DIO_init+0x2c>
 83e:	44 0f       	add	r20, r20
 840:	55 1f       	adc	r21, r21
 842:	6a 95       	dec	r22
 844:	e2 f7       	brpl	.-8      	; 0x83e <DIO_init+0x28>
 846:	48 2b       	or	r20, r24
 848:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	08 95       	ret
		}
		else if (port == portc)
 84e:	82 30       	cpi	r24, 0x02	; 2
 850:	59 f4       	brne	.+22     	; 0x868 <__stack+0x9>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 852:	84 b3       	in	r24, 0x14	; 20
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_init+0x46>
 858:	44 0f       	add	r20, r20
 85a:	55 1f       	adc	r21, r21
 85c:	6a 95       	dec	r22
 85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_init+0x42>
 860:	48 2b       	or	r20, r24
 862:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	08 95       	ret
		}
		else if (port == portd)
 868:	83 30       	cpi	r24, 0x03	; 3
 86a:	69 f4       	brne	.+26     	; 0x886 <__stack+0x27>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 86c:	81 b3       	in	r24, 0x11	; 17
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
 872:	44 0f       	add	r20, r20
 874:	55 1f       	adc	r21, r21
 876:	6a 95       	dec	r22
 878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
 87a:	48 2b       	or	r20, r24
 87c:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	08 95       	ret
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
<<<<<<< HEAD
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
=======
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	08 95       	ret
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
<<<<<<< HEAD
 282:	82 e0       	ldi	r24, 0x02	; 2
=======
 886:	82 e0       	ldi	r24, 0x02	; 2
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d
		
	}
	else{
		return DIO_InvalidPin;
	}
}
<<<<<<< HEAD
 284:	08 95       	ret

00000286 <__divsf3>:
 286:	0e 94 57 01 	call	0x2ae	; 0x2ae <__divsf3x>
 28a:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_round>
 28e:	0e 94 02 02 	call	0x404	; 0x404 <__fp_pscB>
 292:	58 f0       	brcs	.+22     	; 0x2aa <__divsf3+0x24>
 294:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_pscA>
 298:	40 f0       	brcs	.+16     	; 0x2aa <__divsf3+0x24>
 29a:	29 f4       	brne	.+10     	; 0x2a6 <__divsf3+0x20>
 29c:	5f 3f       	cpi	r21, 0xFF	; 255
 29e:	29 f0       	breq	.+10     	; 0x2aa <__divsf3+0x24>
 2a0:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 2a4:	51 11       	cpse	r21, r1
 2a6:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>
 2aa:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__fp_nan>

000002ae <__divsf3x>:
 2ae:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_split3>
 2b2:	68 f3       	brcs	.-38     	; 0x28e <__divsf3+0x8>

000002b4 <__divsf3_pse>:
 2b4:	99 23       	and	r25, r25
 2b6:	b1 f3       	breq	.-20     	; 0x2a4 <__divsf3+0x1e>
 2b8:	55 23       	and	r21, r21
 2ba:	91 f3       	breq	.-28     	; 0x2a0 <__divsf3+0x1a>
 2bc:	95 1b       	sub	r25, r21
 2be:	55 0b       	sbc	r21, r21
 2c0:	bb 27       	eor	r27, r27
 2c2:	aa 27       	eor	r26, r26
 2c4:	62 17       	cp	r22, r18
 2c6:	73 07       	cpc	r23, r19
 2c8:	84 07       	cpc	r24, r20
 2ca:	38 f0       	brcs	.+14     	; 0x2da <__divsf3_pse+0x26>
 2cc:	9f 5f       	subi	r25, 0xFF	; 255
 2ce:	5f 4f       	sbci	r21, 0xFF	; 255
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	44 1f       	adc	r20, r20
 2d6:	aa 1f       	adc	r26, r26
 2d8:	a9 f3       	breq	.-22     	; 0x2c4 <__divsf3_pse+0x10>
 2da:	35 d0       	rcall	.+106    	; 0x346 <__divsf3_pse+0x92>
 2dc:	0e 2e       	mov	r0, r30
 2de:	3a f0       	brmi	.+14     	; 0x2ee <__divsf3_pse+0x3a>
 2e0:	e0 e8       	ldi	r30, 0x80	; 128
 2e2:	32 d0       	rcall	.+100    	; 0x348 <__divsf3_pse+0x94>
 2e4:	91 50       	subi	r25, 0x01	; 1
 2e6:	50 40       	sbci	r21, 0x00	; 0
 2e8:	e6 95       	lsr	r30
 2ea:	00 1c       	adc	r0, r0
 2ec:	ca f7       	brpl	.-14     	; 0x2e0 <__divsf3_pse+0x2c>
 2ee:	2b d0       	rcall	.+86     	; 0x346 <__divsf3_pse+0x92>
 2f0:	fe 2f       	mov	r31, r30
 2f2:	29 d0       	rcall	.+82     	; 0x346 <__divsf3_pse+0x92>
 2f4:	66 0f       	add	r22, r22
 2f6:	77 1f       	adc	r23, r23
 2f8:	88 1f       	adc	r24, r24
 2fa:	bb 1f       	adc	r27, r27
 2fc:	26 17       	cp	r18, r22
 2fe:	37 07       	cpc	r19, r23
 300:	48 07       	cpc	r20, r24
 302:	ab 07       	cpc	r26, r27
 304:	b0 e8       	ldi	r27, 0x80	; 128
 306:	09 f0       	breq	.+2      	; 0x30a <__divsf3_pse+0x56>
 308:	bb 0b       	sbc	r27, r27
 30a:	80 2d       	mov	r24, r0
 30c:	bf 01       	movw	r22, r30
 30e:	ff 27       	eor	r31, r31
 310:	93 58       	subi	r25, 0x83	; 131
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	3a f0       	brmi	.+14     	; 0x324 <__divsf3_pse+0x70>
 316:	9e 3f       	cpi	r25, 0xFE	; 254
 318:	51 05       	cpc	r21, r1
 31a:	78 f0       	brcs	.+30     	; 0x33a <__divsf3_pse+0x86>
 31c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 320:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>
 324:	5f 3f       	cpi	r21, 0xFF	; 255
 326:	e4 f3       	brlt	.-8      	; 0x320 <__divsf3_pse+0x6c>
 328:	98 3e       	cpi	r25, 0xE8	; 232
 32a:	d4 f3       	brlt	.-12     	; 0x320 <__divsf3_pse+0x6c>
 32c:	86 95       	lsr	r24
 32e:	77 95       	ror	r23
 330:	67 95       	ror	r22
 332:	b7 95       	ror	r27
 334:	f7 95       	ror	r31
 336:	9f 5f       	subi	r25, 0xFF	; 255
 338:	c9 f7       	brne	.-14     	; 0x32c <__divsf3_pse+0x78>
 33a:	88 0f       	add	r24, r24
 33c:	91 1d       	adc	r25, r1
 33e:	96 95       	lsr	r25
 340:	87 95       	ror	r24
 342:	97 f9       	bld	r25, 7
 344:	08 95       	ret
 346:	e1 e0       	ldi	r30, 0x01	; 1
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	88 1f       	adc	r24, r24
 34e:	bb 1f       	adc	r27, r27
 350:	62 17       	cp	r22, r18
 352:	73 07       	cpc	r23, r19
 354:	84 07       	cpc	r24, r20
 356:	ba 07       	cpc	r27, r26
 358:	20 f0       	brcs	.+8      	; 0x362 <__divsf3_pse+0xae>
 35a:	62 1b       	sub	r22, r18
 35c:	73 0b       	sbc	r23, r19
 35e:	84 0b       	sbc	r24, r20
 360:	ba 0b       	sbc	r27, r26
 362:	ee 1f       	adc	r30, r30
 364:	88 f7       	brcc	.-30     	; 0x348 <__divsf3_pse+0x94>
 366:	e0 95       	com	r30
 368:	08 95       	ret

0000036a <__floatunsisf>:
 36a:	e8 94       	clt
 36c:	09 c0       	rjmp	.+18     	; 0x380 <__floatsisf+0x12>

0000036e <__floatsisf>:
 36e:	97 fb       	bst	r25, 7
 370:	3e f4       	brtc	.+14     	; 0x380 <__floatsisf+0x12>
 372:	90 95       	com	r25
 374:	80 95       	com	r24
 376:	70 95       	com	r23
 378:	61 95       	neg	r22
 37a:	7f 4f       	sbci	r23, 0xFF	; 255
 37c:	8f 4f       	sbci	r24, 0xFF	; 255
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	99 23       	and	r25, r25
 382:	a9 f0       	breq	.+42     	; 0x3ae <__floatsisf+0x40>
 384:	f9 2f       	mov	r31, r25
 386:	96 e9       	ldi	r25, 0x96	; 150
 388:	bb 27       	eor	r27, r27
 38a:	93 95       	inc	r25
 38c:	f6 95       	lsr	r31
 38e:	87 95       	ror	r24
 390:	77 95       	ror	r23
 392:	67 95       	ror	r22
 394:	b7 95       	ror	r27
 396:	f1 11       	cpse	r31, r1
 398:	f8 cf       	rjmp	.-16     	; 0x38a <__floatsisf+0x1c>
 39a:	fa f4       	brpl	.+62     	; 0x3da <__floatsisf+0x6c>
 39c:	bb 0f       	add	r27, r27
 39e:	11 f4       	brne	.+4      	; 0x3a4 <__floatsisf+0x36>
 3a0:	60 ff       	sbrs	r22, 0
 3a2:	1b c0       	rjmp	.+54     	; 0x3da <__floatsisf+0x6c>
 3a4:	6f 5f       	subi	r22, 0xFF	; 255
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	16 c0       	rjmp	.+44     	; 0x3da <__floatsisf+0x6c>
 3ae:	88 23       	and	r24, r24
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <__floatsisf+0x48>
 3b2:	96 e9       	ldi	r25, 0x96	; 150
 3b4:	11 c0       	rjmp	.+34     	; 0x3d8 <__floatsisf+0x6a>
 3b6:	77 23       	and	r23, r23
 3b8:	21 f0       	breq	.+8      	; 0x3c2 <__floatsisf+0x54>
 3ba:	9e e8       	ldi	r25, 0x8E	; 142
 3bc:	87 2f       	mov	r24, r23
 3be:	76 2f       	mov	r23, r22
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <__floatsisf+0x5e>
 3c2:	66 23       	and	r22, r22
 3c4:	71 f0       	breq	.+28     	; 0x3e2 <__floatsisf+0x74>
 3c6:	96 e8       	ldi	r25, 0x86	; 134
 3c8:	86 2f       	mov	r24, r22
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	2a f0       	brmi	.+10     	; 0x3da <__floatsisf+0x6c>
 3d0:	9a 95       	dec	r25
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	da f7       	brpl	.-10     	; 0x3d0 <__floatsisf+0x62>
 3da:	88 0f       	add	r24, r24
 3dc:	96 95       	lsr	r25
 3de:	87 95       	ror	r24
 3e0:	97 f9       	bld	r25, 7
 3e2:	08 95       	ret

000003e4 <__fp_inf>:
 3e4:	97 f9       	bld	r25, 7
 3e6:	9f 67       	ori	r25, 0x7F	; 127
 3e8:	80 e8       	ldi	r24, 0x80	; 128
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	08 95       	ret

000003f0 <__fp_nan>:
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	80 ec       	ldi	r24, 0xC0	; 192
 3f4:	08 95       	ret

000003f6 <__fp_pscA>:
 3f6:	00 24       	eor	r0, r0
 3f8:	0a 94       	dec	r0
 3fa:	16 16       	cp	r1, r22
 3fc:	17 06       	cpc	r1, r23
 3fe:	18 06       	cpc	r1, r24
 400:	09 06       	cpc	r0, r25
 402:	08 95       	ret

00000404 <__fp_pscB>:
 404:	00 24       	eor	r0, r0
 406:	0a 94       	dec	r0
 408:	12 16       	cp	r1, r18
 40a:	13 06       	cpc	r1, r19
 40c:	14 06       	cpc	r1, r20
 40e:	05 06       	cpc	r0, r21
 410:	08 95       	ret

00000412 <__fp_round>:
 412:	09 2e       	mov	r0, r25
 414:	03 94       	inc	r0
 416:	00 0c       	add	r0, r0
 418:	11 f4       	brne	.+4      	; 0x41e <__fp_round+0xc>
 41a:	88 23       	and	r24, r24
 41c:	52 f0       	brmi	.+20     	; 0x432 <__fp_round+0x20>
 41e:	bb 0f       	add	r27, r27
 420:	40 f4       	brcc	.+16     	; 0x432 <__fp_round+0x20>
 422:	bf 2b       	or	r27, r31
 424:	11 f4       	brne	.+4      	; 0x42a <__fp_round+0x18>
 426:	60 ff       	sbrs	r22, 0
 428:	04 c0       	rjmp	.+8      	; 0x432 <__fp_round+0x20>
 42a:	6f 5f       	subi	r22, 0xFF	; 255
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	8f 4f       	sbci	r24, 0xFF	; 255
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	08 95       	ret

00000434 <__fp_split3>:
 434:	57 fd       	sbrc	r21, 7
 436:	90 58       	subi	r25, 0x80	; 128
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	59 f0       	breq	.+22     	; 0x454 <__fp_splitA+0x10>
 43e:	5f 3f       	cpi	r21, 0xFF	; 255
 440:	71 f0       	breq	.+28     	; 0x45e <__fp_splitA+0x1a>
 442:	47 95       	ror	r20

00000444 <__fp_splitA>:
 444:	88 0f       	add	r24, r24
 446:	97 fb       	bst	r25, 7
 448:	99 1f       	adc	r25, r25
 44a:	61 f0       	breq	.+24     	; 0x464 <__fp_splitA+0x20>
 44c:	9f 3f       	cpi	r25, 0xFF	; 255
 44e:	79 f0       	breq	.+30     	; 0x46e <__fp_splitA+0x2a>
 450:	87 95       	ror	r24
 452:	08 95       	ret
 454:	12 16       	cp	r1, r18
 456:	13 06       	cpc	r1, r19
 458:	14 06       	cpc	r1, r20
 45a:	55 1f       	adc	r21, r21
 45c:	f2 cf       	rjmp	.-28     	; 0x442 <__fp_split3+0xe>
 45e:	46 95       	lsr	r20
 460:	f1 df       	rcall	.-30     	; 0x444 <__fp_splitA>
 462:	08 c0       	rjmp	.+16     	; 0x474 <__fp_splitA+0x30>
 464:	16 16       	cp	r1, r22
 466:	17 06       	cpc	r1, r23
 468:	18 06       	cpc	r1, r24
 46a:	99 1f       	adc	r25, r25
 46c:	f1 cf       	rjmp	.-30     	; 0x450 <__fp_splitA+0xc>
 46e:	86 95       	lsr	r24
 470:	71 05       	cpc	r23, r1
 472:	61 05       	cpc	r22, r1
 474:	08 94       	sec
 476:	08 95       	ret

00000478 <__fp_zero>:
 478:	e8 94       	clt

0000047a <__fp_szero>:
 47a:	bb 27       	eor	r27, r27
 47c:	66 27       	eor	r22, r22
 47e:	77 27       	eor	r23, r23
 480:	cb 01       	movw	r24, r22
 482:	97 f9       	bld	r25, 7
 484:	08 95       	ret

00000486 <__mulsf3>:
 486:	0e 94 56 02 	call	0x4ac	; 0x4ac <__mulsf3x>
 48a:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_round>
 48e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_pscA>
 492:	38 f0       	brcs	.+14     	; 0x4a2 <__mulsf3+0x1c>
 494:	0e 94 02 02 	call	0x404	; 0x404 <__fp_pscB>
 498:	20 f0       	brcs	.+8      	; 0x4a2 <__mulsf3+0x1c>
 49a:	95 23       	and	r25, r21
 49c:	11 f0       	breq	.+4      	; 0x4a2 <__mulsf3+0x1c>
 49e:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 4a2:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__fp_nan>
 4a6:	11 24       	eor	r1, r1
 4a8:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>

000004ac <__mulsf3x>:
 4ac:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_split3>
 4b0:	70 f3       	brcs	.-36     	; 0x48e <__mulsf3+0x8>

000004b2 <__mulsf3_pse>:
 4b2:	95 9f       	mul	r25, r21
 4b4:	c1 f3       	breq	.-16     	; 0x4a6 <__mulsf3+0x20>
 4b6:	95 0f       	add	r25, r21
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	55 1f       	adc	r21, r21
 4bc:	62 9f       	mul	r22, r18
 4be:	f0 01       	movw	r30, r0
 4c0:	72 9f       	mul	r23, r18
 4c2:	bb 27       	eor	r27, r27
 4c4:	f0 0d       	add	r31, r0
 4c6:	b1 1d       	adc	r27, r1
 4c8:	63 9f       	mul	r22, r19
 4ca:	aa 27       	eor	r26, r26
 4cc:	f0 0d       	add	r31, r0
 4ce:	b1 1d       	adc	r27, r1
 4d0:	aa 1f       	adc	r26, r26
 4d2:	64 9f       	mul	r22, r20
 4d4:	66 27       	eor	r22, r22
 4d6:	b0 0d       	add	r27, r0
 4d8:	a1 1d       	adc	r26, r1
 4da:	66 1f       	adc	r22, r22
 4dc:	82 9f       	mul	r24, r18
 4de:	22 27       	eor	r18, r18
 4e0:	b0 0d       	add	r27, r0
 4e2:	a1 1d       	adc	r26, r1
 4e4:	62 1f       	adc	r22, r18
 4e6:	73 9f       	mul	r23, r19
 4e8:	b0 0d       	add	r27, r0
 4ea:	a1 1d       	adc	r26, r1
 4ec:	62 1f       	adc	r22, r18
 4ee:	83 9f       	mul	r24, r19
 4f0:	a0 0d       	add	r26, r0
 4f2:	61 1d       	adc	r22, r1
 4f4:	22 1f       	adc	r18, r18
 4f6:	74 9f       	mul	r23, r20
 4f8:	33 27       	eor	r19, r19
 4fa:	a0 0d       	add	r26, r0
 4fc:	61 1d       	adc	r22, r1
 4fe:	23 1f       	adc	r18, r19
 500:	84 9f       	mul	r24, r20
 502:	60 0d       	add	r22, r0
 504:	21 1d       	adc	r18, r1
 506:	82 2f       	mov	r24, r18
 508:	76 2f       	mov	r23, r22
 50a:	6a 2f       	mov	r22, r26
 50c:	11 24       	eor	r1, r1
 50e:	9f 57       	subi	r25, 0x7F	; 127
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	9a f0       	brmi	.+38     	; 0x53a <__mulsf3_pse+0x88>
 514:	f1 f0       	breq	.+60     	; 0x552 <__mulsf3_pse+0xa0>
 516:	88 23       	and	r24, r24
 518:	4a f0       	brmi	.+18     	; 0x52c <__mulsf3_pse+0x7a>
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	bb 1f       	adc	r27, r27
 520:	66 1f       	adc	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	91 50       	subi	r25, 0x01	; 1
 528:	50 40       	sbci	r21, 0x00	; 0
 52a:	a9 f7       	brne	.-22     	; 0x516 <__mulsf3_pse+0x64>
 52c:	9e 3f       	cpi	r25, 0xFE	; 254
 52e:	51 05       	cpc	r21, r1
 530:	80 f0       	brcs	.+32     	; 0x552 <__mulsf3_pse+0xa0>
 532:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 536:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>
 53a:	5f 3f       	cpi	r21, 0xFF	; 255
 53c:	e4 f3       	brlt	.-8      	; 0x536 <__mulsf3_pse+0x84>
 53e:	98 3e       	cpi	r25, 0xE8	; 232
 540:	d4 f3       	brlt	.-12     	; 0x536 <__mulsf3_pse+0x84>
 542:	86 95       	lsr	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	b7 95       	ror	r27
 54a:	f7 95       	ror	r31
 54c:	e7 95       	ror	r30
 54e:	9f 5f       	subi	r25, 0xFF	; 255
 550:	c1 f7       	brne	.-16     	; 0x542 <__mulsf3_pse+0x90>
 552:	fe 2b       	or	r31, r30
 554:	88 0f       	add	r24, r24
 556:	91 1d       	adc	r25, r1
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	97 f9       	bld	r25, 7
 55e:	08 95       	ret

00000560 <__adddi3_s8>:
 560:	00 24       	eor	r0, r0
 562:	a7 fd       	sbrc	r26, 7
 564:	00 94       	com	r0
 566:	2a 0f       	add	r18, r26
 568:	30 1d       	adc	r19, r0
 56a:	40 1d       	adc	r20, r0
 56c:	50 1d       	adc	r21, r0
 56e:	60 1d       	adc	r22, r0
 570:	70 1d       	adc	r23, r0
 572:	80 1d       	adc	r24, r0
 574:	90 1d       	adc	r25, r0
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
=======
 888:	08 95       	ret

0000088a <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 88a:	68 30       	cpi	r22, 0x08	; 8
 88c:	08 f0       	brcs	.+2      	; 0x890 <DIO_writePIN+0x6>
 88e:	74 c0       	rjmp	.+232    	; 0x978 <DIO_writePIN+0xee>
	{
		if (port == porta)
 890:	81 11       	cpse	r24, r1
 892:	1b c0       	rjmp	.+54     	; 0x8ca <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 894:	41 30       	cpi	r20, 0x01	; 1
 896:	61 f4       	brne	.+24     	; 0x8b0 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 898:	2b b3       	in	r18, 0x1b	; 27
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <DIO_writePIN+0x1a>
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	6a 95       	dec	r22
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <DIO_writePIN+0x16>
 8a8:	82 2b       	or	r24, r18
 8aa:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 8b0:	2b b3       	in	r18, 0x1b	; 27
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <DIO_writePIN+0x32>
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	6a 95       	dec	r22
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <DIO_writePIN+0x2e>
 8c0:	80 95       	com	r24
 8c2:	82 23       	and	r24, r18
 8c4:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	08 95       	ret
		}
		else if (port == portb)
 8ca:	81 30       	cpi	r24, 0x01	; 1
 8cc:	d9 f4       	brne	.+54     	; 0x904 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 8ce:	41 30       	cpi	r20, 0x01	; 1
 8d0:	61 f4       	brne	.+24     	; 0x8ea <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 8d2:	28 b3       	in	r18, 0x18	; 24
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <DIO_writePIN+0x54>
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	6a 95       	dec	r22
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <DIO_writePIN+0x50>
 8e2:	82 2b       	or	r24, r18
 8e4:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 8ea:	28 b3       	in	r18, 0x18	; 24
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <DIO_writePIN+0x6c>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	6a 95       	dec	r22
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <DIO_writePIN+0x68>
 8fa:	80 95       	com	r24
 8fc:	82 23       	and	r24, r18
 8fe:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	08 95       	ret
		}
		else if (port == portc)
 904:	82 30       	cpi	r24, 0x02	; 2
 906:	d9 f4       	brne	.+54     	; 0x93e <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 908:	41 30       	cpi	r20, 0x01	; 1
 90a:	61 f4       	brne	.+24     	; 0x924 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 90c:	25 b3       	in	r18, 0x15	; 21
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918 <DIO_writePIN+0x8e>
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	6a 95       	dec	r22
 91a:	e2 f7       	brpl	.-8      	; 0x914 <DIO_writePIN+0x8a>
 91c:	82 2b       	or	r24, r18
 91e:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 924:	25 b3       	in	r18, 0x15	; 21
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <DIO_writePIN+0xa6>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	6a 95       	dec	r22
 932:	e2 f7       	brpl	.-8      	; 0x92c <DIO_writePIN+0xa2>
 934:	80 95       	com	r24
 936:	82 23       	and	r24, r18
 938:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	08 95       	ret
		}
		else if (port == portd)
 93e:	83 30       	cpi	r24, 0x03	; 3
 940:	e9 f4       	brne	.+58     	; 0x97c <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 942:	41 30       	cpi	r20, 0x01	; 1
 944:	61 f4       	brne	.+24     	; 0x95e <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 946:	22 b3       	in	r18, 0x12	; 18
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_writePIN+0xc8>
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	6a 95       	dec	r22
 954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_writePIN+0xc4>
 956:	82 2b       	or	r24, r18
 958:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 95e:	22 b3       	in	r18, 0x12	; 18
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	02 c0       	rjmp	.+4      	; 0x96a <DIO_writePIN+0xe0>
 966:	88 0f       	add	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	6a 95       	dec	r22
 96c:	e2 f7       	brpl	.-8      	; 0x966 <DIO_writePIN+0xdc>
 96e:	80 95       	com	r24
 970:	82 23       	and	r24, r18
 972:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 97c:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 97e:	08 95       	ret

00000980 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
 980:	68 30       	cpi	r22, 0x08	; 8
 982:	08 f0       	brcs	.+2      	; 0x986 <DIO_readPIN+0x6>
 984:	64 c0       	rjmp	.+200    	; 0xa4e <DIO_readPIN+0xce>
	{
		if (port == porta)
 986:	81 11       	cpse	r24, r1
 988:	17 c0       	rjmp	.+46     	; 0x9b8 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
 98a:	79 b3       	in	r23, 0x19	; 25
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	9c 01       	movw	r18, r24
 992:	06 2e       	mov	r0, r22
 994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_readPIN+0x1a>
 996:	22 0f       	add	r18, r18
 998:	33 1f       	adc	r19, r19
 99a:	0a 94       	dec	r0
 99c:	e2 f7       	brpl	.-8      	; 0x996 <DIO_readPIN+0x16>
 99e:	87 2f       	mov	r24, r23
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	82 23       	and	r24, r18
 9a4:	93 23       	and	r25, r19
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <DIO_readPIN+0x2c>
 9a8:	96 95       	lsr	r25
 9aa:	87 95       	ror	r24
 9ac:	6a 95       	dec	r22
 9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <DIO_readPIN+0x28>
 9b0:	fa 01       	movw	r30, r20
 9b2:	80 83       	st	Z, r24
			return DIO_E_OK;
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	08 95       	ret
		}
		else if (port == portb)
 9b8:	81 30       	cpi	r24, 0x01	; 1
 9ba:	b9 f4       	brne	.+46     	; 0x9ea <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
 9bc:	76 b3       	in	r23, 0x16	; 22
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	9c 01       	movw	r18, r24
 9c4:	06 2e       	mov	r0, r22
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_readPIN+0x4c>
 9c8:	22 0f       	add	r18, r18
 9ca:	33 1f       	adc	r19, r19
 9cc:	0a 94       	dec	r0
 9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_readPIN+0x48>
 9d0:	87 2f       	mov	r24, r23
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	82 23       	and	r24, r18
 9d6:	93 23       	and	r25, r19
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <DIO_readPIN+0x5e>
 9da:	96 95       	lsr	r25
 9dc:	87 95       	ror	r24
 9de:	6a 95       	dec	r22
 9e0:	e2 f7       	brpl	.-8      	; 0x9da <DIO_readPIN+0x5a>
 9e2:	fa 01       	movw	r30, r20
 9e4:	80 83       	st	Z, r24
			return DIO_E_OK;
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	08 95       	ret
		}
		else if (port == portc)
 9ea:	82 30       	cpi	r24, 0x02	; 2
 9ec:	b9 f4       	brne	.+46     	; 0xa1c <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
 9ee:	73 b3       	in	r23, 0x13	; 19
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	9c 01       	movw	r18, r24
 9f6:	06 2e       	mov	r0, r22
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <DIO_readPIN+0x7e>
 9fa:	22 0f       	add	r18, r18
 9fc:	33 1f       	adc	r19, r19
 9fe:	0a 94       	dec	r0
 a00:	e2 f7       	brpl	.-8      	; 0x9fa <DIO_readPIN+0x7a>
 a02:	87 2f       	mov	r24, r23
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	82 23       	and	r24, r18
 a08:	93 23       	and	r25, r19
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <DIO_readPIN+0x90>
 a0c:	96 95       	lsr	r25
 a0e:	87 95       	ror	r24
 a10:	6a 95       	dec	r22
 a12:	e2 f7       	brpl	.-8      	; 0xa0c <DIO_readPIN+0x8c>
 a14:	fa 01       	movw	r30, r20
 a16:	80 83       	st	Z, r24
			return DIO_E_OK;
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	08 95       	ret
		}
		else if (port == portd)
 a1c:	83 30       	cpi	r24, 0x03	; 3
 a1e:	c9 f4       	brne	.+50     	; 0xa52 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
 a20:	70 b3       	in	r23, 0x10	; 16
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	9c 01       	movw	r18, r24
 a28:	06 2e       	mov	r0, r22
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_readPIN+0xb0>
 a2c:	22 0f       	add	r18, r18
 a2e:	33 1f       	adc	r19, r19
 a30:	0a 94       	dec	r0
 a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_readPIN+0xac>
 a34:	87 2f       	mov	r24, r23
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	82 23       	and	r24, r18
 a3a:	93 23       	and	r25, r19
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <DIO_readPIN+0xc2>
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	6a 95       	dec	r22
 a44:	e2 f7       	brpl	.-8      	; 0xa3e <DIO_readPIN+0xbe>
 a46:	fa 01       	movw	r30, r20
 a48:	80 83       	st	Z, r24
			return DIO_E_OK;
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 a52:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
 a54:	08 95       	ret

00000a56 <__itoa_ncheck>:
 a56:	bb 27       	eor	r27, r27
 a58:	4a 30       	cpi	r20, 0x0A	; 10
 a5a:	31 f4       	brne	.+12     	; 0xa68 <__itoa_ncheck+0x12>
 a5c:	99 23       	and	r25, r25
 a5e:	22 f4       	brpl	.+8      	; 0xa68 <__itoa_ncheck+0x12>
 a60:	bd e2       	ldi	r27, 0x2D	; 45
 a62:	90 95       	com	r25
 a64:	81 95       	neg	r24
 a66:	9f 4f       	sbci	r25, 0xFF	; 255
 a68:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__utoa_common>

00000a6c <__utoa_ncheck>:
 a6c:	bb 27       	eor	r27, r27

00000a6e <__utoa_common>:
 a6e:	fb 01       	movw	r30, r22
 a70:	55 27       	eor	r21, r21
 a72:	aa 27       	eor	r26, r26
 a74:	88 0f       	add	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	aa 1f       	adc	r26, r26
 a7a:	a4 17       	cp	r26, r20
 a7c:	10 f0       	brcs	.+4      	; 0xa82 <__utoa_common+0x14>
 a7e:	a4 1b       	sub	r26, r20
 a80:	83 95       	inc	r24
 a82:	50 51       	subi	r21, 0x10	; 16
 a84:	b9 f7       	brne	.-18     	; 0xa74 <__utoa_common+0x6>
 a86:	a0 5d       	subi	r26, 0xD0	; 208
 a88:	aa 33       	cpi	r26, 0x3A	; 58
 a8a:	08 f0       	brcs	.+2      	; 0xa8e <__utoa_common+0x20>
 a8c:	a9 5d       	subi	r26, 0xD9	; 217
 a8e:	a1 93       	st	Z+, r26
 a90:	00 97       	sbiw	r24, 0x00	; 0
 a92:	79 f7       	brne	.-34     	; 0xa72 <__utoa_common+0x4>
 a94:	b1 11       	cpse	r27, r1
 a96:	b1 93       	st	Z+, r27
 a98:	11 92       	st	Z+, r1
 a9a:	cb 01       	movw	r24, r22
 a9c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <strrev>

00000aa0 <strrev>:
 aa0:	dc 01       	movw	r26, r24
 aa2:	fc 01       	movw	r30, r24
 aa4:	67 2f       	mov	r22, r23
 aa6:	71 91       	ld	r23, Z+
 aa8:	77 23       	and	r23, r23
 aaa:	e1 f7       	brne	.-8      	; 0xaa4 <strrev+0x4>
 aac:	32 97       	sbiw	r30, 0x02	; 2
 aae:	04 c0       	rjmp	.+8      	; 0xab8 <strrev+0x18>
 ab0:	7c 91       	ld	r23, X
 ab2:	6d 93       	st	X+, r22
 ab4:	70 83       	st	Z, r23
 ab6:	62 91       	ld	r22, -Z
 ab8:	ae 17       	cp	r26, r30
 aba:	bf 07       	cpc	r27, r31
 abc:	c8 f3       	brcs	.-14     	; 0xab0 <strrev+0x10>
 abe:	08 95       	ret

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
>>>>>>> 4a7be62bab9081be2338ad4a12499a883688378d
