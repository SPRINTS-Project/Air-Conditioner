
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00000c8e  00000d22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008000f6  008000f6  00000db8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025f4  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d63  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001354  00000000  00000000  00004323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00005678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7c  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ebc  00000000  00000000  0000644c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00007308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3f       	cpi	r26, 0xF6	; 246
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 ef       	ldi	r26, 0xF6	; 246
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 32       	cpi	r26, 0x2E	; 46
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <main>
  8a:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
  92:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <u8_delay>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <u8_delay>
	TIMER_Manager_reset(&st_gs_timer_0_config);
  9c:	8e ef       	ldi	r24, 0xFE	; 254
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <TIMER_Manager_reset>
  a4:	08 95       	ret

000000a6 <APP_init>:
	}
}


void APP_init(void)
{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_0_config.u8_timerNum = TIMER_0;
  b2:	ee ef       	ldi	r30, 0xFE	; 254
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	st_gs_timer_0_config.u8_timer_ovf_int_enable = 1;
  b8:	d1 e0       	ldi	r29, 0x01	; 1
  ba:	d4 83       	std	Z+4, r29	; 0x04
	st_gs_timer_0_config.u16_timer_InitialValue = APP_TIMER_0_INIT_VALUE;
  bc:	80 ef       	ldi	r24, 0xF0	; 240
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	93 83       	std	Z+3, r25	; 0x03
  c2:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_0_config.callBackFunction =  APP_timer0OvfHandeler;
  c4:	89 e4       	ldi	r24, 0x49	; 73
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	96 83       	std	Z+6, r25	; 0x06
  ca:	85 83       	std	Z+5, r24	; 0x05
	TIMER_Manager_init(&st_gs_timer_0_config);
  cc:	cf 01       	movw	r24, r30
  ce:	0e 94 e7 04 	call	0x9ce	; 0x9ce <TIMER_Manager_init>
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
  d2:	eb ef       	ldi	r30, 0xFB	; 251
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	82 83       	std	Z+2, r24	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
  da:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
  dc:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
  de:	cf 01       	movw	r24, r30
  e0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <TEMP_SENSOR_init>
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
  e4:	e9 e0       	ldi	r30, 0x09	; 9
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	10 82       	st	Z, r1
	st_gs_lcdConfig.u8_d4Pin[0] = porta;
  ea:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[1] = pin0;
  ec:	12 86       	std	Z+10, r1	; 0x0a
	st_gs_lcdConfig.u8_d5Pin[0] = porta;
  ee:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[1] = pin1;
  f0:	d4 87       	std	Z+12, r29	; 0x0c
	st_gs_lcdConfig.u8_d6Pin[0] = porta;
  f2:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[1] = pin2;
  f4:	c2 e0       	ldi	r28, 0x02	; 2
  f6:	c6 87       	std	Z+14, r28	; 0x0e
	st_gs_lcdConfig.u8_d7Pin[0] = porta;
  f8:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[1] = pin3;
  fa:	0f 2e       	mov	r0, r31
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	ef 2e       	mov	r14, r31
 100:	f0 2d       	mov	r31, r0
 102:	e0 8a       	std	Z+16, r14	; 0x10
	st_gs_lcdConfig.u8_RSpin[0] = porta;
 104:	11 8a       	std	Z+17, r1	; 0x11
	st_gs_lcdConfig.u8_RSpin[1] = pin4;
 106:	68 94       	set
 108:	ff 24       	eor	r15, r15
 10a:	f2 f8       	bld	r15, 2
 10c:	f2 8a       	std	Z+18, r15	; 0x12
	st_gs_lcdConfig.u8_RWpin[0] = porta;
 10e:	13 8a       	std	Z+19, r1	; 0x13
	st_gs_lcdConfig.u8_RWpin[1] = pin5;
 110:	05 e0       	ldi	r16, 0x05	; 5
 112:	04 8b       	std	Z+20, r16	; 0x14
	st_gs_lcdConfig.u8_Epin[0] = porta;
 114:	15 8a       	std	Z+21, r1	; 0x15
	st_gs_lcdConfig.u8_Epin[1] = pin6;
 116:	16 e0       	ldi	r17, 0x06	; 6
 118:	16 8b       	std	Z+22, r17	; 0x16
	LCD_init(&st_gs_lcdConfig);
 11a:	cf 01       	movw	r24, r30
 11c:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_init>
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[0] = portc;
 120:	e0 e2       	ldi	r30, 0x20	; 32
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[1] = pin3;
 126:	e7 82       	std	Z+7, r14	; 0x07
	st_gs_keypadConfig.u8_col2Pin[0] = portc;
 128:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[1] = pin4;
 12a:	f1 86       	std	Z+9, r15	; 0x09
	st_gs_keypadConfig.u8_col3Pin[0] = portc;
 12c:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[1] = pin5;
 12e:	03 87       	std	Z+11, r16	; 0x0b
	st_gs_keypadConfig.u8_col4Pin[0] = portc;
 130:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[1] = pin6;
 132:	15 87       	std	Z+13, r17	; 0x0d
	st_gs_keypadConfig.u8_row1Pin[0] = portc;
 134:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[1] = pin0 ;
 136:	11 82       	std	Z+1, r1	; 0x01
	st_gs_keypadConfig.u8_row2Pin[0] = portc;
 138:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[1] = pin1 ;
 13a:	d3 83       	std	Z+3, r29	; 0x03
	st_gs_keypadConfig.u8_row3Pin[0] = portc;
 13c:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[1] = pin2 ;
 13e:	c5 83       	std	Z+5, r28	; 0x05
	KEYPAD_init(&st_gs_keypadConfig);
 140:	cf 01       	movw	r24, r30
 142:	0e 94 33 02 	call	0x466	; 0x466 <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
 146:	e9 ef       	ldi	r30, 0xF9	; 249
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
 14c:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
 14e:	cf 01       	movw	r24, r30
 150:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <BUZZER_init>
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <APP_welcome>:


void APP_welcome(void)
{
	LCD_clear();
 162:	0e 94 08 04 	call	0x810	; 0x810 <LCD_clear>
	LCD_setCursor(1,1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Welcome");
 16e:	88 e6       	ldi	r24, 0x68	; 104
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
	u8_delay = 0 ;
 176:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <u8_delay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	89 e6       	ldi	r24, 0x69	; 105
 17e:	98 e1       	ldi	r25, 0x18	; 24
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <APP_welcome+0x1e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <APP_welcome+0x28>
 18a:	00 00       	nop
	//while(u8_delay <= 2);
	_delay_ms(1000);
	LCD_clear();
 18c:	0e 94 08 04 	call	0x810	; 0x810 <LCD_clear>
	LCD_setCursor(1,1);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
	LCD_writeString((uint8_t*)"default Temp is");
 198:	80 e7       	ldi	r24, 0x70	; 112
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
	LCD_setCursor(2,1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
	LCD_writeString((uint8_t*)"20");
 1a8:	8a ec       	ldi	r24, 0xCA	; 202
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
	u8_delay = 0;
 1b0:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <u8_delay>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 e6       	ldi	r24, 0x69	; 105
 1b8:	98 e1       	ldi	r25, 0x18	; 24
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <APP_welcome+0x58>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <APP_welcome+0x62>
 1c4:	00 00       	nop
	//while(u8_delay <= 2);
	_delay_ms(1000);
	
	u8_gs_programTemp = u8_gc_defaultTemp;
 1c6:	84 e1       	ldi	r24, 0x14	; 20
 1c8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
	u8_en_gs_programState = APP_SET_TEMP;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <u8_en_gs_programState>
 1d2:	08 95       	ret

000001d4 <APP_set>:




void APP_set(void)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	00 d0       	rcall	.+0      	; 0x1da <APP_set+0x6>
 1da:	1f 92       	push	r1
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
 1e0:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	LCD_clear();
 1e2:	0e 94 08 04 	call	0x810	; 0x810 <LCD_clear>
	LCD_setCursor(1,1);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Set Initial Temp");
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
	u8_delay = 0;
 1f6:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <u8_delay>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	9c e0       	ldi	r25, 0x0C	; 12
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <APP_set+0x2c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <APP_set+0x36>
 20a:	00 00       	nop
	//while(u8_delay <= 1);
	_delay_ms(500);
	LCD_clear();
 20c:	0e 94 08 04 	call	0x810	; 0x810 <LCD_clear>
	LCD_setCursor(1,1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
 218:	81 e9       	ldi	r24, 0x91	; 145
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
	//LCD_setCursor(1,8);
	//LCD_writeString((uint8_t*)ch_arrs_curTempToString);
	LCD_setCursor(1,11);
 220:	6b e0       	ldi	r22, 0x0B	; 11
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Max=35");
 228:	88 e9       	ldi	r24, 0x98	; 152
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
	
	while(1)
	{
		itoa(u8_gs_programTemp,ch_arrs_curTempToString,10);
 230:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 234:	4a e0       	ldi	r20, 0x0A	; 10
 236:	be 01       	movw	r22, r28
 238:	6e 5f       	subi	r22, 0xFE	; 254
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 10 06 	call	0xc20	; 0xc20 <__itoa_ncheck>
		LCD_setCursor(1,8);
 242:	68 e0       	ldi	r22, 0x08	; 8
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
 24a:	ce 01       	movw	r24, r28
 24c:	02 96       	adiw	r24, 0x02	; 2
 24e:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
		KEYPAD_read(&u8_keypadData);
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 70 02 	call	0x4e0	; 0x4e0 <KEYPAD_read>
		
		if (u8_keypadData == '1')
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	81 33       	cpi	r24, 0x31	; 49
 25e:	41 f4       	brne	.+16     	; 0x270 <APP_set+0x9c>
		{
		
			// Increment
			if (u8_gs_programTemp < 35)
 260:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
 264:	83 32       	cpi	r24, 0x23	; 35
 266:	20 f7       	brcc	.-56     	; 0x230 <APP_set+0x5c>
			{
				u8_gs_programTemp++;
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
 26e:	e0 cf       	rjmp	.-64     	; 0x230 <APP_set+0x5c>
			}
		}
		else if (u8_keypadData == '2')
 270:	82 33       	cpi	r24, 0x32	; 50
 272:	41 f4       	brne	.+16     	; 0x284 <APP_set+0xb0>
		{
			// Decrement
			if (u8_gs_programTemp >18)
 274:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
 278:	83 31       	cpi	r24, 0x13	; 19
 27a:	d0 f2       	brcs	.-76     	; 0x230 <APP_set+0x5c>
			{
				u8_gs_programTemp--;
 27c:	81 50       	subi	r24, 0x01	; 1
 27e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
 282:	d6 cf       	rjmp	.-84     	; 0x230 <APP_set+0x5c>
			}
		}
		else if (u8_keypadData == '3')
 284:	83 33       	cpi	r24, 0x33	; 51
 286:	a1 f6       	brne	.-88     	; 0x230 <APP_set+0x5c>
		{
			// Set
			u8_en_gs_programState = APP_WORKING;
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <u8_en_gs_programState>
		else{
			// do nothing
		}
	}
	
}
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <APP_working>:



void APP_working(void)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <APP_working+0x6>
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
 2a6:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	
	
	
	// print current temp
	LCD_clear();
 2a8:	0e 94 08 04 	call	0x810	; 0x810 <LCD_clear>
	LCD_setCursor(1,1);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Current Temp = ");
 2b4:	8f e9       	ldi	r24, 0x9F	; 159
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
	
	
	while(u8_en_gs_programState == APP_WORKING)
 2bc:	78 c0       	rjmp	.+240    	; 0x3ae <APP_working+0x114>
 2be:	4a e0       	ldi	r20, 0x0A	; 10
 2c0:	be 01       	movw	r22, r28
 2c2:	6e 5f       	subi	r22, 0xFE	; 254
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	84 e1       	ldi	r24, 0x14	; 20
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 10 06 	call	0xc20	; 0xc20 <__itoa_ncheck>
	{
		// convert int to string
		itoa(u8_gs_curTemp,ch_arrs_curTempToString,10);
		LCD_setCursor(2,2);
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
 2d6:	ce 01       	movw	r24, r28
 2d8:	02 96       	adiw	r24, 0x02	; 2
 2da:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
		if (u8_gs_curTemp > u8_gs_programTemp)
 2de:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
 2e2:	84 31       	cpi	r24, 0x14	; 20
 2e4:	28 f4       	brcc	.+10     	; 0x2f0 <APP_working+0x56>
		{
			// print the bell shape 
			//LCD_setCursor(2,3);
			LCD_writeSpChar(LCD_BELL);
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_writeSpChar>
			
			
			// start the BUZZER
			BUZZER_start();
 2ec:	0e 94 15 02 	call	0x42a	; 0x42a <BUZZER_start>
		}
		KEYPAD_read(&u8_keypadData);
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <KEYPAD_read>
		switch(u8_keypadData)
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	85 33       	cpi	r24, 0x35	; 53
 2fc:	31 f0       	breq	.+12     	; 0x30a <APP_working+0x70>
 2fe:	8e 34       	cpi	r24, 0x4E	; 78
 300:	09 f4       	brne	.+2      	; 0x304 <APP_working+0x6a>
 302:	55 c0       	rjmp	.+170    	; 0x3ae <APP_working+0x114>
 304:	84 33       	cpi	r24, 0x34	; 52
 306:	69 f5       	brne	.+90     	; 0x362 <APP_working+0xc8>
 308:	26 c0       	rjmp	.+76     	; 0x356 <APP_working+0xbc>
			case  78 :
				break;
			case  APP_RESET_BTN :
				// reset
				// Stop the BUZZER
				BUZZER_stop();
 30a:	0e 94 24 02 	call	0x448	; 0x448 <BUZZER_stop>
				
				// Set the program temp with the default temp
				u8_gs_programTemp = u8_gc_defaultTemp;
 30e:	84 e1       	ldi	r24, 0x14	; 20
 310:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
				
				// clear LCD and print Temp value is resettled to 20
				LCD_clear();
 314:	0e 94 08 04 	call	0x810	; 0x810 <LCD_clear>
				LCD_setCursor(1,1);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
				LCD_writeString((uint8_t*)"Temp value is");
 320:	8f ea       	ldi	r24, 0xAF	; 175
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
				LCD_setCursor(2,1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
				LCD_writeString((uint8_t*)"resettled to 20");
 330:	8d eb       	ldi	r24, 0xBD	; 189
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
				
				// 1s timeout
				u8_delay = 0;
 338:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <u8_delay>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	89 e6       	ldi	r24, 0x69	; 105
 340:	98 e1       	ldi	r25, 0x18	; 24
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <APP_working+0xa8>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <APP_working+0xb2>
 34c:	00 00       	nop
				//while(u8_delay <= 2);
				_delay_ms(1000);
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <u8_en_gs_programState>
				break;
 354:	2c c0       	rjmp	.+88     	; 0x3ae <APP_working+0x114>
			
			case APP_ADJUST_BTN : 
				// adjust
				
				// Stop the BUZZER
				BUZZER_stop();
 356:	0e 94 24 02 	call	0x448	; 0x448 <BUZZER_stop>
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <u8_en_gs_programState>
				break;
 360:	26 c0       	rjmp	.+76     	; 0x3ae <APP_working+0x114>
			default:
				
				PORTD = u8_keypadData;
 362:	82 bb       	out	0x12, r24	; 18
				// Invalid button
				LCD_clear();
 364:	0e 94 08 04 	call	0x810	; 0x810 <LCD_clear>
				LCD_setCursor(1,1);
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
				LCD_writeString((uint8_t*)"the operation is");
 370:	8d ec       	ldi	r24, 0xCD	; 205
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
				LCD_setCursor(2,1);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
				LCD_writeString((uint8_t*)"not allowed");
 380:	8e ed       	ldi	r24, 0xDE	; 222
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	89 e6       	ldi	r24, 0x69	; 105
 38c:	98 e1       	ldi	r25, 0x18	; 24
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <APP_working+0xf4>
 396:	00 c0       	rjmp	.+0      	; 0x398 <APP_working+0xfe>
 398:	00 00       	nop
				//u8_delay = 0;
				//while(u8_delay <= 2);
				_delay_ms(1000);
				
				// print current temp
				LCD_clear();
 39a:	0e 94 08 04 	call	0x810	; 0x810 <LCD_clear>
				LCD_setCursor(1,1);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 0e 04 	call	0x81c	; 0x81c <LCD_setCursor>
				LCD_writeString((uint8_t*)"Current Temp = ");
 3a6:	8f e9       	ldi	r24, 0x9F	; 159
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_writeString>
	LCD_clear();
	LCD_setCursor(1,1);
	LCD_writeString((uint8_t*)"Current Temp = ");
	
	
	while(u8_en_gs_programState == APP_WORKING)
 3ae:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <u8_en_gs_programState>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <APP_working+0x11e>
 3b6:	83 cf       	rjmp	.-250    	; 0x2be <APP_working+0x24>
				LCD_writeString((uint8_t*)"Current Temp = ");
				break;
		}
	}
	
}
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <APP_start>:
void APP_timer0OvfHandeler(void);


void APP_start(void)
{
	APP_init();
 3c4:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_init>
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <APP_start+0xa>
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
 3ca:	0e 94 b1 00 	call	0x162	; 0x162 <APP_welcome>
void APP_start(void)
{
	APP_init();
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
 3ce:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <u8_en_gs_programState>
 3d2:	81 11       	cpse	r24, r1
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <APP_start+0x18>
 3d6:	f9 cf       	rjmp	.-14     	; 0x3ca <APP_start+0x6>
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
 3d8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <APP_set>
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
 3dc:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <u8_en_gs_programState>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	d1 f3       	breq	.-12     	; 0x3d8 <APP_start+0x14>
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <APP_start+0x26>
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
		{
			APP_working();
 3e6:	0e 94 4d 01 	call	0x29a	; 0x29a <APP_working>
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
 3ea:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <u8_en_gs_programState>
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	d1 f3       	breq	.-12     	; 0x3e6 <APP_start+0x22>
 3f2:	ed cf       	rjmp	.-38     	; 0x3ce <APP_start+0xa>

000003f4 <BUZZER_init>:
static uint8_t u8_gs_buzzerState = NOT_INIT;



u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	99 f0       	breq	.+38     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fc:	ec 01       	movw	r28, r24
		return BUZZER_E_NOT_OK;
	
	// Set Buzzer pin as output
	u8_en_dioErrors u8_dioRetVal = DIO_init(st_config->u8_port, st_config->u8_pin, STD_OUTPUT);
 3fe:	68 81       	ld	r22, Y
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
	
	// Check if there is an error from dio driver
	if(u8_dioRetVal)
 408:	81 11       	cpse	r24, r1
 40a:	0c c0       	rjmp	.+24     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		return u8_dioRetVal;
	
	// Store configuration locally
	st_gs_buzzerConfig.u8_port = st_config->u8_port;
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	e6 e0       	ldi	r30, 0x06	; 6
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	81 83       	std	Z+1, r24	; 0x01
	st_gs_buzzerConfig.u8_pin = st_config->u8_pin;
 414:	88 81       	ld	r24, Y
 416:	80 83       	st	Z, r24
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <u8_gs_buzzerState>
	
	return BUZZER_E_OK;
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	01 c0       	rjmp	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>

u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
		return BUZZER_E_NOT_OK;
 422:	86 e0       	ldi	r24, 0x06	; 6
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
	
	return BUZZER_E_OK;
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <BUZZER_start>:
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
 42a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u8_gs_buzzerState>
 42e:	88 23       	and	r24, r24
 430:	49 f0       	breq	.+18     	; 0x444 <BUZZER_start+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
 432:	e6 e0       	ldi	r30, 0x06	; 6
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	60 81       	ld	r22, Z
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	81 81       	ldd	r24, Z+1	; 0x01
 43c:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	
	return BUZZER_E_OK;
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
 444:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
	
	return BUZZER_E_OK;
}
 446:	08 95       	ret

00000448 <BUZZER_stop>:
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
 448:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u8_gs_buzzerState>
 44c:	88 23       	and	r24, r24
 44e:	49 f0       	breq	.+18     	; 0x462 <BUZZER_stop+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
 450:	e6 e0       	ldi	r30, 0x06	; 6
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	60 81       	ld	r22, Z
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	81 81       	ldd	r24, Z+1	; 0x01
 45a:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	
	return BUZZER_E_OK;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
 462:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
	
	return BUZZER_E_OK;
 464:	08 95       	ret

00000466 <KEYPAD_init>:
#define F_CPU 1000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	a9 f1       	breq	.+106    	; 0x4d8 <KEYPAD_init+0x72>
 46e:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
 470:	69 81       	ldd	r22, Y+1	; 0x01
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	88 81       	ld	r24, Y
 476:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
 47a:	6b 81       	ldd	r22, Y+3	; 0x03
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
 484:	6d 81       	ldd	r22, Y+5	; 0x05
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	8c 81       	ldd	r24, Y+4	; 0x04
 48a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
 48e:	69 81       	ldd	r22, Y+1	; 0x01
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	88 81       	ld	r24, Y
 494:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
 498:	6b 81       	ldd	r22, Y+3	; 0x03
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
 4a2:	6d 81       	ldd	r22, Y+5	; 0x05
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
 4ac:	6f 81       	ldd	r22, Y+7	; 0x07
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	8e 81       	ldd	r24, Y+6	; 0x06
 4b2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
 4b6:	69 85       	ldd	r22, Y+9	; 0x09
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	88 85       	ldd	r24, Y+8	; 0x08
 4bc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
 4c0:	6b 85       	ldd	r22, Y+11	; 0x0b
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	8a 85       	ldd	r24, Y+10	; 0x0a
 4c6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
 4ca:	6d 85       	ldd	r22, Y+13	; 0x0d
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	8c 85       	ldd	r24, Y+12	; 0x0c
 4d0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	01 c0       	rjmp	.+2      	; 0x4da <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
 4d8:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	1f 92       	push	r1
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
 4f6:	00 e2       	ldi	r16, 0x20	; 32
 4f8:	11 e0       	ldi	r17, 0x01	; 1
 4fa:	f8 01       	movw	r30, r16
 4fc:	67 81       	ldd	r22, Z+7	; 0x07
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	86 81       	ldd	r24, Z+6	; 0x06
 502:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
 506:	f8 01       	movw	r30, r16
 508:	61 85       	ldd	r22, Z+9	; 0x09
 50a:	41 e0       	ldi	r20, 0x01	; 1
 50c:	80 85       	ldd	r24, Z+8	; 0x08
 50e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
 512:	f8 01       	movw	r30, r16
 514:	63 85       	ldd	r22, Z+11	; 0x0b
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	82 85       	ldd	r24, Z+10	; 0x0a
 51a:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
 51e:	f8 01       	movw	r30, r16
 520:	65 85       	ldd	r22, Z+13	; 0x0d
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	84 85       	ldd	r24, Z+12	; 0x0c
 526:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
 52a:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
 52c:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
 52e:	42 c0       	rjmp	.+132    	; 0x5b4 <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
 530:	e0 e2       	ldi	r30, 0x20	; 32
 532:	f1 e0       	ldi	r31, 0x01	; 1
 534:	67 81       	ldd	r22, Z+7	; 0x07
 536:	60 0f       	add	r22, r16
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	86 81       	ldd	r24, Z+6	; 0x06
 53c:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		for(j=0;j<3;j++)
 540:	10 e0       	ldi	r17, 0x00	; 0
 542:	2d c0       	rjmp	.+90     	; 0x59e <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
 544:	e0 e2       	ldi	r30, 0x20	; 32
 546:	f1 e0       	ldi	r31, 0x01	; 1
 548:	61 81       	ldd	r22, Z+1	; 0x01
 54a:	61 0f       	add	r22, r17
 54c:	ae 01       	movw	r20, r28
 54e:	4f 5f       	subi	r20, 0xFF	; 255
 550:	5f 4f       	sbci	r21, 0xFF	; 255
 552:	80 81       	ld	r24, Z
 554:	0e 94 a5 05 	call	0xb4a	; 0xb4a <DIO_readPIN>
			if(value==0)
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	81 11       	cpse	r24, r1
 55c:	1f c0       	rjmp	.+62     	; 0x59c <KEYPAD_read+0xbc>
 55e:	0a c0       	rjmp	.+20     	; 0x574 <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
 560:	e0 e2       	ldi	r30, 0x20	; 32
 562:	f1 e0       	ldi	r31, 0x01	; 1
 564:	61 81       	ldd	r22, Z+1	; 0x01
 566:	61 0f       	add	r22, r17
 568:	ae 01       	movw	r20, r28
 56a:	4f 5f       	subi	r20, 0xFF	; 255
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	80 81       	ld	r24, Z
 570:	0e 94 a5 05 	call	0xb4a	; 0xb4a <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	88 23       	and	r24, r24
 578:	99 f3       	breq	.-26     	; 0x560 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
 57a:	80 2f       	mov	r24, r16
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	fc 01       	movw	r30, r24
 580:	ee 0f       	add	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	e8 0f       	add	r30, r24
 586:	f9 1f       	adc	r31, r25
 588:	e6 51       	subi	r30, 0x16	; 22
 58a:	ff 4f       	sbci	r31, 0xFF	; 255
 58c:	e1 0f       	add	r30, r17
 58e:	f1 1d       	adc	r31, r1
 590:	80 81       	ld	r24, Z
 592:	f7 01       	movw	r30, r14
 594:	80 83       	st	Z, r24
				flag=1;
 596:	dd 24       	eor	r13, r13
 598:	d3 94       	inc	r13
				
				break;
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
 59c:	1f 5f       	subi	r17, 0xFF	; 255
 59e:	13 30       	cpi	r17, 0x03	; 3
 5a0:	88 f2       	brcs	.-94     	; 0x544 <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
 5a2:	e0 e2       	ldi	r30, 0x20	; 32
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	67 81       	ldd	r22, Z+7	; 0x07
 5a8:	60 0f       	add	r22, r16
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	86 81       	ldd	r24, Z+6	; 0x06
 5ae:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
 5b2:	0f 5f       	subi	r16, 0xFF	; 255
 5b4:	04 30       	cpi	r16, 0x04	; 4
 5b6:	08 f4       	brcc	.+2      	; 0x5ba <KEYPAD_read+0xda>
 5b8:	bb cf       	rjmp	.-138    	; 0x530 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
 5ba:	f1 e0       	ldi	r31, 0x01	; 1
 5bc:	df 16       	cp	r13, r31
 5be:	19 f0       	breq	.+6      	; 0x5c6 <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
 5c0:	8e e4       	ldi	r24, 0x4E	; 78
 5c2:	f7 01       	movw	r30, r14
 5c4:	80 83       	st	Z, r24
		return ret_val;
	}
	
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0f 90       	pop	r0
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	ff 90       	pop	r15
 5d4:	ef 90       	pop	r14
 5d6:	df 90       	pop	r13
 5d8:	08 95       	ret

000005da <ENABLE>:
	{
		//do nothing
	}
}
void ENABLE(void)
{
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
	
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_HIGH);
 5de:	c9 e0       	ldi	r28, 0x09	; 9
 5e0:	d1 e0       	ldi	r29, 0x01	; 1
 5e2:	6e 89       	ldd	r22, Y+22	; 0x16
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	8d 89       	ldd	r24, Y+21	; 0x15
 5e8:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	8a 95       	dec	r24
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <ENABLE+0x14>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <ENABLE+0x1a>
	_delay_us(1);
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_LOW);
 5f4:	6e 89       	ldd	r22, Y+22	; 0x16
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	8d 89       	ldd	r24, Y+21	; 0x15
 5fa:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	//_delay_us(1);

 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <LCD_cmd>:
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
 604:	1f 93       	push	r17
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	ec 01       	movw	r28, r24
 60c:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 60e:	6e 89       	ldd	r22, Y+22	; 0x16
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	8d 89       	ldd	r24, Y+21	; 0x15
 614:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_LOW);
 618:	6a 89       	ldd	r22, Y+18	; 0x12
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	89 89       	ldd	r24, Y+17	; 0x11
 61e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 622:	6c 89       	ldd	r22, Y+20	; 0x14
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	8b 89       	ldd	r24, Y+19	; 0x13
 628:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 62c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
 630:	81 11       	cpse	r24, r1
 632:	4a c0       	rjmp	.+148    	; 0x6c8 <LCD_cmd+0xc4>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 634:	68 89       	ldd	r22, Y+16	; 0x10
 636:	41 2f       	mov	r20, r17
 638:	44 1f       	adc	r20, r20
 63a:	44 27       	eor	r20, r20
 63c:	44 1f       	adc	r20, r20
 63e:	8f 85       	ldd	r24, Y+15	; 0x0f
 640:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 644:	6e 85       	ldd	r22, Y+14	; 0x0e
 646:	16 fb       	bst	r17, 6
 648:	44 27       	eor	r20, r20
 64a:	40 f9       	bld	r20, 0
 64c:	8d 85       	ldd	r24, Y+13	; 0x0d
 64e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 652:	6c 85       	ldd	r22, Y+12	; 0x0c
 654:	15 fb       	bst	r17, 5
 656:	44 27       	eor	r20, r20
 658:	40 f9       	bld	r20, 0
 65a:	8b 85       	ldd	r24, Y+11	; 0x0b
 65c:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 660:	6a 85       	ldd	r22, Y+10	; 0x0a
 662:	14 fb       	bst	r17, 4
 664:	44 27       	eor	r20, r20
 666:	40 f9       	bld	r20, 0
 668:	89 85       	ldd	r24, Y+9	; 0x09
 66a:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		ENABLE();
 66e:	0e 94 ed 02 	call	0x5da	; 0x5da <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 672:	8f e6       	ldi	r24, 0x6F	; 111
 674:	97 e1       	ldi	r25, 0x17	; 23
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <LCD_cmd+0x72>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_cmd+0x78>
 67c:	00 00       	nop
		_delay_ms(3);
	    DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 67e:	68 89       	ldd	r22, Y+16	; 0x10
 680:	13 fb       	bst	r17, 3
 682:	44 27       	eor	r20, r20
 684:	40 f9       	bld	r20, 0
 686:	8f 85       	ldd	r24, Y+15	; 0x0f
 688:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 68c:	6e 85       	ldd	r22, Y+14	; 0x0e
 68e:	12 fb       	bst	r17, 2
 690:	44 27       	eor	r20, r20
 692:	40 f9       	bld	r20, 0
 694:	8d 85       	ldd	r24, Y+13	; 0x0d
 696:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 69a:	6c 85       	ldd	r22, Y+12	; 0x0c
 69c:	11 fb       	bst	r17, 1
 69e:	44 27       	eor	r20, r20
 6a0:	40 f9       	bld	r20, 0
 6a2:	8b 85       	ldd	r24, Y+11	; 0x0b
 6a4:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 6a8:	6a 85       	ldd	r22, Y+10	; 0x0a
 6aa:	41 2f       	mov	r20, r17
 6ac:	41 70       	andi	r20, 0x01	; 1
 6ae:	89 85       	ldd	r24, Y+9	; 0x09
 6b0:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		ENABLE();
 6b4:	0e 94 ed 02 	call	0x5da	; 0x5da <ENABLE>
 6b8:	8f e6       	ldi	r24, 0x6F	; 111
 6ba:	97 e1       	ldi	r25, 0x17	; 23
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <LCD_cmd+0xb8>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <LCD_cmd+0xbe>
 6c2:	00 00       	nop
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <LCD_cmd+0xce>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
		ENABLE();
		_delay_ms(3);
	}
	else if(mode==LCD_8_BIT_MODE)
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <LCD_cmd+0xcc>
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <LCD_cmd+0xce>
		
	}
	else
	{
		//do nothing
		ret_val=LCD_E_NOT_OK;
 6d0:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ret_val;
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	08 95       	ret

000006da <LCD_init>:
#include<util/delay.h>
extern st_lcdConfigType st_gs_lcdConfig;
static uint8_t mode;
static void ENABLE(void);
u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	ec 01       	movw	r28, r24
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=DIO_init(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_OUTPUT);
 6e2:	6a 89       	ldd	r22, Y+18	; 0x12
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	89 89       	ldd	r24, Y+17	; 0x11
 6e8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 6ec:	18 2f       	mov	r17, r24
	ret_val |=DIO_init(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_OUTPUT);
 6ee:	6c 89       	ldd	r22, Y+20	; 0x14
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	8b 89       	ldd	r24, Y+19	; 0x13
 6f4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 6f8:	18 2b       	or	r17, r24
	ret_val |=DIO_init(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_OUTPUT);
 6fa:	6e 89       	ldd	r22, Y+22	; 0x16
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	8d 89       	ldd	r24, Y+21	; 0x15
 700:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 704:	18 2b       	or	r17, r24
	switch(st_config->u8_mode)
 706:	88 81       	ld	r24, Y
 708:	88 23       	and	r24, r24
 70a:	19 f0       	breq	.+6      	; 0x712 <LCD_init+0x38>
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	99 f1       	breq	.+102    	; 0x776 <LCD_init+0x9c>
 710:	77 c0       	rjmp	.+238    	; 0x800 <__DATA_REGION_LENGTH__>
	{
		case LCD_4_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x02);
 712:	62 e0       	ldi	r22, 0x02	; 2
 714:	89 e0       	ldi	r24, 0x09	; 9
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x28);
 71c:	68 e2       	ldi	r22, 0x28	; 40
 71e:	89 e0       	ldi	r24, 0x09	; 9
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 726:	6c e0       	ldi	r22, 0x0C	; 12
 728:	89 e0       	ldi	r24, 0x09	; 9
 72a:	91 e0       	ldi	r25, 0x01	; 1
 72c:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 730:	66 e0       	ldi	r22, 0x06	; 6
 732:	89 e0       	ldi	r24, 0x09	; 9
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 73a:	61 e0       	ldi	r22, 0x01	; 1
 73c:	89 e0       	ldi	r24, 0x09	; 9
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 744:	6a 85       	ldd	r22, Y+10	; 0x0a
 746:	41 e0       	ldi	r20, 0x01	; 1
 748:	89 85       	ldd	r24, Y+9	; 0x09
 74a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 74e:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 750:	6c 85       	ldd	r22, Y+12	; 0x0c
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	8b 85       	ldd	r24, Y+11	; 0x0b
 756:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 75a:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 75c:	6e 85       	ldd	r22, Y+14	; 0x0e
 75e:	41 e0       	ldi	r20, 0x01	; 1
 760:	8d 85       	ldd	r24, Y+13	; 0x0d
 762:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 766:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 768:	68 89       	ldd	r22, Y+16	; 0x10
 76a:	41 e0       	ldi	r20, 0x01	; 1
 76c:	8f 85       	ldd	r24, Y+15	; 0x0f
 76e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 772:	81 2b       	or	r24, r17
								break;
 774:	46 c0       	rjmp	.+140    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
								
	case LCD_8_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x38);
 776:	68 e3       	ldi	r22, 0x38	; 56
 778:	89 e0       	ldi	r24, 0x09	; 9
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 780:	6c e0       	ldi	r22, 0x0C	; 12
 782:	89 e0       	ldi	r24, 0x09	; 9
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 78a:	66 e0       	ldi	r22, 0x06	; 6
 78c:	89 e0       	ldi	r24, 0x09	; 9
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	89 e0       	ldi	r24, 0x09	; 9
 798:	91 e0       	ldi	r25, 0x01	; 1
 79a:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
		                        ret_val |=DIO_init(st_config->u8_d0Pin[0],st_config->u8_d0Pin[1],STD_OUTPUT);
 79e:	6a 81       	ldd	r22, Y+2	; 0x02
 7a0:	41 e0       	ldi	r20, 0x01	; 1
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
 7a4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 7a8:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d1Pin[0],st_config->u8_d1Pin[1],STD_OUTPUT);
 7aa:	6c 81       	ldd	r22, Y+4	; 0x04
 7ac:	41 e0       	ldi	r20, 0x01	; 1
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 7b4:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d2Pin[0],st_config->u8_d2Pin[1],STD_OUTPUT);
 7b6:	6e 81       	ldd	r22, Y+6	; 0x06
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	8d 81       	ldd	r24, Y+5	; 0x05
 7bc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 7c0:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d3Pin[0],st_config->u8_d3Pin[1],STD_OUTPUT);
 7c2:	68 85       	ldd	r22, Y+8	; 0x08
 7c4:	41 e0       	ldi	r20, 0x01	; 1
 7c6:	8f 81       	ldd	r24, Y+7	; 0x07
 7c8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 7cc:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 7ce:	6a 85       	ldd	r22, Y+10	; 0x0a
 7d0:	41 e0       	ldi	r20, 0x01	; 1
 7d2:	89 85       	ldd	r24, Y+9	; 0x09
 7d4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 7d8:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 7da:	6c 85       	ldd	r22, Y+12	; 0x0c
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	8b 85       	ldd	r24, Y+11	; 0x0b
 7e0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 7e4:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 7e6:	6e 85       	ldd	r22, Y+14	; 0x0e
 7e8:	41 e0       	ldi	r20, 0x01	; 1
 7ea:	8d 85       	ldd	r24, Y+13	; 0x0d
 7ec:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 7f0:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 7f2:	68 89       	ldd	r22, Y+16	; 0x10
 7f4:	41 e0       	ldi	r20, 0x01	; 1
 7f6:	8f 85       	ldd	r24, Y+15	; 0x0f
 7f8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <DIO_init>
 7fc:	81 2b       	or	r24, r17
								break;
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	default: ret_val=LCD_E_NOT_OK;
 800:	85 e0       	ldi	r24, 0x05	; 5
				break;
								
	}
	mode=st_config->u8_mode;
 802:	98 81       	ld	r25, Y
 804:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <mode>
	return ret_val;
}
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
 80e:	08 95       	ret

00000810 <LCD_clear>:
u8_en_lcdErrorsType LCD_clear (void)
{

	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=LCD_cmd(&st_gs_lcdConfig,0x01);
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	89 e0       	ldi	r24, 0x09	; 9
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
	return ret_val;

}
 81a:	08 95       	ret

0000081c <LCD_setCursor>:
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	switch(u8_row)
 81c:	81 30       	cpi	r24, 0x01	; 1
 81e:	19 f0       	breq	.+6      	; 0x826 <LCD_setCursor+0xa>
 820:	82 30       	cpi	r24, 0x02	; 2
 822:	41 f0       	breq	.+16     	; 0x834 <LCD_setCursor+0x18>
 824:	0e c0       	rjmp	.+28     	; 0x842 <LCD_setCursor+0x26>
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
 826:	61 58       	subi	r22, 0x81	; 129
 828:	89 e0       	ldi	r24, 0x09	; 9
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
 830:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
 832:	08 95       	ret
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
 834:	61 54       	subi	r22, 0x41	; 65
 836:	89 e0       	ldi	r24, 0x09	; 9
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
 83e:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
 840:	08 95       	ret
		default:ret_val=LCD_E_NOT_OK;break;
 842:	85 e0       	ldi	r24, 0x05	; 5
	}

	return ret_val;

}
 844:	08 95       	ret

00000846 <LCD_char>:
		ret_val=LCD_E_NOT_OK;
	}
	return ret_val;
}
  void LCD_char(st_lcdConfigType* st_config,uint8_t cmd)
{
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	ec 01       	movw	r28, r24
 84e:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 850:	6e 89       	ldd	r22, Y+22	; 0x16
 852:	40 e0       	ldi	r20, 0x00	; 0
 854:	8d 89       	ldd	r24, Y+21	; 0x15
 856:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_HIGH);
 85a:	6a 89       	ldd	r22, Y+18	; 0x12
 85c:	41 e0       	ldi	r20, 0x01	; 1
 85e:	89 89       	ldd	r24, Y+17	; 0x11
 860:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 864:	6c 89       	ldd	r22, Y+20	; 0x14
 866:	40 e0       	ldi	r20, 0x00	; 0
 868:	8b 89       	ldd	r24, Y+19	; 0x13
 86a:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 86e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
 872:	81 11       	cpse	r24, r1
 874:	48 c0       	rjmp	.+144    	; 0x906 <__stack+0xa7>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 876:	68 89       	ldd	r22, Y+16	; 0x10
 878:	41 2f       	mov	r20, r17
 87a:	44 1f       	adc	r20, r20
 87c:	44 27       	eor	r20, r20
 87e:	44 1f       	adc	r20, r20
 880:	8f 85       	ldd	r24, Y+15	; 0x0f
 882:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 886:	6e 85       	ldd	r22, Y+14	; 0x0e
 888:	16 fb       	bst	r17, 6
 88a:	44 27       	eor	r20, r20
 88c:	40 f9       	bld	r20, 0
 88e:	8d 85       	ldd	r24, Y+13	; 0x0d
 890:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 894:	6c 85       	ldd	r22, Y+12	; 0x0c
 896:	15 fb       	bst	r17, 5
 898:	44 27       	eor	r20, r20
 89a:	40 f9       	bld	r20, 0
 89c:	8b 85       	ldd	r24, Y+11	; 0x0b
 89e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 8a2:	6a 85       	ldd	r22, Y+10	; 0x0a
 8a4:	14 fb       	bst	r17, 4
 8a6:	44 27       	eor	r20, r20
 8a8:	40 f9       	bld	r20, 0
 8aa:	89 85       	ldd	r24, Y+9	; 0x09
 8ac:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		ENABLE();
 8b0:	0e 94 ed 02 	call	0x5da	; 0x5da <ENABLE>
 8b4:	8f e6       	ldi	r24, 0x6F	; 111
 8b6:	97 e1       	ldi	r25, 0x17	; 23
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
 8be:	00 00       	nop
		_delay_ms(3);
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 8c0:	68 89       	ldd	r22, Y+16	; 0x10
 8c2:	13 fb       	bst	r17, 3
 8c4:	44 27       	eor	r20, r20
 8c6:	40 f9       	bld	r20, 0
 8c8:	8f 85       	ldd	r24, Y+15	; 0x0f
 8ca:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 8ce:	6e 85       	ldd	r22, Y+14	; 0x0e
 8d0:	12 fb       	bst	r17, 2
 8d2:	44 27       	eor	r20, r20
 8d4:	40 f9       	bld	r20, 0
 8d6:	8d 85       	ldd	r24, Y+13	; 0x0d
 8d8:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 8dc:	6c 85       	ldd	r22, Y+12	; 0x0c
 8de:	11 fb       	bst	r17, 1
 8e0:	44 27       	eor	r20, r20
 8e2:	40 f9       	bld	r20, 0
 8e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 8e6:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 8ea:	6a 85       	ldd	r22, Y+10	; 0x0a
 8ec:	41 2f       	mov	r20, r17
 8ee:	41 70       	andi	r20, 0x01	; 1
 8f0:	89 85       	ldd	r24, Y+9	; 0x09
 8f2:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_writePIN>
		ENABLE();
 8f6:	0e 94 ed 02 	call	0x5da	; 0x5da <ENABLE>
 8fa:	8f e6       	ldi	r24, 0x6F	; 111
 8fc:	97 e1       	ldi	r25, 0x17	; 23
 8fe:	01 97       	sbiw	r24, 0x01	; 1
 900:	f1 f7       	brne	.-4      	; 0x8fe <__stack+0x9f>
 902:	00 c0       	rjmp	.+0      	; 0x904 <__stack+0xa5>
 904:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	1f 91       	pop	r17
 90c:	08 95       	ret

0000090e <LCD_writeString>:

	return ret_val;

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
 90e:	0f 93       	push	r16
 910:	1f 93       	push	r17
 912:	cf 93       	push	r28
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	if(u8_data==(void*)0)
 914:	00 97       	sbiw	r24, 0x00	; 0
 916:	81 f0       	breq	.+32     	; 0x938 <LCD_writeString+0x2a>
 918:	8c 01       	movw	r16, r24
 91a:	c0 e0       	ldi	r28, 0x00	; 0
 91c:	05 c0       	rjmp	.+10     	; 0x928 <LCD_writeString+0x1a>

	else
	{
		while(u8_data[i] !='\0')
		{
			LCD_char(&st_gs_lcdConfig,u8_data[i]);
 91e:	89 e0       	ldi	r24, 0x09	; 9
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	0e 94 23 04 	call	0x846	; 0x846 <LCD_char>
			i++;
 926:	cf 5f       	subi	r28, 0xFF	; 255
		ret_val=LCD_E_NOT_OK;
	}

	else
	{
		while(u8_data[i] !='\0')
 928:	f8 01       	movw	r30, r16
 92a:	ec 0f       	add	r30, r28
 92c:	f1 1d       	adc	r31, r1
 92e:	60 81       	ld	r22, Z
 930:	61 11       	cpse	r22, r1
 932:	f5 cf       	rjmp	.-22     	; 0x91e <LCD_writeString+0x10>

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	01 c0       	rjmp	.+2      	; 0x93a <LCD_writeString+0x2c>
	if(u8_data==(void*)0)
	{
		ret_val=LCD_E_NOT_OK;
 938:	85 e0       	ldi	r24, 0x05	; 5
		}
	}
	return ret_val;
	

}
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	08 95       	ret

00000942 <LCD_writeSpChar>:
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	28 97       	sbiw	r28, 0x08	; 8
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	de bf       	out	0x3e, r29	; 62
 954:	0f be       	out	0x3f, r0	; 63
 956:	cd bf       	out	0x3d, r28	; 61
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
 958:	98 e0       	ldi	r25, 0x08	; 8
 95a:	e0 e6       	ldi	r30, 0x60	; 96
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	de 01       	movw	r26, r28
 960:	11 96       	adiw	r26, 0x01	; 1
 962:	01 90       	ld	r0, Z+
 964:	0d 92       	st	X+, r0
 966:	9a 95       	dec	r25
 968:	e1 f7       	brne	.-8      	; 0x962 <LCD_writeSpChar+0x20>
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
 96a:	68 2f       	mov	r22, r24
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	68 5f       	subi	r22, 0xF8	; 248
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	66 0f       	add	r22, r22
 974:	66 0f       	add	r22, r22
 976:	66 0f       	add	r22, r22
 978:	89 e0       	ldi	r24, 0x09	; 9
 97a:	91 e0       	ldi	r25, 0x01	; 1
 97c:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
	for(i=0;i<8;i++)
 980:	10 e0       	ldi	r17, 0x00	; 0
 982:	0c c0       	rjmp	.+24     	; 0x99c <LCD_writeSpChar+0x5a>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
 984:	e1 e0       	ldi	r30, 0x01	; 1
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	ec 0f       	add	r30, r28
 98a:	fd 1f       	adc	r31, r29
 98c:	e1 0f       	add	r30, r17
 98e:	f1 1d       	adc	r31, r1
 990:	60 81       	ld	r22, Z
 992:	89 e0       	ldi	r24, 0x09	; 9
 994:	91 e0       	ldi	r25, 0x01	; 1
 996:	0e 94 23 04 	call	0x846	; 0x846 <LCD_char>
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
	for(i=0;i<8;i++)
 99a:	1f 5f       	subi	r17, 0xFF	; 255
 99c:	18 30       	cpi	r17, 0x08	; 8
 99e:	90 f3       	brcs	.-28     	; 0x984 <LCD_writeSpChar+0x42>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
	}	
	
	LCD_cmd(&st_gs_lcdConfig,0xc0);
 9a0:	60 ec       	ldi	r22, 0xC0	; 192
 9a2:	89 e0       	ldi	r24, 0x09	; 9
 9a4:	91 e0       	ldi	r25, 0x01	; 1
 9a6:	0e 94 02 03 	call	0x604	; 0x604 <LCD_cmd>
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
 9aa:	63 e0       	ldi	r22, 0x03	; 3
 9ac:	89 e0       	ldi	r24, 0x09	; 9
 9ae:	91 e0       	ldi	r25, 0x01	; 1
 9b0:	0e 94 23 04 	call	0x846	; 0x846 <LCD_char>
	return ret_val;
}
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	28 96       	adiw	r28, 0x08	; 8
 9b8:	0f b6       	in	r0, 0x3f	; 63
 9ba:	f8 94       	cli
 9bc:	de bf       	out	0x3e, r29	; 62
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	cd bf       	out	0x3d, r28	; 61
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	08 95       	ret

000009ca <TEMP_SENSOR_init>:


u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
	return 0;
}
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	08 95       	ret

000009ce <TIMER_Manager_init>:
	return 0;
}
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	return 0;
}
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	08 95       	ret

000009d2 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	return 0;
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	08 95       	ret

000009d6 <main>:

#include "APP/app.h"

int main(void)
{
	APP_start();
 9d6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <APP_start>
}
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	08 95       	ret

000009e0 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 9e0:	68 30       	cpi	r22, 0x08	; 8
 9e2:	a0 f5       	brcc	.+104    	; 0xa4c <DIO_init+0x6c>
	{
		if (port == porta)
 9e4:	81 11       	cpse	r24, r1
 9e6:	0b c0       	rjmp	.+22     	; 0x9fe <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 9e8:	8a b3       	in	r24, 0x1a	; 26
 9ea:	50 e0       	ldi	r21, 0x00	; 0
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <DIO_init+0x12>
 9ee:	44 0f       	add	r20, r20
 9f0:	55 1f       	adc	r21, r21
 9f2:	6a 95       	dec	r22
 9f4:	e2 f7       	brpl	.-8      	; 0x9ee <DIO_init+0xe>
 9f6:	48 2b       	or	r20, r24
 9f8:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	08 95       	ret
		}
		else if (port == portb)
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	59 f4       	brne	.+22     	; 0xa18 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 a02:	87 b3       	in	r24, 0x17	; 23
 a04:	50 e0       	ldi	r21, 0x00	; 0
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <DIO_init+0x2c>
 a08:	44 0f       	add	r20, r20
 a0a:	55 1f       	adc	r21, r21
 a0c:	6a 95       	dec	r22
 a0e:	e2 f7       	brpl	.-8      	; 0xa08 <DIO_init+0x28>
 a10:	48 2b       	or	r20, r24
 a12:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 a14:	80 e0       	ldi	r24, 0x00	; 0
 a16:	08 95       	ret
		}
		else if (port == portc)
 a18:	82 30       	cpi	r24, 0x02	; 2
 a1a:	59 f4       	brne	.+22     	; 0xa32 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 a1c:	84 b3       	in	r24, 0x14	; 20
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <DIO_init+0x46>
 a22:	44 0f       	add	r20, r20
 a24:	55 1f       	adc	r21, r21
 a26:	6a 95       	dec	r22
 a28:	e2 f7       	brpl	.-8      	; 0xa22 <DIO_init+0x42>
 a2a:	48 2b       	or	r20, r24
 a2c:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 a2e:	80 e0       	ldi	r24, 0x00	; 0
 a30:	08 95       	ret
		}
		else if (port == portd)
 a32:	83 30       	cpi	r24, 0x03	; 3
 a34:	69 f4       	brne	.+26     	; 0xa50 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 a36:	81 b3       	in	r24, 0x11	; 17
 a38:	50 e0       	ldi	r21, 0x00	; 0
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <DIO_init+0x60>
 a3c:	44 0f       	add	r20, r20
 a3e:	55 1f       	adc	r21, r21
 a40:	6a 95       	dec	r22
 a42:	e2 f7       	brpl	.-8      	; 0xa3c <DIO_init+0x5c>
 a44:	48 2b       	or	r20, r24
 a46:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 a50:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 a52:	08 95       	ret

00000a54 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 a54:	68 30       	cpi	r22, 0x08	; 8
 a56:	08 f0       	brcs	.+2      	; 0xa5a <DIO_writePIN+0x6>
 a58:	74 c0       	rjmp	.+232    	; 0xb42 <DIO_writePIN+0xee>
	{
		if (port == porta)
 a5a:	81 11       	cpse	r24, r1
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 a5e:	41 30       	cpi	r20, 0x01	; 1
 a60:	61 f4       	brne	.+24     	; 0xa7a <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 a62:	2b b3       	in	r18, 0x1b	; 27
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <DIO_writePIN+0x1a>
 a6a:	88 0f       	add	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	6a 95       	dec	r22
 a70:	e2 f7       	brpl	.-8      	; 0xa6a <DIO_writePIN+0x16>
 a72:	82 2b       	or	r24, r18
 a74:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 a7a:	2b b3       	in	r18, 0x1b	; 27
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_writePIN+0x32>
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	6a 95       	dec	r22
 a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_writePIN+0x2e>
 a8a:	80 95       	com	r24
 a8c:	82 23       	and	r24, r18
 a8e:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	08 95       	ret
		}
		else if (port == portb)
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	d9 f4       	brne	.+54     	; 0xace <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 a98:	41 30       	cpi	r20, 0x01	; 1
 a9a:	61 f4       	brne	.+24     	; 0xab4 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 a9c:	28 b3       	in	r18, 0x18	; 24
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <DIO_writePIN+0x54>
 aa4:	88 0f       	add	r24, r24
 aa6:	99 1f       	adc	r25, r25
 aa8:	6a 95       	dec	r22
 aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <DIO_writePIN+0x50>
 aac:	82 2b       	or	r24, r18
 aae:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 ab4:	28 b3       	in	r18, 0x18	; 24
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <DIO_writePIN+0x6c>
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	6a 95       	dec	r22
 ac2:	e2 f7       	brpl	.-8      	; 0xabc <DIO_writePIN+0x68>
 ac4:	80 95       	com	r24
 ac6:	82 23       	and	r24, r18
 ac8:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 aca:	80 e0       	ldi	r24, 0x00	; 0
 acc:	08 95       	ret
		}
		else if (port == portc)
 ace:	82 30       	cpi	r24, 0x02	; 2
 ad0:	d9 f4       	brne	.+54     	; 0xb08 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 ad2:	41 30       	cpi	r20, 0x01	; 1
 ad4:	61 f4       	brne	.+24     	; 0xaee <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 ad6:	25 b3       	in	r18, 0x15	; 21
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <DIO_writePIN+0x8e>
 ade:	88 0f       	add	r24, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	6a 95       	dec	r22
 ae4:	e2 f7       	brpl	.-8      	; 0xade <DIO_writePIN+0x8a>
 ae6:	82 2b       	or	r24, r18
 ae8:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 aea:	80 e0       	ldi	r24, 0x00	; 0
 aec:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 aee:	25 b3       	in	r18, 0x15	; 21
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	02 c0       	rjmp	.+4      	; 0xafa <DIO_writePIN+0xa6>
 af6:	88 0f       	add	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	6a 95       	dec	r22
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <DIO_writePIN+0xa2>
 afe:	80 95       	com	r24
 b00:	82 23       	and	r24, r18
 b02:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	08 95       	ret
		}
		else if (port == portd)
 b08:	83 30       	cpi	r24, 0x03	; 3
 b0a:	e9 f4       	brne	.+58     	; 0xb46 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 b0c:	41 30       	cpi	r20, 0x01	; 1
 b0e:	61 f4       	brne	.+24     	; 0xb28 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 b10:	22 b3       	in	r18, 0x12	; 18
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_writePIN+0xc8>
 b18:	88 0f       	add	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	6a 95       	dec	r22
 b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_writePIN+0xc4>
 b20:	82 2b       	or	r24, r18
 b22:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 b24:	80 e0       	ldi	r24, 0x00	; 0
 b26:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 b28:	22 b3       	in	r18, 0x12	; 18
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_writePIN+0xe0>
 b30:	88 0f       	add	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	6a 95       	dec	r22
 b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_writePIN+0xdc>
 b38:	80 95       	com	r24
 b3a:	82 23       	and	r24, r18
 b3c:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 b46:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 b48:	08 95       	ret

00000b4a <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
 b4a:	68 30       	cpi	r22, 0x08	; 8
 b4c:	08 f0       	brcs	.+2      	; 0xb50 <DIO_readPIN+0x6>
 b4e:	64 c0       	rjmp	.+200    	; 0xc18 <DIO_readPIN+0xce>
	{
		if (port == porta)
 b50:	81 11       	cpse	r24, r1
 b52:	17 c0       	rjmp	.+46     	; 0xb82 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
 b54:	79 b3       	in	r23, 0x19	; 25
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	9c 01       	movw	r18, r24
 b5c:	06 2e       	mov	r0, r22
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <DIO_readPIN+0x1a>
 b60:	22 0f       	add	r18, r18
 b62:	33 1f       	adc	r19, r19
 b64:	0a 94       	dec	r0
 b66:	e2 f7       	brpl	.-8      	; 0xb60 <DIO_readPIN+0x16>
 b68:	87 2f       	mov	r24, r23
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	82 23       	and	r24, r18
 b6e:	93 23       	and	r25, r19
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_readPIN+0x2c>
 b72:	96 95       	lsr	r25
 b74:	87 95       	ror	r24
 b76:	6a 95       	dec	r22
 b78:	e2 f7       	brpl	.-8      	; 0xb72 <DIO_readPIN+0x28>
 b7a:	fa 01       	movw	r30, r20
 b7c:	80 83       	st	Z, r24
			return DIO_E_OK;
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	08 95       	ret
		}
		else if (port == portb)
 b82:	81 30       	cpi	r24, 0x01	; 1
 b84:	b9 f4       	brne	.+46     	; 0xbb4 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
 b86:	76 b3       	in	r23, 0x16	; 22
 b88:	81 e0       	ldi	r24, 0x01	; 1
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	9c 01       	movw	r18, r24
 b8e:	06 2e       	mov	r0, r22
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <DIO_readPIN+0x4c>
 b92:	22 0f       	add	r18, r18
 b94:	33 1f       	adc	r19, r19
 b96:	0a 94       	dec	r0
 b98:	e2 f7       	brpl	.-8      	; 0xb92 <DIO_readPIN+0x48>
 b9a:	87 2f       	mov	r24, r23
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	82 23       	and	r24, r18
 ba0:	93 23       	and	r25, r19
 ba2:	02 c0       	rjmp	.+4      	; 0xba8 <DIO_readPIN+0x5e>
 ba4:	96 95       	lsr	r25
 ba6:	87 95       	ror	r24
 ba8:	6a 95       	dec	r22
 baa:	e2 f7       	brpl	.-8      	; 0xba4 <DIO_readPIN+0x5a>
 bac:	fa 01       	movw	r30, r20
 bae:	80 83       	st	Z, r24
			return DIO_E_OK;
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	08 95       	ret
		}
		else if (port == portc)
 bb4:	82 30       	cpi	r24, 0x02	; 2
 bb6:	b9 f4       	brne	.+46     	; 0xbe6 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
 bb8:	73 b3       	in	r23, 0x13	; 19
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	9c 01       	movw	r18, r24
 bc0:	06 2e       	mov	r0, r22
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO_readPIN+0x7e>
 bc4:	22 0f       	add	r18, r18
 bc6:	33 1f       	adc	r19, r19
 bc8:	0a 94       	dec	r0
 bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO_readPIN+0x7a>
 bcc:	87 2f       	mov	r24, r23
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	82 23       	and	r24, r18
 bd2:	93 23       	and	r25, r19
 bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_readPIN+0x90>
 bd6:	96 95       	lsr	r25
 bd8:	87 95       	ror	r24
 bda:	6a 95       	dec	r22
 bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_readPIN+0x8c>
 bde:	fa 01       	movw	r30, r20
 be0:	80 83       	st	Z, r24
			return DIO_E_OK;
 be2:	80 e0       	ldi	r24, 0x00	; 0
 be4:	08 95       	ret
		}
		else if (port == portd)
 be6:	83 30       	cpi	r24, 0x03	; 3
 be8:	c9 f4       	brne	.+50     	; 0xc1c <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
 bea:	70 b3       	in	r23, 0x10	; 16
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	9c 01       	movw	r18, r24
 bf2:	06 2e       	mov	r0, r22
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_readPIN+0xb0>
 bf6:	22 0f       	add	r18, r18
 bf8:	33 1f       	adc	r19, r19
 bfa:	0a 94       	dec	r0
 bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_readPIN+0xac>
 bfe:	87 2f       	mov	r24, r23
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	82 23       	and	r24, r18
 c04:	93 23       	and	r25, r19
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_readPIN+0xc2>
 c08:	96 95       	lsr	r25
 c0a:	87 95       	ror	r24
 c0c:	6a 95       	dec	r22
 c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_readPIN+0xbe>
 c10:	fa 01       	movw	r30, r20
 c12:	80 83       	st	Z, r24
			return DIO_E_OK;
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 c18:	81 e0       	ldi	r24, 0x01	; 1
 c1a:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 c1c:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
 c1e:	08 95       	ret

00000c20 <__itoa_ncheck>:
 c20:	bb 27       	eor	r27, r27
 c22:	4a 30       	cpi	r20, 0x0A	; 10
 c24:	31 f4       	brne	.+12     	; 0xc32 <__itoa_ncheck+0x12>
 c26:	99 23       	and	r25, r25
 c28:	22 f4       	brpl	.+8      	; 0xc32 <__itoa_ncheck+0x12>
 c2a:	bd e2       	ldi	r27, 0x2D	; 45
 c2c:	90 95       	com	r25
 c2e:	81 95       	neg	r24
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__utoa_common>

00000c36 <__utoa_ncheck>:
 c36:	bb 27       	eor	r27, r27

00000c38 <__utoa_common>:
 c38:	fb 01       	movw	r30, r22
 c3a:	55 27       	eor	r21, r21
 c3c:	aa 27       	eor	r26, r26
 c3e:	88 0f       	add	r24, r24
 c40:	99 1f       	adc	r25, r25
 c42:	aa 1f       	adc	r26, r26
 c44:	a4 17       	cp	r26, r20
 c46:	10 f0       	brcs	.+4      	; 0xc4c <__utoa_common+0x14>
 c48:	a4 1b       	sub	r26, r20
 c4a:	83 95       	inc	r24
 c4c:	50 51       	subi	r21, 0x10	; 16
 c4e:	b9 f7       	brne	.-18     	; 0xc3e <__utoa_common+0x6>
 c50:	a0 5d       	subi	r26, 0xD0	; 208
 c52:	aa 33       	cpi	r26, 0x3A	; 58
 c54:	08 f0       	brcs	.+2      	; 0xc58 <__utoa_common+0x20>
 c56:	a9 5d       	subi	r26, 0xD9	; 217
 c58:	a1 93       	st	Z+, r26
 c5a:	00 97       	sbiw	r24, 0x00	; 0
 c5c:	79 f7       	brne	.-34     	; 0xc3c <__utoa_common+0x4>
 c5e:	b1 11       	cpse	r27, r1
 c60:	b1 93       	st	Z+, r27
 c62:	11 92       	st	Z+, r1
 c64:	cb 01       	movw	r24, r22
 c66:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <strrev>

00000c6a <strrev>:
 c6a:	dc 01       	movw	r26, r24
 c6c:	fc 01       	movw	r30, r24
 c6e:	67 2f       	mov	r22, r23
 c70:	71 91       	ld	r23, Z+
 c72:	77 23       	and	r23, r23
 c74:	e1 f7       	brne	.-8      	; 0xc6e <strrev+0x4>
 c76:	32 97       	sbiw	r30, 0x02	; 2
 c78:	04 c0       	rjmp	.+8      	; 0xc82 <strrev+0x18>
 c7a:	7c 91       	ld	r23, X
 c7c:	6d 93       	st	X+, r22
 c7e:	70 83       	st	Z, r23
 c80:	62 91       	ld	r22, -Z
 c82:	ae 17       	cp	r26, r30
 c84:	bf 07       	cpc	r27, r31
 c86:	c8 f3       	brcs	.-14     	; 0xc7a <strrev+0x10>
 c88:	08 95       	ret

00000c8a <_exit>:
 c8a:	f8 94       	cli

00000c8c <__stop_program>:
 c8c:	ff cf       	rjmp	.-2      	; 0xc8c <__stop_program>
