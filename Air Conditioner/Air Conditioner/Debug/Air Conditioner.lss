
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a66  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000770  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000614  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e0  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cd  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 77 00 	call	0xee	; 0xee <main>
  74:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <BUZZER_init>:
static uint8_t u8_gs_buzzerState = NOT_INIT;



u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	99 f0       	breq	.+38     	; 0xaa <BUZZER_init+0x2e>
  84:	ec 01       	movw	r28, r24
		return BUZZER_E_NOT_OK;
	
	// Set Buzzer pin as output
	u8_en_dioErrors u8_dioRetVal = DIO_init(st_config->u8_port, st_config->u8_pin, STD_OUTPUT);
  86:	68 81       	ld	r22, Y
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	0e 94 99 00 	call	0x132	; 0x132 <DIO_init>
	
	// Check if there is an error from dio driver
	if(u8_dioRetVal)
  90:	81 11       	cpse	r24, r1
  92:	0c c0       	rjmp	.+24     	; 0xac <BUZZER_init+0x30>
		return u8_dioRetVal;
	
	// Store configuration locally
	st_gs_buzzerConfig.u8_port = st_config->u8_port;
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	e1 e6       	ldi	r30, 0x61	; 97
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	81 83       	std	Z+1, r24	; 0x01
	st_gs_buzzerConfig.u8_pin = st_config->u8_pin;
  9c:	88 81       	ld	r24, Y
  9e:	80 83       	st	Z, r24
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	return BUZZER_E_OK;
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	01 c0       	rjmp	.+2      	; 0xac <BUZZER_init+0x30>

u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
		return BUZZER_E_NOT_OK;
  aa:	86 e0       	ldi	r24, 0x06	; 6
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
	
	return BUZZER_E_OK;
}
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <BUZZER_start>:
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	88 23       	and	r24, r24
  b8:	49 f0       	breq	.+18     	; 0xcc <BUZZER_start+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
  ba:	e1 e6       	ldi	r30, 0x61	; 97
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	60 81       	ld	r22, Z
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	81 81       	ldd	r24, Z+1	; 0x01
  c4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_writePIN>
	
	return BUZZER_E_OK;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
  cc:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
	
	return BUZZER_E_OK;
}
  ce:	08 95       	ret

000000d0 <BUZZER_stop>:
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
  d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	88 23       	and	r24, r24
  d6:	49 f0       	breq	.+18     	; 0xea <BUZZER_stop+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
  d8:	e1 e6       	ldi	r30, 0x61	; 97
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	60 81       	ld	r22, Z
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	81 81       	ldd	r24, Z+1	; 0x01
  e2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_writePIN>
	
	return BUZZER_E_OK;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
  ea:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
	
	return BUZZER_E_OK;
  ec:	08 95       	ret

000000ee <main>:



#include "HAL/buzzer/buzzer.h"
int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <main+0x6>
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
	st_buzzerConfigType x;
	x.u8_pin = 0;
  f8:	19 82       	std	Y+1, r1	; 0x01
	x.u8_port = 0;
  fa:	1a 82       	std	Y+2, r1	; 0x02
	BUZZER_init(&x);
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 3e 00 	call	0x7c	; 0x7c <BUZZER_init>
    /* Replace with your application code */
    while (1) 
    {
		BUZZER_start();
 104:	0e 94 59 00 	call	0xb2	; 0xb2 <BUZZER_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	83 ed       	ldi	r24, 0xD3	; 211
 10c:	90 e3       	ldi	r25, 0x30	; 48
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x2a>
 118:	00 00       	nop
		_delay_ms(2000);
		BUZZER_stop();
 11a:	0e 94 68 00 	call	0xd0	; 0xd0 <BUZZER_stop>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	83 ed       	ldi	r24, 0xD3	; 211
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x36>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x40>
 12e:	00 00       	nop
 130:	e9 cf       	rjmp	.-46     	; 0x104 <main+0x16>

00000132 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 132:	68 30       	cpi	r22, 0x08	; 8
 134:	a0 f5       	brcc	.+104    	; 0x19e <DIO_init+0x6c>
	{
		if (port == porta)
 136:	81 11       	cpse	r24, r1
 138:	0b c0       	rjmp	.+22     	; 0x150 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 13a:	8a b3       	in	r24, 0x1a	; 26
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_init+0x12>
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_init+0xe>
 148:	48 2b       	or	r20, r24
 14a:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret
		}
		else if (port == portb)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	59 f4       	brne	.+22     	; 0x16a <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 154:	87 b3       	in	r24, 0x17	; 23
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_init+0x2c>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_init+0x28>
 162:	48 2b       	or	r20, r24
 164:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
		}
		else if (port == portc)
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	59 f4       	brne	.+22     	; 0x184 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 16e:	84 b3       	in	r24, 0x14	; 20
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_init+0x46>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_init+0x42>
 17c:	48 2b       	or	r20, r24
 17e:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret
		}
		else if (port == portd)
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	69 f4       	brne	.+26     	; 0x1a2 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 188:	81 b3       	in	r24, 0x11	; 17
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_init+0x60>
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_init+0x5c>
 196:	48 2b       	or	r20, r24
 198:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 1a4:	08 95       	ret

000001a6 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 1a6:	68 30       	cpi	r22, 0x08	; 8
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <DIO_writePIN+0x6>
 1aa:	74 c0       	rjmp	.+232    	; 0x294 <DIO_writePIN+0xee>
	{
		if (port == porta)
 1ac:	81 11       	cpse	r24, r1
 1ae:	1b c0       	rjmp	.+54     	; 0x1e6 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	61 f4       	brne	.+24     	; 0x1cc <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 1b4:	2b b3       	in	r18, 0x1b	; 27
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_writePIN+0x1a>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_writePIN+0x16>
 1c4:	82 2b       	or	r24, r18
 1c6:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 1cc:	2b b3       	in	r18, 0x1b	; 27
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_writePIN+0x32>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_writePIN+0x2e>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
		}
		else if (port == portb)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	d9 f4       	brne	.+54     	; 0x220 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 1ea:	41 30       	cpi	r20, 0x01	; 1
 1ec:	61 f4       	brne	.+24     	; 0x206 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_writePIN+0x54>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_writePIN+0x50>
 1fe:	82 2b       	or	r24, r18
 200:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 206:	28 b3       	in	r18, 0x18	; 24
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_writePIN+0x6c>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_writePIN+0x68>
 216:	80 95       	com	r24
 218:	82 23       	and	r24, r18
 21a:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
		}
		else if (port == portc)
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	d9 f4       	brne	.+54     	; 0x25a <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	61 f4       	brne	.+24     	; 0x240 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 228:	25 b3       	in	r18, 0x15	; 21
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_writePIN+0x8e>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_writePIN+0x8a>
 238:	82 2b       	or	r24, r18
 23a:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 240:	25 b3       	in	r18, 0x15	; 21
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_writePIN+0xa6>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_writePIN+0xa2>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
		}
		else if (port == portd)
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	e9 f4       	brne	.+58     	; 0x298 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	61 f4       	brne	.+24     	; 0x27a <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 262:	22 b3       	in	r18, 0x12	; 18
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_writePIN+0xc8>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_writePIN+0xc4>
 272:	82 2b       	or	r24, r18
 274:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 27a:	22 b3       	in	r18, 0x12	; 18
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_writePIN+0xe0>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_writePIN+0xdc>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 298:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
