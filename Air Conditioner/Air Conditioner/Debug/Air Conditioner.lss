
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  00800060  00800060  00000ba8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002adf  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001061  00000000  00000000  0000391b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cf3  00000000  00000000  0000497c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  00006670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c25  00000000  00000000  00006bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a2a  00000000  00000000  000077dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009207  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 92 03 	jmp	0x724	; 0x724 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 02 	call	0x496	; 0x496 <main>
  8a:	0c 94 98 05 	jmp	0xb30	; 0xb30 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TIMER_Manager_reset(&st_gs_timer_0_config);
  9c:	86 e6       	ldi	r24, 0x66	; 102
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 39 02 	call	0x472	; 0x472 <TIMER_Manager_reset>
  a4:	08 95       	ret

000000a6 <APP_init>:
	}
}


void APP_init(void)
{
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_0_config.u8_timerNum = TIMER_0;
  ac:	e6 e6       	ldi	r30, 0x66	; 102
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	st_gs_timer_0_config.u8_timer_ovf_int_enable = TIMER_INTERRUPT_FEATURE_ENABLE;
  b2:	14 82       	std	Z+4, r1	; 0x04
	st_gs_timer_0_config.u16_timer_InitialValue = APP_TIMER_0_INIT_VALUE;
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	93 83       	std	Z+3, r25	; 0x03
  ba:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_0_config.callBackFunction =  APP_timer0OvfHandeler;
  bc:	89 e4       	ldi	r24, 0x49	; 73
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	96 83       	std	Z+6, r25	; 0x06
  c2:	85 83       	std	Z+5, r24	; 0x05
	TIMER_Manager_init(&st_gs_timer_0_config);
  c4:	cf 01       	movw	r24, r30
  c6:	0e 94 19 02 	call	0x432	; 0x432 <TIMER_Manager_init>
	
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
  ca:	e3 e6       	ldi	r30, 0x63	; 99
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	82 83       	std	Z+2, r24	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
  d2:	d1 e0       	ldi	r29, 0x01	; 1
  d4:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
  d6:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
  d8:	cf 01       	movw	r24, r30
  da:	0e 94 f6 01 	call	0x3ec	; 0x3ec <TEMP_SENSOR_init>
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
  de:	ed e7       	ldi	r30, 0x7D	; 125
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
	st_gs_lcdConfig.u8_d4Pin[0] = porta;
  e4:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[1] = pin0;
  e6:	12 86       	std	Z+10, r1	; 0x0a
	st_gs_lcdConfig.u8_d5Pin[0] = porta;
  e8:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[1] = pin1;
  ea:	d4 87       	std	Z+12, r29	; 0x0c
	st_gs_lcdConfig.u8_d6Pin[0] = porta;
  ec:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[1] = pin2;
  ee:	c2 e0       	ldi	r28, 0x02	; 2
  f0:	c6 87       	std	Z+14, r28	; 0x0e
	st_gs_lcdConfig.u8_d7Pin[0] = porta;
  f2:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[1] = pin3;
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	10 8b       	std	Z+16, r17	; 0x10
	LCD_init(&st_gs_lcdConfig);
  f8:	cf 01       	movw	r24, r30
  fa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LCD_init>
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[0] = portc;
  fe:	e4 e9       	ldi	r30, 0x94	; 148
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[1] = pin3;
 104:	17 83       	std	Z+7, r17	; 0x07
	st_gs_keypadConfig.u8_col2Pin[0] = portc;
 106:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[1] = pin4;
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	81 87       	std	Z+9, r24	; 0x09
	st_gs_keypadConfig.u8_col3Pin[0] = portc;
 10c:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[1] = pin5;
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	83 87       	std	Z+11, r24	; 0x0b
	st_gs_keypadConfig.u8_col4Pin[0] = portc;
 112:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[1] = pin6;
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	85 87       	std	Z+13, r24	; 0x0d
	st_gs_keypadConfig.u8_row1Pin[0] = portc;
 118:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[1] = pin0 ;
 11a:	11 82       	std	Z+1, r1	; 0x01
	st_gs_keypadConfig.u8_row2Pin[0] = portc;
 11c:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[1] = pin1 ;
 11e:	d3 83       	std	Z+3, r29	; 0x03
	st_gs_keypadConfig.u8_row3Pin[0] = portc;
 120:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[1] = pin2 ;
 122:	c5 83       	std	Z+5, r28	; 0x05
	KEYPAD_init(&st_gs_keypadConfig);
 124:	cf 01       	movw	r24, r30
 126:	0e 94 bb 00 	call	0x176	; 0x176 <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
 12a:	e1 e6       	ldi	r30, 0x61	; 97
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
 130:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
 132:	cf 01       	movw	r24, r30
 134:	0e 94 a0 00 	call	0x140	; 0x140 <BUZZER_init>
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	08 95       	ret

00000140 <BUZZER_init>:
static uint8_t u8_gs_buzzerState = NOT_INIT;



u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
 144:	00 97       	sbiw	r24, 0x00	; 0
 146:	99 f0       	breq	.+38     	; 0x16e <BUZZER_init+0x2e>
 148:	ec 01       	movw	r28, r24
		return BUZZER_E_NOT_OK;
	
	// Set Buzzer pin as output
	u8_en_dioErrors u8_dioRetVal = DIO_init(st_config->u8_port, st_config->u8_pin, STD_OUTPUT);
 14a:	68 81       	ld	r22, Y
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
	
	// Check if there is an error from dio driver
	if(u8_dioRetVal)
 154:	81 11       	cpse	r24, r1
 156:	0c c0       	rjmp	.+24     	; 0x170 <BUZZER_init+0x30>
		return u8_dioRetVal;
	
	// Store configuration locally
	st_gs_buzzerConfig.u8_port = st_config->u8_port;
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	ee e6       	ldi	r30, 0x6E	; 110
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	81 83       	std	Z+1, r24	; 0x01
	st_gs_buzzerConfig.u8_pin = st_config->u8_pin;
 160:	88 81       	ld	r24, Y
 162:	80 83       	st	Z, r24
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <u8_gs_buzzerState>
	
	return BUZZER_E_OK;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	01 c0       	rjmp	.+2      	; 0x170 <BUZZER_init+0x30>

u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
		return BUZZER_E_NOT_OK;
 16e:	86 e0       	ldi	r24, 0x06	; 6
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
	
	return BUZZER_E_OK;
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <KEYPAD_init>:
#define F_CPU 1000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	a9 f1       	breq	.+106    	; 0x1e8 <KEYPAD_init+0x72>
 17e:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
 180:	69 81       	ldd	r22, Y+1	; 0x01
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	88 81       	ld	r24, Y
 186:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
 18a:	6b 81       	ldd	r22, Y+3	; 0x03
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
 194:	6d 81       	ldd	r22, Y+5	; 0x05
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
 19e:	69 81       	ldd	r22, Y+1	; 0x01
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	88 81       	ld	r24, Y
 1a4:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
 1a8:	6b 81       	ldd	r22, Y+3	; 0x03
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
 1b2:	6d 81       	ldd	r22, Y+5	; 0x05
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
 1bc:	6f 81       	ldd	r22, Y+7	; 0x07
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	8e 81       	ldd	r24, Y+6	; 0x06
 1c2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
 1c6:	69 85       	ldd	r22, Y+9	; 0x09
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	88 85       	ldd	r24, Y+8	; 0x08
 1cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
 1d0:	6b 85       	ldd	r22, Y+11	; 0x0b
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	8a 85       	ldd	r24, Y+10	; 0x0a
 1d6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
 1da:	6d 85       	ldd	r22, Y+13	; 0x0d
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	8c 85       	ldd	r24, Y+12	; 0x0c
 1e0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
 1e8:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <ENABLE>:
	{
		//do nothing
	}
}
static void ENABLE(void)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
	
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_HIGH);
 1f4:	cd e7       	ldi	r28, 0x7D	; 125
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	6e 89       	ldd	r22, Y+22	; 0x16
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	8d 89       	ldd	r24, Y+21	; 0x15
 1fe:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	00 00       	nop
	_delay_us(1);
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_LOW);
 204:	6e 89       	ldd	r22, Y+22	; 0x16
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	8d 89       	ldd	r24, Y+21	; 0x15
 20a:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>

 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <LCD_cmd>:
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
void LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	16 2f       	mov	r17, r22
 21e:	6e 89       	ldd	r22, Y+22	; 0x16
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	8d 89       	ldd	r24, Y+21	; 0x15
 224:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_LOW);
 228:	6a 89       	ldd	r22, Y+18	; 0x12
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	89 89       	ldd	r24, Y+17	; 0x11
 22e:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 232:	6c 89       	ldd	r22, Y+20	; 0x14
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	8b 89       	ldd	r24, Y+19	; 0x13
 238:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 23c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <mode>
 240:	81 11       	cpse	r24, r1
 242:	48 c0       	rjmp	.+144    	; 0x2d4 <LCD_cmd+0xc0>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 244:	68 89       	ldd	r22, Y+16	; 0x10
 246:	41 2f       	mov	r20, r17
 248:	44 1f       	adc	r20, r20
 24a:	44 27       	eor	r20, r20
 24c:	44 1f       	adc	r20, r20
 24e:	8f 85       	ldd	r24, Y+15	; 0x0f
 250:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 254:	6e 85       	ldd	r22, Y+14	; 0x0e
 256:	16 fb       	bst	r17, 6
 258:	44 27       	eor	r20, r20
 25a:	40 f9       	bld	r20, 0
 25c:	8d 85       	ldd	r24, Y+13	; 0x0d
 25e:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 262:	6c 85       	ldd	r22, Y+12	; 0x0c
 264:	15 fb       	bst	r17, 5
 266:	44 27       	eor	r20, r20
 268:	40 f9       	bld	r20, 0
 26a:	8b 85       	ldd	r24, Y+11	; 0x0b
 26c:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 270:	6a 85       	ldd	r22, Y+10	; 0x0a
 272:	14 fb       	bst	r17, 4
 274:	44 27       	eor	r20, r20
 276:	40 f9       	bld	r20, 0
 278:	89 85       	ldd	r24, Y+9	; 0x09
 27a:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
		ENABLE();
 27e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	8d ee       	ldi	r24, 0xED	; 237
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_cmd+0x72>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_cmd+0x78>
 28c:	00 00       	nop
		_delay_ms(3);
	    DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 28e:	68 89       	ldd	r22, Y+16	; 0x10
 290:	13 fb       	bst	r17, 3
 292:	44 27       	eor	r20, r20
 294:	40 f9       	bld	r20, 0
 296:	8f 85       	ldd	r24, Y+15	; 0x0f
 298:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 29c:	6e 85       	ldd	r22, Y+14	; 0x0e
 29e:	12 fb       	bst	r17, 2
 2a0:	44 27       	eor	r20, r20
 2a2:	40 f9       	bld	r20, 0
 2a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2a6:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 2aa:	6c 85       	ldd	r22, Y+12	; 0x0c
 2ac:	11 fb       	bst	r17, 1
 2ae:	44 27       	eor	r20, r20
 2b0:	40 f9       	bld	r20, 0
 2b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b4:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 2b8:	6a 85       	ldd	r22, Y+10	; 0x0a
 2ba:	41 2f       	mov	r20, r17
 2bc:	41 70       	andi	r20, 0x01	; 1
 2be:	89 85       	ldd	r24, Y+9	; 0x09
 2c0:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_writePIN>
		ENABLE();
 2c4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <ENABLE>
 2c8:	8d ee       	ldi	r24, 0xED	; 237
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_cmd+0xb8>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_cmd+0xbe>
 2d2:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	08 95       	ret

000002dc <LCD_init>:
#include<util/delay.h>
extern st_lcdConfigType st_gs_lcdConfig;
static uint8_t mode;

u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ec 01       	movw	r28, r24
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=DIO_init(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_OUTPUT);
 2e2:	6a 89       	ldd	r22, Y+18	; 0x12
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	89 89       	ldd	r24, Y+17	; 0x11
 2e8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
	ret_val |=DIO_init(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_OUTPUT);
 2ec:	6c 89       	ldd	r22, Y+20	; 0x14
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	8b 89       	ldd	r24, Y+19	; 0x13
 2f2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
	ret_val |=DIO_init(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_OUTPUT);
 2f6:	6e 89       	ldd	r22, Y+22	; 0x16
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	8d 89       	ldd	r24, Y+21	; 0x15
 2fc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
	switch(st_config->u8_mode)
 300:	88 81       	ld	r24, Y
 302:	88 23       	and	r24, r24
 304:	19 f0       	breq	.+6      	; 0x30c <LCD_init+0x30>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	79 f1       	breq	.+94     	; 0x368 <LCD_init+0x8c>
 30a:	6a c0       	rjmp	.+212    	; 0x3e0 <LCD_init+0x104>
	{
		case LCD_4_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x02);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	8d e7       	ldi	r24, 0x7D	; 125
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x28);
 316:	68 e2       	ldi	r22, 0x28	; 40
 318:	8d e7       	ldi	r24, 0x7D	; 125
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 320:	6c e0       	ldi	r22, 0x0C	; 12
 322:	8d e7       	ldi	r24, 0x7D	; 125
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 32a:	66 e0       	ldi	r22, 0x06	; 6
 32c:	8d e7       	ldi	r24, 0x7D	; 125
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	8d e7       	ldi	r24, 0x7D	; 125
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 33e:	6a 85       	ldd	r22, Y+10	; 0x0a
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	89 85       	ldd	r24, Y+9	; 0x09
 344:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 348:	6c 85       	ldd	r22, Y+12	; 0x0c
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	8b 85       	ldd	r24, Y+11	; 0x0b
 34e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 352:	6e 85       	ldd	r22, Y+14	; 0x0e
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	8d 85       	ldd	r24, Y+13	; 0x0d
 358:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 35c:	68 89       	ldd	r22, Y+16	; 0x10
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	8f 85       	ldd	r24, Y+15	; 0x0f
 362:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								break;
 366:	3c c0       	rjmp	.+120    	; 0x3e0 <LCD_init+0x104>
								
	case LCD_8_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x38);
 368:	68 e3       	ldi	r22, 0x38	; 56
 36a:	8d e7       	ldi	r24, 0x7D	; 125
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 372:	6c e0       	ldi	r22, 0x0C	; 12
 374:	8d e7       	ldi	r24, 0x7D	; 125
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 37c:	66 e0       	ldi	r22, 0x06	; 6
 37e:	8d e7       	ldi	r24, 0x7D	; 125
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	8d e7       	ldi	r24, 0x7D	; 125
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
		                        ret_val |=DIO_init(st_config->u8_d0Pin[0],st_config->u8_d0Pin[1],STD_OUTPUT);
 390:	6a 81       	ldd	r22, Y+2	; 0x02
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		                        ret_val |=DIO_init(st_config->u8_d1Pin[0],st_config->u8_d1Pin[1],STD_OUTPUT);
 39a:	6c 81       	ldd	r22, Y+4	; 0x04
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		                        ret_val |=DIO_init(st_config->u8_d2Pin[0],st_config->u8_d2Pin[1],STD_OUTPUT);
 3a4:	6e 81       	ldd	r22, Y+6	; 0x06
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	8d 81       	ldd	r24, Y+5	; 0x05
 3aa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
		                        ret_val |=DIO_init(st_config->u8_d3Pin[0],st_config->u8_d3Pin[1],STD_OUTPUT);
 3ae:	68 85       	ldd	r22, Y+8	; 0x08
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	8f 81       	ldd	r24, Y+7	; 0x07
 3b4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 3b8:	6a 85       	ldd	r22, Y+10	; 0x0a
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	89 85       	ldd	r24, Y+9	; 0x09
 3be:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 3c2:	6c 85       	ldd	r22, Y+12	; 0x0c
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	8b 85       	ldd	r24, Y+11	; 0x0b
 3c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 3cc:	6e 85       	ldd	r22, Y+14	; 0x0e
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	8d 85       	ldd	r24, Y+13	; 0x0d
 3d2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 3d6:	68 89       	ldd	r22, Y+16	; 0x10
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	8f 85       	ldd	r24, Y+15	; 0x0f
 3dc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
								break;
	default: ret_val=LCD_E_NOT_OK;break;
								
	}
	mode=st_config->u8_mode;
 3e0:	88 81       	ld	r24, Y
 3e2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <mode>
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <TEMP_SENSOR_init>:
static void get_Vref(u8_en_adcRefType u8_a_Vref);*/

static st_adcConfigType st_sg_adc;

u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	u8_en_dioErrors l_dio_ret = DIO_E_OK;
	
	if(NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER )
 3f0:	00 97       	sbiw	r24, 0x00	; 0
 3f2:	b9 f0       	breq	.+46     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3f4:	fc 01       	movw	r30, r24
 3f6:	22 81       	ldd	r18, Z+2	; 0x02
 3f8:	28 30       	cpi	r18, 0x08	; 8
 3fa:	a8 f4       	brcc	.+42     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3fc:	21 81       	ldd	r18, Z+1	; 0x01
 3fe:	28 30       	cpi	r18, 0x08	; 8
 400:	a0 f4       	brcc	.+40     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 402:	ec 01       	movw	r28, r24
	{
		l_TempSensor_ret = TEMP_E_NOT_OK;
	}
	else
	{
		st_sg_adc.u8_prescaler_selection = st_config->u8_prescaler_selection;
 404:	e1 e7       	ldi	r30, 0x71	; 113
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	21 83       	std	Z+1, r18	; 0x01
		st_sg_adc.u8_ref_selection = st_config->u8_ref_selection;
 40a:	88 81       	ld	r24, Y
 40c:	80 83       	st	Z, r24
		l_adc_ret = ADC_init(&st_sg_adc);
 40e:	cf 01       	movw	r24, r30
 410:	0e 94 4e 02 	call	0x49c	; 0x49c <ADC_init>
		l_dio_ret = DIO_init(porta,st_config->u8_channel,STD_INPUT);
 414:	6a 81       	ldd	r22, Y+2	; 0x02
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>

static st_adcConfigType st_sg_adc;

u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
	u8_en_tempSensorErrorsType l_TempSensor_ret = TEMP_E_OK;
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	05 c0       	rjmp	.+10     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	u8_en_adcErrorsType l_adc_ret = ADC_E_OK;
	u8_en_dioErrors l_dio_ret = DIO_E_OK;
	
	if(NULL==st_config || st_config->u8_channel >= ADC_INVALID_CHANNEL || st_config->u8_prescaler_selection >= ADC_INVALID_PRESCALER )
	{
		l_TempSensor_ret = TEMP_E_NOT_OK;
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	03 c0       	rjmp	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	01 c0       	rjmp	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42a:	88 e0       	ldi	r24, 0x08	; 8
		/*get_channel(st_config->u8_channel);
		get_Vref(st_config->u8_ref_selection);*/
				
	}
	return l_TempSensor_ret;
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <TIMER_Manager_init>:
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	91 f0       	breq	.+36     	; 0x460 <TIMER_Manager_init+0x2e>
 43c:	fc 01       	movw	r30, r24
 43e:	20 81       	ld	r18, Z
 440:	23 30       	cpi	r18, 0x03	; 3
 442:	80 f4       	brcc	.+32     	; 0x464 <TIMER_Manager_init+0x32>
 444:	21 81       	ldd	r18, Z+1	; 0x01
 446:	2a 30       	cpi	r18, 0x0A	; 10
 448:	78 f4       	brcc	.+30     	; 0x468 <TIMER_Manager_init+0x36>
 44a:	ec 01       	movw	r28, r24
 44c:	0e 94 c2 03 	call	0x784	; 0x784 <TIMER_init>
 450:	18 2f       	mov	r17, r24
 452:	68 81       	ld	r22, Y
 454:	8d 81       	ldd	r24, Y+5	; 0x05
 456:	9e 81       	ldd	r25, Y+6	; 0x06
 458:	0e 94 76 04 	call	0x8ec	; 0x8ec <TIMER_setCallBack>
 45c:	81 2b       	or	r24, r17
 45e:	05 c0       	rjmp	.+10     	; 0x46a <TIMER_Manager_init+0x38>
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	03 c0       	rjmp	.+6      	; 0x46a <TIMER_Manager_init+0x38>
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	01 c0       	rjmp	.+2      	; 0x46a <TIMER_Manager_init+0x38>
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	08 95       	ret

00000472 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	51 f0       	breq	.+20     	; 0x48a <TIMER_Manager_reset+0x18>
 476:	fc 01       	movw	r30, r24
 478:	20 81       	ld	r18, Z
 47a:	23 30       	cpi	r18, 0x03	; 3
 47c:	40 f4       	brcc	.+16     	; 0x48e <TIMER_Manager_reset+0x1c>
 47e:	21 81       	ldd	r18, Z+1	; 0x01
 480:	2a 30       	cpi	r18, 0x0A	; 10
 482:	38 f4       	brcc	.+14     	; 0x492 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
 484:	0e 94 4e 04 	call	0x89c	; 0x89c <TIMER_reset>
 488:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	08 95       	ret
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	08 95       	ret
 492:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
 494:	08 95       	ret

00000496 <main>:
int main(void)
{
	//adc_config.u8_prescaler_selection = ADC_PRESCALER_16;
	//adc_config.u8_ref_selection = ADC_AVCC;
	//ADC_init (&adc_config);
	APP_init();
 496:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_init>
 49a:	ff cf       	rjmp	.-2      	; 0x49a <main+0x4>

0000049c <ADC_init>:

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
	if(st_config == NULL){
 49c:	00 97       	sbiw	r24, 0x00	; 0
 49e:	59 f1       	breq	.+86     	; 0x4f6 <ADC_init+0x5a>
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
 4a0:	fc 01       	movw	r30, r24
 4a2:	21 81       	ldd	r18, Z+1	; 0x01
 4a4:	20 68       	ori	r18, 0x80	; 128
 4a6:	26 b9       	out	0x06, r18	; 6
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
 4a8:	80 81       	ld	r24, Z
 4aa:	82 95       	swap	r24
 4ac:	88 0f       	add	r24, r24
 4ae:	88 0f       	add	r24, r24
 4b0:	80 7c       	andi	r24, 0xC0	; 192
 4b2:	87 b9       	out	0x07, r24	; 7
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
		ret = ADC_E_NOT_OK;
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
		uint16_t result = 2;
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	70 e0       	ldi	r23, 0x00	; 0
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <ADC_init+0x28>
			result *= 2;
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
	}else{
		
		ADCSRA_ADD =	(1<<ADC_ENABLE)|(st_config->u8_prescaler_selection);
		ADMUX_ADD =	 (st_config->u8_ref_selection<<ADC_VREF_SELECT);
		uint16_t result = 2;
		for(int i=1; i<ADC_BIT_RESOLUTION;i++){
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	8a 30       	cpi	r24, 0x0A	; 10
 4c6:	91 05       	cpc	r25, r1
 4c8:	d4 f3       	brlt	.-12     	; 0x4be <ADC_init+0x22>
			result *= 2;
			
		}
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 0a 05 	call	0xa14	; 0xa14 <__floatunsisf>
 4d2:	9b 01       	movw	r18, r22
 4d4:	ac 01       	movw	r20, r24
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	80 ea       	ldi	r24, 0xA0	; 160
 4dc:	90 e4       	ldi	r25, 0x40	; 64
 4de:	0e 94 98 04 	call	0x930	; 0x930 <__divsf3>
 4e2:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <Quantisation_step>
 4e6:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <Quantisation_step+0x1>
 4ea:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Quantisation_step+0x2>
 4ee:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <Quantisation_step+0x3>
#include "adc.h"

static double Quantisation_step;
u8_en_adcErrorsType ADC_init (st_adcConfigType* st_config)
{
	u8_en_adcErrorsType ret = ADC_E_OK;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
	if(st_config == NULL){
		ret = ADC_E_NOT_OK;
 4f6:	84 e0       	ldi	r24, 0x04	; 4
		Quantisation_step= ((double)ADC_EXTERNAL_VREF_VOLT)/(result);
		
	}
	return ret;
	
}
 4f8:	08 95       	ret

000004fa <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 4fa:	68 30       	cpi	r22, 0x08	; 8
 4fc:	a0 f5       	brcc	.+104    	; 0x566 <DIO_init+0x6c>
	{
		if (port == porta)
 4fe:	81 11       	cpse	r24, r1
 500:	0b c0       	rjmp	.+22     	; 0x518 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 502:	8a b3       	in	r24, 0x1a	; 26
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_init+0x12>
 508:	44 0f       	add	r20, r20
 50a:	55 1f       	adc	r21, r21
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_init+0xe>
 510:	48 2b       	or	r20, r24
 512:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	08 95       	ret
		}
		else if (port == portb)
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	59 f4       	brne	.+22     	; 0x532 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 51c:	87 b3       	in	r24, 0x17	; 23
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_init+0x2c>
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_init+0x28>
 52a:	48 2b       	or	r20, r24
 52c:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
		}
		else if (port == portc)
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	59 f4       	brne	.+22     	; 0x54c <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 536:	84 b3       	in	r24, 0x14	; 20
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_init+0x46>
 53c:	44 0f       	add	r20, r20
 53e:	55 1f       	adc	r21, r21
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_init+0x42>
 544:	48 2b       	or	r20, r24
 546:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret
		}
		else if (port == portd)
 54c:	83 30       	cpi	r24, 0x03	; 3
 54e:	69 f4       	brne	.+26     	; 0x56a <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 550:	81 b3       	in	r24, 0x11	; 17
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_init+0x60>
 556:	44 0f       	add	r20, r20
 558:	55 1f       	adc	r21, r21
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_init+0x5c>
 55e:	48 2b       	or	r20, r24
 560:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 56a:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 56c:	08 95       	ret

0000056e <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 56e:	68 30       	cpi	r22, 0x08	; 8
 570:	08 f0       	brcs	.+2      	; 0x574 <DIO_writePIN+0x6>
 572:	74 c0       	rjmp	.+232    	; 0x65c <DIO_writePIN+0xee>
	{
		if (port == porta)
 574:	81 11       	cpse	r24, r1
 576:	1b c0       	rjmp	.+54     	; 0x5ae <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 578:	41 30       	cpi	r20, 0x01	; 1
 57a:	61 f4       	brne	.+24     	; 0x594 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 57c:	2b b3       	in	r18, 0x1b	; 27
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_writePIN+0x1a>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_writePIN+0x16>
 58c:	82 2b       	or	r24, r18
 58e:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 594:	2b b3       	in	r18, 0x1b	; 27
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_writePIN+0x32>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_writePIN+0x2e>
 5a4:	80 95       	com	r24
 5a6:	82 23       	and	r24, r18
 5a8:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	08 95       	ret
		}
		else if (port == portb)
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	d9 f4       	brne	.+54     	; 0x5e8 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 5b2:	41 30       	cpi	r20, 0x01	; 1
 5b4:	61 f4       	brne	.+24     	; 0x5ce <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 5b6:	28 b3       	in	r18, 0x18	; 24
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_writePIN+0x54>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_writePIN+0x50>
 5c6:	82 2b       	or	r24, r18
 5c8:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 5ce:	28 b3       	in	r18, 0x18	; 24
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_writePIN+0x6c>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_writePIN+0x68>
 5de:	80 95       	com	r24
 5e0:	82 23       	and	r24, r18
 5e2:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	08 95       	ret
		}
		else if (port == portc)
 5e8:	82 30       	cpi	r24, 0x02	; 2
 5ea:	d9 f4       	brne	.+54     	; 0x622 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 5ec:	41 30       	cpi	r20, 0x01	; 1
 5ee:	61 f4       	brne	.+24     	; 0x608 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 5f0:	25 b3       	in	r18, 0x15	; 21
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_writePIN+0x8e>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	6a 95       	dec	r22
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_writePIN+0x8a>
 600:	82 2b       	or	r24, r18
 602:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 608:	25 b3       	in	r18, 0x15	; 21
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_writePIN+0xa6>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_writePIN+0xa2>
 618:	80 95       	com	r24
 61a:	82 23       	and	r24, r18
 61c:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	08 95       	ret
		}
		else if (port == portd)
 622:	83 30       	cpi	r24, 0x03	; 3
 624:	e9 f4       	brne	.+58     	; 0x660 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 626:	41 30       	cpi	r20, 0x01	; 1
 628:	61 f4       	brne	.+24     	; 0x642 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 62a:	22 b3       	in	r18, 0x12	; 18
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_writePIN+0xc8>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	6a 95       	dec	r22
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_writePIN+0xc4>
 63a:	82 2b       	or	r24, r18
 63c:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 642:	22 b3       	in	r18, 0x12	; 18
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_writePIN+0xe0>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_writePIN+0xdc>
 652:	80 95       	com	r24
 654:	82 23       	and	r24, r18
 656:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 660:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 662:	08 95       	ret

00000664 <__vector_11>:
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
 686:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <sg_Timer0_callBackPtr>
 68a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <sg_Timer0_callBackPtr+0x1>
 68e:	89 2b       	or	r24, r25
 690:	41 f0       	breq	.+16     	; 0x6a2 <__vector_11+0x3e>
 692:	88 b7       	in	r24, 0x38	; 56
 694:	8e 7f       	andi	r24, 0xFE	; 254
 696:	88 bf       	out	0x38, r24	; 56
 698:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <sg_Timer0_callBackPtr>
 69c:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <sg_Timer0_callBackPtr+0x1>
 6a0:	09 95       	icall
 6a2:	ff 91       	pop	r31
 6a4:	ef 91       	pop	r30
 6a6:	bf 91       	pop	r27
 6a8:	af 91       	pop	r26
 6aa:	9f 91       	pop	r25
 6ac:	8f 91       	pop	r24
 6ae:	7f 91       	pop	r23
 6b0:	6f 91       	pop	r22
 6b2:	5f 91       	pop	r21
 6b4:	4f 91       	pop	r20
 6b6:	3f 91       	pop	r19
 6b8:	2f 91       	pop	r18
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	0f 90       	pop	r0
 6c0:	1f 90       	pop	r1
 6c2:	18 95       	reti

000006c4 <__vector_9>:
 6c4:	1f 92       	push	r1
 6c6:	0f 92       	push	r0
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	0f 92       	push	r0
 6cc:	11 24       	eor	r1, r1
 6ce:	2f 93       	push	r18
 6d0:	3f 93       	push	r19
 6d2:	4f 93       	push	r20
 6d4:	5f 93       	push	r21
 6d6:	6f 93       	push	r22
 6d8:	7f 93       	push	r23
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
 6e2:	ef 93       	push	r30
 6e4:	ff 93       	push	r31
 6e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sg_Timer1_callBackPtr>
 6ea:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <sg_Timer1_callBackPtr+0x1>
 6ee:	89 2b       	or	r24, r25
 6f0:	41 f0       	breq	.+16     	; 0x702 <__vector_9+0x3e>
 6f2:	88 b7       	in	r24, 0x38	; 56
 6f4:	8b 7f       	andi	r24, 0xFB	; 251
 6f6:	88 bf       	out	0x38, r24	; 56
 6f8:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sg_Timer1_callBackPtr>
 6fc:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sg_Timer1_callBackPtr+0x1>
 700:	09 95       	icall
 702:	ff 91       	pop	r31
 704:	ef 91       	pop	r30
 706:	bf 91       	pop	r27
 708:	af 91       	pop	r26
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	7f 91       	pop	r23
 710:	6f 91       	pop	r22
 712:	5f 91       	pop	r21
 714:	4f 91       	pop	r20
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <__vector_5>:
 724:	1f 92       	push	r1
 726:	0f 92       	push	r0
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	0f 92       	push	r0
 72c:	11 24       	eor	r1, r1
 72e:	2f 93       	push	r18
 730:	3f 93       	push	r19
 732:	4f 93       	push	r20
 734:	5f 93       	push	r21
 736:	6f 93       	push	r22
 738:	7f 93       	push	r23
 73a:	8f 93       	push	r24
 73c:	9f 93       	push	r25
 73e:	af 93       	push	r26
 740:	bf 93       	push	r27
 742:	ef 93       	push	r30
 744:	ff 93       	push	r31
 746:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sg_Timer2_callBackPtr>
 74a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sg_Timer2_callBackPtr+0x1>
 74e:	89 2b       	or	r24, r25
 750:	41 f0       	breq	.+16     	; 0x762 <__vector_5+0x3e>
 752:	88 b7       	in	r24, 0x38	; 56
 754:	8f 7b       	andi	r24, 0xBF	; 191
 756:	88 bf       	out	0x38, r24	; 56
 758:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <sg_Timer2_callBackPtr>
 75c:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <sg_Timer2_callBackPtr+0x1>
 760:	09 95       	icall
 762:	ff 91       	pop	r31
 764:	ef 91       	pop	r30
 766:	bf 91       	pop	r27
 768:	af 91       	pop	r26
 76a:	9f 91       	pop	r25
 76c:	8f 91       	pop	r24
 76e:	7f 91       	pop	r23
 770:	6f 91       	pop	r22
 772:	5f 91       	pop	r21
 774:	4f 91       	pop	r20
 776:	3f 91       	pop	r19
 778:	2f 91       	pop	r18
 77a:	0f 90       	pop	r0
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <TIMER_init>:
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	09 f4       	brne	.+2      	; 0x78a <TIMER_init+0x6>
 788:	7b c0       	rjmp	.+246    	; 0x880 <__stack+0x21>
 78a:	fc 01       	movw	r30, r24
 78c:	20 81       	ld	r18, Z
 78e:	23 30       	cpi	r18, 0x03	; 3
 790:	08 f0       	brcs	.+2      	; 0x794 <TIMER_init+0x10>
 792:	78 c0       	rjmp	.+240    	; 0x884 <__stack+0x25>
 794:	31 81       	ldd	r19, Z+1	; 0x01
 796:	3a 30       	cpi	r19, 0x0A	; 10
 798:	08 f0       	brcs	.+2      	; 0x79c <TIMER_init+0x18>
 79a:	76 c0       	rjmp	.+236    	; 0x888 <__stack+0x29>
 79c:	21 30       	cpi	r18, 0x01	; 1
 79e:	11 f1       	breq	.+68     	; 0x7e4 <TIMER_init+0x60>
 7a0:	20 f0       	brcs	.+8      	; 0x7aa <TIMER_init+0x26>
 7a2:	22 30       	cpi	r18, 0x02	; 2
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <TIMER_init+0x24>
 7a6:	4f c0       	rjmp	.+158    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7a8:	71 c0       	rjmp	.+226    	; 0x88c <__stack+0x2d>
 7aa:	12 be       	out	0x32, r1	; 50
 7ac:	13 be       	out	0x33, r1	; 51
 7ae:	1c be       	out	0x3c, r1	; 60
 7b0:	fc 01       	movw	r30, r24
 7b2:	22 81       	ldd	r18, Z+2	; 0x02
 7b4:	22 bf       	out	0x32, r18	; 50
 7b6:	23 b7       	in	r18, 0x33	; 51
 7b8:	20 68       	ori	r18, 0x80	; 128
 7ba:	23 bf       	out	0x33, r18	; 51
 7bc:	23 b7       	in	r18, 0x33	; 51
 7be:	2f 7b       	andi	r18, 0xBF	; 191
 7c0:	23 bf       	out	0x33, r18	; 51
 7c2:	23 b7       	in	r18, 0x33	; 51
 7c4:	27 7f       	andi	r18, 0xF7	; 247
 7c6:	23 bf       	out	0x33, r18	; 51
 7c8:	23 b7       	in	r18, 0x33	; 51
 7ca:	2f 7e       	andi	r18, 0xEF	; 239
 7cc:	23 bf       	out	0x33, r18	; 51
 7ce:	23 b7       	in	r18, 0x33	; 51
 7d0:	2f 7d       	andi	r18, 0xDF	; 223
 7d2:	23 bf       	out	0x33, r18	; 51
 7d4:	84 81       	ldd	r24, Z+4	; 0x04
 7d6:	81 11       	cpse	r24, r1
 7d8:	5b c0       	rjmp	.+182    	; 0x890 <__stack+0x31>
 7da:	89 b7       	in	r24, 0x39	; 57
 7dc:	81 60       	ori	r24, 0x01	; 1
 7de:	89 bf       	out	0x39, r24	; 57
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
 7e4:	1c bc       	out	0x2c, r1	; 44
 7e6:	1d bc       	out	0x2d, r1	; 45
 7e8:	1f bc       	out	0x2f, r1	; 47
 7ea:	1e bc       	out	0x2e, r1	; 46
 7ec:	1b bc       	out	0x2b, r1	; 43
 7ee:	1a bc       	out	0x2a, r1	; 42
 7f0:	fc 01       	movw	r30, r24
 7f2:	22 81       	ldd	r18, Z+2	; 0x02
 7f4:	33 81       	ldd	r19, Z+3	; 0x03
 7f6:	3d bd       	out	0x2d, r19	; 45
 7f8:	2c bd       	out	0x2c, r18	; 44
 7fa:	2f b5       	in	r18, 0x2f	; 47
 7fc:	28 60       	ori	r18, 0x08	; 8
 7fe:	2f bd       	out	0x2f, r18	; 47
 800:	2f b5       	in	r18, 0x2f	; 47
 802:	24 60       	ori	r18, 0x04	; 4
 804:	2f bd       	out	0x2f, r18	; 47
 806:	2f b5       	in	r18, 0x2f	; 47
 808:	2e 7f       	andi	r18, 0xFE	; 254
 80a:	2f bd       	out	0x2f, r18	; 47
 80c:	2f b5       	in	r18, 0x2f	; 47
 80e:	2d 7f       	andi	r18, 0xFD	; 253
 810:	2f bd       	out	0x2f, r18	; 47
 812:	2e b5       	in	r18, 0x2e	; 46
 814:	2f 7e       	andi	r18, 0xEF	; 239
 816:	2e bd       	out	0x2e, r18	; 46
 818:	2e b5       	in	r18, 0x2e	; 46
 81a:	27 7f       	andi	r18, 0xF7	; 247
 81c:	2e bd       	out	0x2e, r18	; 46
 81e:	2f b5       	in	r18, 0x2f	; 47
 820:	2f 7b       	andi	r18, 0xBF	; 191
 822:	2f bd       	out	0x2f, r18	; 47
 824:	2f b5       	in	r18, 0x2f	; 47
 826:	2f 77       	andi	r18, 0x7F	; 127
 828:	2f bd       	out	0x2f, r18	; 47
 82a:	2f b5       	in	r18, 0x2f	; 47
 82c:	2f 7e       	andi	r18, 0xEF	; 239
 82e:	2f bd       	out	0x2f, r18	; 47
 830:	2f b5       	in	r18, 0x2f	; 47
 832:	2f 7d       	andi	r18, 0xDF	; 223
 834:	2f bd       	out	0x2f, r18	; 47
 836:	84 81       	ldd	r24, Z+4	; 0x04
 838:	81 11       	cpse	r24, r1
 83a:	2c c0       	rjmp	.+88     	; 0x894 <__stack+0x35>
 83c:	89 b7       	in	r24, 0x39	; 57
 83e:	84 60       	ori	r24, 0x04	; 4
 840:	89 bf       	out	0x39, r24	; 57
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	08 95       	ret
 846:	14 bc       	out	0x24, r1	; 36
 848:	15 bc       	out	0x25, r1	; 37
 84a:	13 bc       	out	0x23, r1	; 35
 84c:	fc 01       	movw	r30, r24
 84e:	22 81       	ldd	r18, Z+2	; 0x02
 850:	24 bd       	out	0x24, r18	; 36
 852:	25 b5       	in	r18, 0x25	; 37
 854:	20 68       	ori	r18, 0x80	; 128
 856:	25 bd       	out	0x25, r18	; 37
 858:	25 b5       	in	r18, 0x25	; 37
 85a:	2f 7b       	andi	r18, 0xBF	; 191
 85c:	25 bd       	out	0x25, r18	; 37
 85e:	25 b5       	in	r18, 0x25	; 37
 860:	27 7f       	andi	r18, 0xF7	; 247
 862:	25 bd       	out	0x25, r18	; 37
 864:	25 b5       	in	r18, 0x25	; 37
 866:	2f 7e       	andi	r18, 0xEF	; 239
 868:	25 bd       	out	0x25, r18	; 37
 86a:	25 b5       	in	r18, 0x25	; 37
 86c:	2f 7d       	andi	r18, 0xDF	; 223
 86e:	25 bd       	out	0x25, r18	; 37
 870:	84 81       	ldd	r24, Z+4	; 0x04
 872:	81 11       	cpse	r24, r1
 874:	11 c0       	rjmp	.+34     	; 0x898 <__stack+0x39>
 876:	89 b7       	in	r24, 0x39	; 57
 878:	80 64       	ori	r24, 0x40	; 64
 87a:	89 bf       	out	0x39, r24	; 57
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	08 95       	ret
 880:	83 e0       	ldi	r24, 0x03	; 3
 882:	08 95       	ret
 884:	83 e0       	ldi	r24, 0x03	; 3
 886:	08 95       	ret
 888:	83 e0       	ldi	r24, 0x03	; 3
 88a:	08 95       	ret
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	08 95       	ret
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	08 95       	ret
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	08 95       	ret
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	08 95       	ret

0000089c <TIMER_reset>:
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
 89c:	00 97       	sbiw	r24, 0x00	; 0
 89e:	f1 f0       	breq	.+60     	; 0x8dc <TIMER_reset+0x40>
 8a0:	fc 01       	movw	r30, r24
 8a2:	20 81       	ld	r18, Z
 8a4:	23 30       	cpi	r18, 0x03	; 3
 8a6:	e0 f4       	brcc	.+56     	; 0x8e0 <TIMER_reset+0x44>
 8a8:	31 81       	ldd	r19, Z+1	; 0x01
 8aa:	3a 30       	cpi	r19, 0x0A	; 10
 8ac:	d8 f4       	brcc	.+54     	; 0x8e4 <TIMER_reset+0x48>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
 8ae:	21 30       	cpi	r18, 0x01	; 1
 8b0:	49 f0       	breq	.+18     	; 0x8c4 <TIMER_reset+0x28>
 8b2:	18 f0       	brcs	.+6      	; 0x8ba <TIMER_reset+0x1e>
 8b4:	22 30       	cpi	r18, 0x02	; 2
 8b6:	69 f0       	breq	.+26     	; 0x8d2 <TIMER_reset+0x36>
 8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <TIMER_reset+0x4c>
		{
			case TIMER_0:
				/*Configure initial value in TCNT0 for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
 8ba:	fc 01       	movw	r30, r24
 8bc:	82 81       	ldd	r24, Z+2	; 0x02
 8be:	82 bf       	out	0x32, r24	; 50
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 8c0:	80 e0       	ldi	r24, 0x00	; 0
		{
			case TIMER_0:
				/*Configure initial value in TCNT0 for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
				
				break;
 8c2:	08 95       	ret
				
			case TIMER_1:
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
 8c4:	fc 01       	movw	r30, r24
 8c6:	82 81       	ldd	r24, Z+2	; 0x02
 8c8:	93 81       	ldd	r25, Z+3	; 0x03
 8ca:	9d bd       	out	0x2d, r25	; 45
 8cc:	8c bd       	out	0x2c, r24	; 44
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 8ce:	80 e0       	ldi	r24, 0x00	; 0
				break;
				
			case TIMER_1:
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
				break;
 8d0:	08 95       	ret
				
			case TIMER_2:
				/*Configure initial value in TCNT for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
 8d2:	fc 01       	movw	r30, r24
 8d4:	82 81       	ldd	r24, Z+2	; 0x02
 8d6:	84 bd       	out	0x24, r24	; 36
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 8d8:	80 e0       	ldi	r24, 0x00	; 0
				break;
				
			case TIMER_2:
				/*Configure initial value in TCNT for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
				break;
 8da:	08 95       	ret
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	08 95       	ret
 8e0:	83 e0       	ldi	r24, 0x03	; 3
 8e2:	08 95       	ret
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	08 95       	ret
				/*Configure initial value in TCNT for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
 8e8:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
 8ea:	08 95       	ret

000008ec <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
 8ec:	00 97       	sbiw	r24, 0x00	; 0
 8ee:	d1 f0       	breq	.+52     	; 0x924 <TIMER_setCallBack+0x38>
 8f0:	63 30       	cpi	r22, 0x03	; 3
 8f2:	d0 f4       	brcc	.+52     	; 0x928 <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
 8f4:	61 30       	cpi	r22, 0x01	; 1
 8f6:	51 f0       	breq	.+20     	; 0x90c <TIMER_setCallBack+0x20>
 8f8:	18 f0       	brcs	.+6      	; 0x900 <TIMER_setCallBack+0x14>
 8fa:	62 30       	cpi	r22, 0x02	; 2
 8fc:	69 f0       	breq	.+26     	; 0x918 <TIMER_setCallBack+0x2c>
 8fe:	16 c0       	rjmp	.+44     	; 0x92c <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
 900:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <sg_Timer0_callBackPtr+0x1>
 904:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 908:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
 90a:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
 90c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <sg_Timer1_callBackPtr+0x1>
 910:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 914:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
 916:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
 918:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <sg_Timer2_callBackPtr+0x1>
 91c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
 920:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
 922:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
 924:	83 e0       	ldi	r24, 0x03	; 3
 926:	08 95       	ret
 928:	83 e0       	ldi	r24, 0x03	; 3
 92a:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
 92c:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
 92e:	08 95       	ret

00000930 <__divsf3>:
 930:	0e 94 ac 04 	call	0x958	; 0x958 <__divsf3x>
 934:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_round>
 938:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_pscB>
 93c:	58 f0       	brcs	.+22     	; 0x954 <__divsf3+0x24>
 93e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_pscA>
 942:	40 f0       	brcs	.+16     	; 0x954 <__divsf3+0x24>
 944:	29 f4       	brne	.+10     	; 0x950 <__divsf3+0x20>
 946:	5f 3f       	cpi	r21, 0xFF	; 255
 948:	29 f0       	breq	.+10     	; 0x954 <__divsf3+0x24>
 94a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_inf>
 94e:	51 11       	cpse	r21, r1
 950:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_szero>
 954:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_nan>

00000958 <__divsf3x>:
 958:	0e 94 6f 05 	call	0xade	; 0xade <__fp_split3>
 95c:	68 f3       	brcs	.-38     	; 0x938 <__divsf3+0x8>

0000095e <__divsf3_pse>:
 95e:	99 23       	and	r25, r25
 960:	b1 f3       	breq	.-20     	; 0x94e <__divsf3+0x1e>
 962:	55 23       	and	r21, r21
 964:	91 f3       	breq	.-28     	; 0x94a <__divsf3+0x1a>
 966:	95 1b       	sub	r25, r21
 968:	55 0b       	sbc	r21, r21
 96a:	bb 27       	eor	r27, r27
 96c:	aa 27       	eor	r26, r26
 96e:	62 17       	cp	r22, r18
 970:	73 07       	cpc	r23, r19
 972:	84 07       	cpc	r24, r20
 974:	38 f0       	brcs	.+14     	; 0x984 <__divsf3_pse+0x26>
 976:	9f 5f       	subi	r25, 0xFF	; 255
 978:	5f 4f       	sbci	r21, 0xFF	; 255
 97a:	22 0f       	add	r18, r18
 97c:	33 1f       	adc	r19, r19
 97e:	44 1f       	adc	r20, r20
 980:	aa 1f       	adc	r26, r26
 982:	a9 f3       	breq	.-22     	; 0x96e <__divsf3_pse+0x10>
 984:	35 d0       	rcall	.+106    	; 0x9f0 <__divsf3_pse+0x92>
 986:	0e 2e       	mov	r0, r30
 988:	3a f0       	brmi	.+14     	; 0x998 <__divsf3_pse+0x3a>
 98a:	e0 e8       	ldi	r30, 0x80	; 128
 98c:	32 d0       	rcall	.+100    	; 0x9f2 <__divsf3_pse+0x94>
 98e:	91 50       	subi	r25, 0x01	; 1
 990:	50 40       	sbci	r21, 0x00	; 0
 992:	e6 95       	lsr	r30
 994:	00 1c       	adc	r0, r0
 996:	ca f7       	brpl	.-14     	; 0x98a <__divsf3_pse+0x2c>
 998:	2b d0       	rcall	.+86     	; 0x9f0 <__divsf3_pse+0x92>
 99a:	fe 2f       	mov	r31, r30
 99c:	29 d0       	rcall	.+82     	; 0x9f0 <__divsf3_pse+0x92>
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	bb 1f       	adc	r27, r27
 9a6:	26 17       	cp	r18, r22
 9a8:	37 07       	cpc	r19, r23
 9aa:	48 07       	cpc	r20, r24
 9ac:	ab 07       	cpc	r26, r27
 9ae:	b0 e8       	ldi	r27, 0x80	; 128
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <__divsf3_pse+0x56>
 9b2:	bb 0b       	sbc	r27, r27
 9b4:	80 2d       	mov	r24, r0
 9b6:	bf 01       	movw	r22, r30
 9b8:	ff 27       	eor	r31, r31
 9ba:	93 58       	subi	r25, 0x83	; 131
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	3a f0       	brmi	.+14     	; 0x9ce <__divsf3_pse+0x70>
 9c0:	9e 3f       	cpi	r25, 0xFE	; 254
 9c2:	51 05       	cpc	r21, r1
 9c4:	78 f0       	brcs	.+30     	; 0x9e4 <__divsf3_pse+0x86>
 9c6:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_inf>
 9ca:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_szero>
 9ce:	5f 3f       	cpi	r21, 0xFF	; 255
 9d0:	e4 f3       	brlt	.-8      	; 0x9ca <__divsf3_pse+0x6c>
 9d2:	98 3e       	cpi	r25, 0xE8	; 232
 9d4:	d4 f3       	brlt	.-12     	; 0x9ca <__divsf3_pse+0x6c>
 9d6:	86 95       	lsr	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	b7 95       	ror	r27
 9de:	f7 95       	ror	r31
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__divsf3_pse+0x78>
 9e4:	88 0f       	add	r24, r24
 9e6:	91 1d       	adc	r25, r1
 9e8:	96 95       	lsr	r25
 9ea:	87 95       	ror	r24
 9ec:	97 f9       	bld	r25, 7
 9ee:	08 95       	ret
 9f0:	e1 e0       	ldi	r30, 0x01	; 1
 9f2:	66 0f       	add	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	bb 1f       	adc	r27, r27
 9fa:	62 17       	cp	r22, r18
 9fc:	73 07       	cpc	r23, r19
 9fe:	84 07       	cpc	r24, r20
 a00:	ba 07       	cpc	r27, r26
 a02:	20 f0       	brcs	.+8      	; 0xa0c <__divsf3_pse+0xae>
 a04:	62 1b       	sub	r22, r18
 a06:	73 0b       	sbc	r23, r19
 a08:	84 0b       	sbc	r24, r20
 a0a:	ba 0b       	sbc	r27, r26
 a0c:	ee 1f       	adc	r30, r30
 a0e:	88 f7       	brcc	.-30     	; 0x9f2 <__divsf3_pse+0x94>
 a10:	e0 95       	com	r30
 a12:	08 95       	ret

00000a14 <__floatunsisf>:
 a14:	e8 94       	clt
 a16:	09 c0       	rjmp	.+18     	; 0xa2a <__floatsisf+0x12>

00000a18 <__floatsisf>:
 a18:	97 fb       	bst	r25, 7
 a1a:	3e f4       	brtc	.+14     	; 0xa2a <__floatsisf+0x12>
 a1c:	90 95       	com	r25
 a1e:	80 95       	com	r24
 a20:	70 95       	com	r23
 a22:	61 95       	neg	r22
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	99 23       	and	r25, r25
 a2c:	a9 f0       	breq	.+42     	; 0xa58 <__floatsisf+0x40>
 a2e:	f9 2f       	mov	r31, r25
 a30:	96 e9       	ldi	r25, 0x96	; 150
 a32:	bb 27       	eor	r27, r27
 a34:	93 95       	inc	r25
 a36:	f6 95       	lsr	r31
 a38:	87 95       	ror	r24
 a3a:	77 95       	ror	r23
 a3c:	67 95       	ror	r22
 a3e:	b7 95       	ror	r27
 a40:	f1 11       	cpse	r31, r1
 a42:	f8 cf       	rjmp	.-16     	; 0xa34 <__floatsisf+0x1c>
 a44:	fa f4       	brpl	.+62     	; 0xa84 <__floatsisf+0x6c>
 a46:	bb 0f       	add	r27, r27
 a48:	11 f4       	brne	.+4      	; 0xa4e <__floatsisf+0x36>
 a4a:	60 ff       	sbrs	r22, 0
 a4c:	1b c0       	rjmp	.+54     	; 0xa84 <__floatsisf+0x6c>
 a4e:	6f 5f       	subi	r22, 0xFF	; 255
 a50:	7f 4f       	sbci	r23, 0xFF	; 255
 a52:	8f 4f       	sbci	r24, 0xFF	; 255
 a54:	9f 4f       	sbci	r25, 0xFF	; 255
 a56:	16 c0       	rjmp	.+44     	; 0xa84 <__floatsisf+0x6c>
 a58:	88 23       	and	r24, r24
 a5a:	11 f0       	breq	.+4      	; 0xa60 <__floatsisf+0x48>
 a5c:	96 e9       	ldi	r25, 0x96	; 150
 a5e:	11 c0       	rjmp	.+34     	; 0xa82 <__floatsisf+0x6a>
 a60:	77 23       	and	r23, r23
 a62:	21 f0       	breq	.+8      	; 0xa6c <__floatsisf+0x54>
 a64:	9e e8       	ldi	r25, 0x8E	; 142
 a66:	87 2f       	mov	r24, r23
 a68:	76 2f       	mov	r23, r22
 a6a:	05 c0       	rjmp	.+10     	; 0xa76 <__floatsisf+0x5e>
 a6c:	66 23       	and	r22, r22
 a6e:	71 f0       	breq	.+28     	; 0xa8c <__floatsisf+0x74>
 a70:	96 e8       	ldi	r25, 0x86	; 134
 a72:	86 2f       	mov	r24, r22
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	60 e0       	ldi	r22, 0x00	; 0
 a78:	2a f0       	brmi	.+10     	; 0xa84 <__floatsisf+0x6c>
 a7a:	9a 95       	dec	r25
 a7c:	66 0f       	add	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	da f7       	brpl	.-10     	; 0xa7a <__floatsisf+0x62>
 a84:	88 0f       	add	r24, r24
 a86:	96 95       	lsr	r25
 a88:	87 95       	ror	r24
 a8a:	97 f9       	bld	r25, 7
 a8c:	08 95       	ret

00000a8e <__fp_inf>:
 a8e:	97 f9       	bld	r25, 7
 a90:	9f 67       	ori	r25, 0x7F	; 127
 a92:	80 e8       	ldi	r24, 0x80	; 128
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	08 95       	ret

00000a9a <__fp_nan>:
 a9a:	9f ef       	ldi	r25, 0xFF	; 255
 a9c:	80 ec       	ldi	r24, 0xC0	; 192
 a9e:	08 95       	ret

00000aa0 <__fp_pscA>:
 aa0:	00 24       	eor	r0, r0
 aa2:	0a 94       	dec	r0
 aa4:	16 16       	cp	r1, r22
 aa6:	17 06       	cpc	r1, r23
 aa8:	18 06       	cpc	r1, r24
 aaa:	09 06       	cpc	r0, r25
 aac:	08 95       	ret

00000aae <__fp_pscB>:
 aae:	00 24       	eor	r0, r0
 ab0:	0a 94       	dec	r0
 ab2:	12 16       	cp	r1, r18
 ab4:	13 06       	cpc	r1, r19
 ab6:	14 06       	cpc	r1, r20
 ab8:	05 06       	cpc	r0, r21
 aba:	08 95       	ret

00000abc <__fp_round>:
 abc:	09 2e       	mov	r0, r25
 abe:	03 94       	inc	r0
 ac0:	00 0c       	add	r0, r0
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__fp_round+0xc>
 ac4:	88 23       	and	r24, r24
 ac6:	52 f0       	brmi	.+20     	; 0xadc <__fp_round+0x20>
 ac8:	bb 0f       	add	r27, r27
 aca:	40 f4       	brcc	.+16     	; 0xadc <__fp_round+0x20>
 acc:	bf 2b       	or	r27, r31
 ace:	11 f4       	brne	.+4      	; 0xad4 <__fp_round+0x18>
 ad0:	60 ff       	sbrs	r22, 0
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <__fp_round+0x20>
 ad4:	6f 5f       	subi	r22, 0xFF	; 255
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	08 95       	ret

00000ade <__fp_split3>:
 ade:	57 fd       	sbrc	r21, 7
 ae0:	90 58       	subi	r25, 0x80	; 128
 ae2:	44 0f       	add	r20, r20
 ae4:	55 1f       	adc	r21, r21
 ae6:	59 f0       	breq	.+22     	; 0xafe <__fp_splitA+0x10>
 ae8:	5f 3f       	cpi	r21, 0xFF	; 255
 aea:	71 f0       	breq	.+28     	; 0xb08 <__fp_splitA+0x1a>
 aec:	47 95       	ror	r20

00000aee <__fp_splitA>:
 aee:	88 0f       	add	r24, r24
 af0:	97 fb       	bst	r25, 7
 af2:	99 1f       	adc	r25, r25
 af4:	61 f0       	breq	.+24     	; 0xb0e <__fp_splitA+0x20>
 af6:	9f 3f       	cpi	r25, 0xFF	; 255
 af8:	79 f0       	breq	.+30     	; 0xb18 <__fp_splitA+0x2a>
 afa:	87 95       	ror	r24
 afc:	08 95       	ret
 afe:	12 16       	cp	r1, r18
 b00:	13 06       	cpc	r1, r19
 b02:	14 06       	cpc	r1, r20
 b04:	55 1f       	adc	r21, r21
 b06:	f2 cf       	rjmp	.-28     	; 0xaec <__fp_split3+0xe>
 b08:	46 95       	lsr	r20
 b0a:	f1 df       	rcall	.-30     	; 0xaee <__fp_splitA>
 b0c:	08 c0       	rjmp	.+16     	; 0xb1e <__fp_splitA+0x30>
 b0e:	16 16       	cp	r1, r22
 b10:	17 06       	cpc	r1, r23
 b12:	18 06       	cpc	r1, r24
 b14:	99 1f       	adc	r25, r25
 b16:	f1 cf       	rjmp	.-30     	; 0xafa <__fp_splitA+0xc>
 b18:	86 95       	lsr	r24
 b1a:	71 05       	cpc	r23, r1
 b1c:	61 05       	cpc	r22, r1
 b1e:	08 94       	sec
 b20:	08 95       	ret

00000b22 <__fp_zero>:
 b22:	e8 94       	clt

00000b24 <__fp_szero>:
 b24:	bb 27       	eor	r27, r27
 b26:	66 27       	eor	r22, r22
 b28:	77 27       	eor	r23, r23
 b2a:	cb 01       	movw	r24, r22
 b2c:	97 f9       	bld	r25, 7
 b2e:	08 95       	ret

00000b30 <_exit>:
 b30:	f8 94       	cli

00000b32 <__stop_program>:
 b32:	ff cf       	rjmp	.-2      	; 0xb32 <__stop_program>
