
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00000ca2  00000d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008000f8  008000f8  00000dce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002638  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d63  00000000  00000000  0000361c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000135b  00000000  00000000  0000437f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000056dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7c  00000000  00000000  00005a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec0  00000000  00000000  000064b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00007370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3f       	cpi	r26, 0xF8	; 248
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 ef       	ldi	r26, 0xF8	; 248
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 33       	cpi	r26, 0x30	; 48
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f5 04 	call	0x9ea	; 0x9ea <main>
  8a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_timer0OvfHandeler>:
}


void APP_timer0OvfHandeler(void)
{
	u8_delay++;
  92:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <u8_delay>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <u8_delay>
	TIMER_Manager_reset(&st_gs_timer_0_config);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <TIMER_Manager_reset>
  a4:	08 95       	ret

000000a6 <APP_init>:
	}
}


void APP_init(void)
{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	// Initialize timer 0 in Normal mode with OVF interrupt enabled and interrupt period every 0.5 ms
	st_gs_timer_0_config.u8_timerNum = TIMER_0;
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	10 82       	st	Z, r1
	st_gs_timer_0_config.u8_timer_ovf_int_enable = 1;
  b8:	d1 e0       	ldi	r29, 0x01	; 1
  ba:	d4 83       	std	Z+4, r29	; 0x04
	st_gs_timer_0_config.u16_timer_InitialValue = APP_TIMER_0_INIT_VALUE;
  bc:	80 ef       	ldi	r24, 0xF0	; 240
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	93 83       	std	Z+3, r25	; 0x03
  c2:	82 83       	std	Z+2, r24	; 0x02
	st_gs_timer_0_config.callBackFunction =  APP_timer0OvfHandeler;
  c4:	89 e4       	ldi	r24, 0x49	; 73
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	96 83       	std	Z+6, r25	; 0x06
  ca:	85 83       	std	Z+5, r24	; 0x05
	TIMER_Manager_init(&st_gs_timer_0_config);
  cc:	cf 01       	movw	r24, r30
  ce:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <TIMER_Manager_init>
	
	// Initialize The Temp. sensor 
	st_gs_tempSensorConfig.u8_channel = ADC_CHANNEL_7;
  d2:	ed ef       	ldi	r30, 0xFD	; 253
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	82 83       	std	Z+2, r24	; 0x02
	st_gs_tempSensorConfig.u8_ref_selection = ADC_AVCC;
  da:	d0 83       	st	Z, r29
	st_gs_tempSensorConfig.u8_prescaler_selection = ADC_PRESCALER_2;
  dc:	d1 83       	std	Z+1, r29	; 0x01
	TEMP_SENSOR_init(&st_gs_tempSensorConfig);
  de:	cf 01       	movw	r24, r30
  e0:	0e 94 ed 04 	call	0x9da	; 0x9da <TEMP_SENSOR_init>
	
	// Initialize the LCD
	st_gs_lcdConfig.u8_mode = LCD_4_BIT_MODE;
  e4:	eb e0       	ldi	r30, 0x0B	; 11
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	10 82       	st	Z, r1
	st_gs_lcdConfig.u8_d4Pin[0] = porta;
  ea:	11 86       	std	Z+9, r1	; 0x09
	st_gs_lcdConfig.u8_d4Pin[1] = pin0;
  ec:	12 86       	std	Z+10, r1	; 0x0a
	st_gs_lcdConfig.u8_d5Pin[0] = porta;
  ee:	13 86       	std	Z+11, r1	; 0x0b
	st_gs_lcdConfig.u8_d5Pin[1] = pin1;
  f0:	d4 87       	std	Z+12, r29	; 0x0c
	st_gs_lcdConfig.u8_d6Pin[0] = porta;
  f2:	15 86       	std	Z+13, r1	; 0x0d
	st_gs_lcdConfig.u8_d6Pin[1] = pin2;
  f4:	c2 e0       	ldi	r28, 0x02	; 2
  f6:	c6 87       	std	Z+14, r28	; 0x0e
	st_gs_lcdConfig.u8_d7Pin[0] = porta;
  f8:	17 86       	std	Z+15, r1	; 0x0f
	st_gs_lcdConfig.u8_d7Pin[1] = pin3;
  fa:	0f 2e       	mov	r0, r31
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	ef 2e       	mov	r14, r31
 100:	f0 2d       	mov	r31, r0
 102:	e0 8a       	std	Z+16, r14	; 0x10
	st_gs_lcdConfig.u8_RSpin[0] = porta;
 104:	11 8a       	std	Z+17, r1	; 0x11
	st_gs_lcdConfig.u8_RSpin[1] = pin4;
 106:	68 94       	set
 108:	ff 24       	eor	r15, r15
 10a:	f2 f8       	bld	r15, 2
 10c:	f2 8a       	std	Z+18, r15	; 0x12
	st_gs_lcdConfig.u8_RWpin[0] = porta;
 10e:	13 8a       	std	Z+19, r1	; 0x13
	st_gs_lcdConfig.u8_RWpin[1] = pin5;
 110:	05 e0       	ldi	r16, 0x05	; 5
 112:	04 8b       	std	Z+20, r16	; 0x14
	st_gs_lcdConfig.u8_Epin[0] = porta;
 114:	15 8a       	std	Z+21, r1	; 0x15
	st_gs_lcdConfig.u8_Epin[1] = pin6;
 116:	16 e0       	ldi	r17, 0x06	; 6
 118:	16 8b       	std	Z+22, r17	; 0x16
	LCD_init(&st_gs_lcdConfig);
 11a:	cf 01       	movw	r24, r30
 11c:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_init>
	
	// Initialize the keypad
	st_gs_keypadConfig.u8_col1Pin[0] = portc;
 120:	e2 e2       	ldi	r30, 0x22	; 34
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	c6 83       	std	Z+6, r28	; 0x06
	st_gs_keypadConfig.u8_col1Pin[1] = pin3;
 126:	e7 82       	std	Z+7, r14	; 0x07
	st_gs_keypadConfig.u8_col2Pin[0] = portc;
 128:	c0 87       	std	Z+8, r28	; 0x08
	st_gs_keypadConfig.u8_col2Pin[1] = pin4;
 12a:	f1 86       	std	Z+9, r15	; 0x09
	st_gs_keypadConfig.u8_col3Pin[0] = portc;
 12c:	c2 87       	std	Z+10, r28	; 0x0a
	st_gs_keypadConfig.u8_col3Pin[1] = pin5;
 12e:	03 87       	std	Z+11, r16	; 0x0b
	st_gs_keypadConfig.u8_col4Pin[0] = portc;
 130:	c4 87       	std	Z+12, r28	; 0x0c
	st_gs_keypadConfig.u8_col4Pin[1] = pin6;
 132:	15 87       	std	Z+13, r17	; 0x0d
	st_gs_keypadConfig.u8_row1Pin[0] = portc;
 134:	c0 83       	st	Z, r28
	st_gs_keypadConfig.u8_row1Pin[1] = pin0 ;
 136:	11 82       	std	Z+1, r1	; 0x01
	st_gs_keypadConfig.u8_row2Pin[0] = portc;
 138:	c2 83       	std	Z+2, r28	; 0x02
	st_gs_keypadConfig.u8_row2Pin[1] = pin1 ;
 13a:	d3 83       	std	Z+3, r29	; 0x03
	st_gs_keypadConfig.u8_row3Pin[0] = portc;
 13c:	c4 83       	std	Z+4, r28	; 0x04
	st_gs_keypadConfig.u8_row3Pin[1] = pin2 ;
 13e:	c5 83       	std	Z+5, r28	; 0x05
	KEYPAD_init(&st_gs_keypadConfig);
 140:	cf 01       	movw	r24, r30
 142:	0e 94 3b 02 	call	0x476	; 0x476 <KEYPAD_init>
	
	
	// Initialize Buzzer
	st_gs_buzzerConfig.u8_port = portb;
 146:	eb ef       	ldi	r30, 0xFB	; 251
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	d1 83       	std	Z+1, r29	; 0x01
	st_gs_buzzerConfig.u8_pin = pin0;
 14c:	10 82       	st	Z, r1
	BUZZER_init(&st_gs_buzzerConfig);
 14e:	cf 01       	movw	r24, r30
 150:	0e 94 02 02 	call	0x404	; 0x404 <BUZZER_init>
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <APP_welcome>:


void APP_welcome(void)
{
	LCD_clear();
 162:	0e 94 10 04 	call	0x820	; 0x820 <LCD_clear>
	LCD_setCursor(1,1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Welcome");
 16e:	89 e6       	ldi	r24, 0x69	; 105
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
	u8_delay = 0 ;
 176:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	89 e6       	ldi	r24, 0x69	; 105
 17e:	98 e1       	ldi	r25, 0x18	; 24
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <APP_welcome+0x1e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <APP_welcome+0x28>
 18a:	00 00       	nop
	//while(u8_delay <= 2);
	_delay_ms(1000);
	LCD_clear();
 18c:	0e 94 10 04 	call	0x820	; 0x820 <LCD_clear>
	LCD_setCursor(1,1);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
	LCD_writeString((uint8_t*)"default Temp is");
 198:	81 e7       	ldi	r24, 0x71	; 113
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
	LCD_setCursor(2,1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
	LCD_writeString((uint8_t*)"20");
 1a8:	8b ec       	ldi	r24, 0xCB	; 203
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
	u8_delay = 0;
 1b0:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 e6       	ldi	r24, 0x69	; 105
 1b8:	98 e1       	ldi	r25, 0x18	; 24
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <APP_welcome+0x58>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <APP_welcome+0x62>
 1c4:	00 00       	nop
	//while(u8_delay <= 2);
	_delay_ms(1000);
	
	u8_gs_programTemp = u8_gc_defaultTemp;
 1c6:	84 e1       	ldi	r24, 0x14	; 20
 1c8:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
	u8_en_gs_programState = APP_SET_TEMP;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
 1d2:	08 95       	ret

000001d4 <APP_set>:




void APP_set(void)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	00 d0       	rcall	.+0      	; 0x1da <APP_set+0x6>
 1da:	1f 92       	push	r1
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
 1e0:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	LCD_clear();
 1e2:	0e 94 10 04 	call	0x820	; 0x820 <LCD_clear>
	LCD_setCursor(1,1);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Set Initial Temp");
 1ee:	81 e8       	ldi	r24, 0x81	; 129
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
	u8_delay = 0;
 1f6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	9c e0       	ldi	r25, 0x0C	; 12
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <APP_set+0x2c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <APP_set+0x36>
 20a:	00 00       	nop
	//while(u8_delay <= 1);
	_delay_ms(500);
	LCD_clear();
 20c:	0e 94 10 04 	call	0x820	; 0x820 <LCD_clear>
	LCD_setCursor(1,1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Min=18");
 218:	82 e9       	ldi	r24, 0x92	; 146
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
	//LCD_setCursor(1,8);
	//LCD_writeString((uint8_t*)ch_arrs_curTempToString);
	LCD_setCursor(1,11);
 220:	6b e0       	ldi	r22, 0x0B	; 11
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Max=35");
 228:	89 e9       	ldi	r24, 0x99	; 153
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
	
	while(1)
	{
		itoa(u8_gs_programTemp,ch_arrs_curTempToString,10);
 230:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 234:	4a e0       	ldi	r20, 0x0A	; 10
 236:	be 01       	movw	r22, r28
 238:	6e 5f       	subi	r22, 0xFE	; 254
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 1a 06 	call	0xc34	; 0xc34 <__itoa_ncheck>
		LCD_setCursor(1,8);
 242:	68 e0       	ldi	r22, 0x08	; 8
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
 24a:	ce 01       	movw	r24, r28
 24c:	02 96       	adiw	r24, 0x02	; 2
 24e:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
		KEYPAD_read(&u8_keypadData);
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 78 02 	call	0x4f0	; 0x4f0 <KEYPAD_read>
		
		if (u8_keypadData == '1')
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	81 33       	cpi	r24, 0x31	; 49
 25e:	41 f4       	brne	.+16     	; 0x270 <APP_set+0x9c>
		{
		
			// Increment
			if (u8_gs_programTemp < 35)
 260:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
 264:	83 32       	cpi	r24, 0x23	; 35
 266:	20 f7       	brcc	.-56     	; 0x230 <APP_set+0x5c>
			{
				u8_gs_programTemp++;
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
 26e:	e0 cf       	rjmp	.-64     	; 0x230 <APP_set+0x5c>
			}
		}
		else if (u8_keypadData == '2')
 270:	82 33       	cpi	r24, 0x32	; 50
 272:	41 f4       	brne	.+16     	; 0x284 <APP_set+0xb0>
		{
			// Decrement
			if (u8_gs_programTemp >18)
 274:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
 278:	83 31       	cpi	r24, 0x13	; 19
 27a:	d0 f2       	brcs	.-76     	; 0x230 <APP_set+0x5c>
			{
				u8_gs_programTemp--;
 27c:	81 50       	subi	r24, 0x01	; 1
 27e:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
 282:	d6 cf       	rjmp	.-84     	; 0x230 <APP_set+0x5c>
			}
		}
		else if (u8_keypadData == '3')
 284:	83 33       	cpi	r24, 0x33	; 51
 286:	a1 f6       	brne	.-88     	; 0x230 <APP_set+0x5c>
		{
			// Set
			u8_en_gs_programState = APP_WORKING;
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
		else{
			// do nothing
		}
	}
	
}
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <APP_working>:



void APP_working(void)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <APP_working+0x6>
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_keypadData = 0;
 2a6:	19 82       	std	Y+1, r1	; 0x01
	char ch_arrs_curTempToString[2];
	
	
	
	// print current temp
	LCD_clear();
 2a8:	0e 94 10 04 	call	0x820	; 0x820 <LCD_clear>
	LCD_setCursor(1,1);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
	LCD_writeString((uint8_t*)"Current Temp = ");
 2b4:	80 ea       	ldi	r24, 0xA0	; 160
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
	
	
	while(u8_en_gs_programState == APP_WORKING)
 2bc:	80 c0       	rjmp	.+256    	; 0x3be <APP_working+0x124>
	{
		// read the temp from the sensor
		TEMP_SENSOR_read(&st_gs_tempSensorConfig,&u8_gs_curTemp);
 2be:	60 e6       	ldi	r22, 0x60	; 96
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	8d ef       	ldi	r24, 0xFD	; 253
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 ef 04 	call	0x9de	; 0x9de <TEMP_SENSOR_read>
		
		// convert int to string
		itoa(u8_gs_curTemp,ch_arrs_curTempToString,10);
 2ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ce:	4a e0       	ldi	r20, 0x0A	; 10
 2d0:	be 01       	movw	r22, r28
 2d2:	6e 5f       	subi	r22, 0xFE	; 254
 2d4:	7f 4f       	sbci	r23, 0xFF	; 255
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 1a 06 	call	0xc34	; 0xc34 <__itoa_ncheck>
		
		
		LCD_setCursor(2,2);
 2dc:	62 e0       	ldi	r22, 0x02	; 2
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
		LCD_writeString((uint8_t*)ch_arrs_curTempToString);
 2e4:	ce 01       	movw	r24, r28
 2e6:	02 96       	adiw	r24, 0x02	; 2
 2e8:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
		if (u8_gs_curTemp > u8_gs_programTemp)
 2ec:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f0:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__data_end>
 2f4:	89 17       	cp	r24, r25
 2f6:	28 f4       	brcc	.+10     	; 0x302 <APP_working+0x68>
		{
			// print the bell shape 
			//LCD_setCursor(2,3);
			LCD_writeSpChar(LCD_BELL);
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_writeSpChar>
			
			
			// start the BUZZER
			BUZZER_start();
 2fe:	0e 94 1d 02 	call	0x43a	; 0x43a <BUZZER_start>
		}
		KEYPAD_read(&u8_keypadData);
 302:	ce 01       	movw	r24, r28
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	0e 94 78 02 	call	0x4f0	; 0x4f0 <KEYPAD_read>
		switch(u8_keypadData)
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	85 33       	cpi	r24, 0x35	; 53
 30e:	31 f0       	breq	.+12     	; 0x31c <APP_working+0x82>
 310:	8e 34       	cpi	r24, 0x4E	; 78
 312:	09 f4       	brne	.+2      	; 0x316 <APP_working+0x7c>
 314:	54 c0       	rjmp	.+168    	; 0x3be <APP_working+0x124>
 316:	84 33       	cpi	r24, 0x34	; 52
 318:	69 f5       	brne	.+90     	; 0x374 <APP_working+0xda>
 31a:	26 c0       	rjmp	.+76     	; 0x368 <APP_working+0xce>
			case  78 :
				break;
			case  APP_RESET_BTN :
				// reset
				// Stop the BUZZER
				BUZZER_stop();
 31c:	0e 94 2c 02 	call	0x458	; 0x458 <BUZZER_stop>
				
				// Set the program temp with the default temp
				u8_gs_programTemp = u8_gc_defaultTemp;
 320:	84 e1       	ldi	r24, 0x14	; 20
 322:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__data_end>
				
				// clear LCD and print Temp value is resettled to 20
				LCD_clear();
 326:	0e 94 10 04 	call	0x820	; 0x820 <LCD_clear>
				LCD_setCursor(1,1);
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
				LCD_writeString((uint8_t*)"Temp value is");
 332:	80 eb       	ldi	r24, 0xB0	; 176
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
				LCD_setCursor(2,1);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
				LCD_writeString((uint8_t*)"resettled to 20");
 342:	8e eb       	ldi	r24, 0xBE	; 190
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
				
				// 1s timeout
				u8_delay = 0;
 34a:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <u8_delay>
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	89 e6       	ldi	r24, 0x69	; 105
 352:	98 e1       	ldi	r25, 0x18	; 24
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <APP_working+0xba>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <APP_working+0xc4>
 35e:	00 00       	nop
				//while(u8_delay <= 2);
				_delay_ms(1000);
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
				break;
 366:	2b c0       	rjmp	.+86     	; 0x3be <APP_working+0x124>
			
			case APP_ADJUST_BTN : 
				// adjust
				
				// Stop the BUZZER
				BUZZER_stop();
 368:	0e 94 2c 02 	call	0x458	; 0x458 <BUZZER_stop>
				
				// change the program state
				u8_en_gs_programState = APP_SET_TEMP;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <u8_en_gs_programState>
				break;
 372:	25 c0       	rjmp	.+74     	; 0x3be <APP_working+0x124>
			default:
				
				//PORTD = u8_keypadData;
				// Invalid button
				LCD_clear();
 374:	0e 94 10 04 	call	0x820	; 0x820 <LCD_clear>
				LCD_setCursor(1,1);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
				LCD_writeString((uint8_t*)"the operation is");
 380:	8e ec       	ldi	r24, 0xCE	; 206
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
				LCD_setCursor(2,1);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
				LCD_writeString((uint8_t*)"not allowed");
 390:	8f ed       	ldi	r24, 0xDF	; 223
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	89 e6       	ldi	r24, 0x69	; 105
 39c:	98 e1       	ldi	r25, 0x18	; 24
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <APP_working+0x104>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <APP_working+0x10e>
 3a8:	00 00       	nop
				//u8_delay = 0;
				//while(u8_delay <= 2);
				_delay_ms(1000);
				
				// print current temp
				LCD_clear();
 3aa:	0e 94 10 04 	call	0x820	; 0x820 <LCD_clear>
				LCD_setCursor(1,1);
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 16 04 	call	0x82c	; 0x82c <LCD_setCursor>
				LCD_writeString((uint8_t*)"Current Temp = ");
 3b6:	80 ea       	ldi	r24, 0xA0	; 160
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_writeString>
	LCD_clear();
	LCD_setCursor(1,1);
	LCD_writeString((uint8_t*)"Current Temp = ");
	
	
	while(u8_en_gs_programState == APP_WORKING)
 3be:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <APP_working+0x12e>
 3c6:	7b cf       	rjmp	.-266    	; 0x2be <APP_working+0x24>
				LCD_writeString((uint8_t*)"Current Temp = ");
				break;
		}
	}
	
}
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <APP_start>:
void APP_timer0OvfHandeler(void);


void APP_start(void)
{
	APP_init();
 3d4:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_init>
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <APP_start+0xa>
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
 3da:	0e 94 b1 00 	call	0x162	; 0x162 <APP_welcome>
void APP_start(void)
{
	APP_init();
	while(1)
	{
		while(u8_en_gs_programState == APP_WELCOME)
 3de:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
 3e2:	81 11       	cpse	r24, r1
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <APP_start+0x18>
 3e6:	f9 cf       	rjmp	.-14     	; 0x3da <APP_start+0x6>
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
 3e8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <APP_set>
	{
		while(u8_en_gs_programState == APP_WELCOME)
		{
			APP_welcome();
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
 3ec:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	d1 f3       	breq	.-12     	; 0x3e8 <APP_start+0x14>
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <APP_start+0x26>
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
		{
			APP_working();
 3f6:	0e 94 4d 01 	call	0x29a	; 0x29a <APP_working>
		}
		while(u8_en_gs_programState == APP_SET_TEMP)
		{
			APP_set();
		}
		while(u8_en_gs_programState == APP_WORKING)
 3fa:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <u8_en_gs_programState>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	d1 f3       	breq	.-12     	; 0x3f6 <APP_start+0x22>
 402:	ed cf       	rjmp	.-38     	; 0x3de <APP_start+0xa>

00000404 <BUZZER_init>:
static uint8_t u8_gs_buzzerState = NOT_INIT;



u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	99 f0       	breq	.+38     	; 0x432 <BUZZER_init+0x2e>
 40c:	ec 01       	movw	r28, r24
		return BUZZER_E_NOT_OK;
	
	// Set Buzzer pin as output
	u8_en_dioErrors u8_dioRetVal = DIO_init(st_config->u8_port, st_config->u8_pin, STD_OUTPUT);
 40e:	68 81       	ld	r22, Y
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
	
	// Check if there is an error from dio driver
	if(u8_dioRetVal)
 418:	81 11       	cpse	r24, r1
 41a:	0c c0       	rjmp	.+24     	; 0x434 <BUZZER_init+0x30>
		return u8_dioRetVal;
	
	// Store configuration locally
	st_gs_buzzerConfig.u8_port = st_config->u8_port;
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	e8 e0       	ldi	r30, 0x08	; 8
 420:	f1 e0       	ldi	r31, 0x01	; 1
 422:	81 83       	std	Z+1, r24	; 0x01
	st_gs_buzzerConfig.u8_pin = st_config->u8_pin;
 424:	88 81       	ld	r24, Y
 426:	80 83       	st	Z, r24
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <u8_gs_buzzerState>
	
	return BUZZER_E_OK;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	01 c0       	rjmp	.+2      	; 0x434 <BUZZER_init+0x30>

u8_en_buzzerErrorsType BUZZER_init (st_buzzerConfigType* st_config)
{
	// Check if the pounter is invalid
	if (st_config == ((void*)0))
		return BUZZER_E_NOT_OK;
 432:	86 e0       	ldi	r24, 0x06	; 6
	
	// Change buzzer state
	u8_gs_buzzerState = INIT;
	
	return BUZZER_E_OK;
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <BUZZER_start>:
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
 43a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u8_gs_buzzerState>
 43e:	88 23       	and	r24, r24
 440:	49 f0       	breq	.+18     	; 0x454 <BUZZER_start+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
 442:	e8 e0       	ldi	r30, 0x08	; 8
 444:	f1 e0       	ldi	r31, 0x01	; 1
 446:	60 81       	ld	r22, Z
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	81 81       	ldd	r24, Z+1	; 0x01
 44c:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	
	return BUZZER_E_OK;
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_start(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
 454:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer on
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_HIGH);
	
	return BUZZER_E_OK;
}
 456:	08 95       	ret

00000458 <BUZZER_stop>:
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
 458:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u8_gs_buzzerState>
 45c:	88 23       	and	r24, r24
 45e:	49 f0       	breq	.+18     	; 0x472 <BUZZER_stop+0x1a>
		return BUZZER_E_NOT_OK;
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
 460:	e8 e0       	ldi	r30, 0x08	; 8
 462:	f1 e0       	ldi	r31, 0x01	; 1
 464:	60 81       	ld	r22, Z
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	81 81       	ldd	r24, Z+1	; 0x01
 46a:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	
	return BUZZER_E_OK;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret
}
u8_en_buzzerErrorsType BUZZER_stop(void)
{
	// Check if the module is not init before
	if(u8_gs_buzzerState == NOT_INIT)
		return BUZZER_E_NOT_OK;
 472:	86 e0       	ldi	r24, 0x06	; 6
	
	// Turn the buzzer off
	DIO_writePIN(st_gs_buzzerConfig.u8_port,st_gs_buzzerConfig.u8_pin, STD_LOW);
	
	return BUZZER_E_OK;
 474:	08 95       	ret

00000476 <KEYPAD_init>:
#define F_CPU 1000000U
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	if(st_config==(void*)0)
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	a9 f1       	breq	.+106    	; 0x4e8 <KEYPAD_init+0x72>
 47e:	ec 01       	movw	r28, r24
	{
		ret_val=KEYPAD_E_NOT_OK;
	}
	else
	{
		DIO_init(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_INPUT);
 480:	69 81       	ldd	r22, Y+1	; 0x01
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	88 81       	ld	r24, Y
 486:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
		DIO_init(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_INPUT);
 48a:	6b 81       	ldd	r22, Y+3	; 0x03
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
		DIO_init(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_INPUT);
 494:	6d 81       	ldd	r22, Y+5	; 0x05
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
		DIO_writePIN(st_config->u8_row1Pin[0],st_config->u8_row1Pin[1],STD_HIGH);
 49e:	69 81       	ldd	r22, Y+1	; 0x01
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	88 81       	ld	r24, Y
 4a4:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row2Pin[0],st_config->u8_row2Pin[1],STD_HIGH);
 4a8:	6b 81       	ldd	r22, Y+3	; 0x03
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_row3Pin[0],st_config->u8_row3Pin[1],STD_HIGH);
 4b2:	6d 81       	ldd	r22, Y+5	; 0x05
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	8c 81       	ldd	r24, Y+4	; 0x04
 4b8:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		
		DIO_init(st_config->u8_col1Pin[0],st_config->u8_col1Pin[1],STD_OUTPUT);
 4bc:	6f 81       	ldd	r22, Y+7	; 0x07
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	8e 81       	ldd	r24, Y+6	; 0x06
 4c2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
 4c6:	69 85       	ldd	r22, Y+9	; 0x09
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	88 85       	ldd	r24, Y+8	; 0x08
 4cc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
 4d0:	6b 85       	ldd	r22, Y+11	; 0x0b
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	8a 85       	ldd	r24, Y+10	; 0x0a
 4d6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
 4da:	6d 85       	ldd	r22, Y+13	; 0x0d
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	8c 85       	ldd	r24, Y+12	; 0x0c
 4e0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
#include<util/delay.h>
static uint8_t keypad[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
extern st_keypadConfigType st_gs_keypadConfig;
u8_en_keypadErrorsType KEYPAD_init (st_keypadConfigType* st_config)
{
	u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <KEYPAD_init+0x74>
	if(st_config==(void*)0)
	{
		ret_val=KEYPAD_E_NOT_OK;
 4e8:	87 e0       	ldi	r24, 0x07	; 7
		DIO_init(st_config->u8_col2Pin[0],st_config->u8_col2Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col3Pin[0],st_config->u8_col3Pin[1],STD_OUTPUT);
		DIO_init(st_config->u8_col4Pin[0],st_config->u8_col4Pin[1],STD_OUTPUT);
	}
	return ret_val;
}
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <KEYPAD_read>:

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	1f 92       	push	r1
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	7c 01       	movw	r14, r24
	uint8_t value,flag=0;
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
 506:	02 e2       	ldi	r16, 0x22	; 34
 508:	11 e0       	ldi	r17, 0x01	; 1
 50a:	f8 01       	movw	r30, r16
 50c:	67 81       	ldd	r22, Z+7	; 0x07
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	86 81       	ldd	r24, Z+6	; 0x06
 512:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
 516:	f8 01       	movw	r30, r16
 518:	61 85       	ldd	r22, Z+9	; 0x09
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	80 85       	ldd	r24, Z+8	; 0x08
 51e:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
 522:	f8 01       	movw	r30, r16
 524:	63 85       	ldd	r22, Z+11	; 0x0b
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	82 85       	ldd	r24, Z+10	; 0x0a
 52a:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
 52e:	f8 01       	movw	r30, r16
 530:	65 85       	ldd	r22, Z+13	; 0x0d
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	84 85       	ldd	r24, Z+12	; 0x0c
 536:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	uint8_t i,j;
	for(i=0;i<4;i++)
 53a:	00 e0       	ldi	r16, 0x00	; 0
	return ret_val;
}

u8_en_keypadErrorsType KEYPAD_read (uint8_t * u8_data)
{   u8_en_keypadErrorsType ret_val=KEYPAD_E_OK;
	uint8_t value,flag=0;
 53c:	d1 2c       	mov	r13, r1
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
 53e:	42 c0       	rjmp	.+132    	; 0x5c4 <KEYPAD_read+0xd4>
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
 540:	e2 e2       	ldi	r30, 0x22	; 34
 542:	f1 e0       	ldi	r31, 0x01	; 1
 544:	67 81       	ldd	r22, Z+7	; 0x07
 546:	60 0f       	add	r22, r16
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	86 81       	ldd	r24, Z+6	; 0x06
 54c:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		for(j=0;j<3;j++)
 550:	10 e0       	ldi	r17, 0x00	; 0
 552:	2d c0       	rjmp	.+90     	; 0x5ae <KEYPAD_read+0xbe>
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
 554:	e2 e2       	ldi	r30, 0x22	; 34
 556:	f1 e0       	ldi	r31, 0x01	; 1
 558:	61 81       	ldd	r22, Z+1	; 0x01
 55a:	61 0f       	add	r22, r17
 55c:	ae 01       	movw	r20, r28
 55e:	4f 5f       	subi	r20, 0xFF	; 255
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	80 81       	ld	r24, Z
 564:	0e 94 af 05 	call	0xb5e	; 0xb5e <DIO_readPIN>
			if(value==0)
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	81 11       	cpse	r24, r1
 56c:	1f c0       	rjmp	.+62     	; 0x5ac <KEYPAD_read+0xbc>
 56e:	0a c0       	rjmp	.+20     	; 0x584 <KEYPAD_read+0x94>
			{  
				 while(value==0)
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
 570:	e2 e2       	ldi	r30, 0x22	; 34
 572:	f1 e0       	ldi	r31, 0x01	; 1
 574:	61 81       	ldd	r22, Z+1	; 0x01
 576:	61 0f       	add	r22, r17
 578:	ae 01       	movw	r20, r28
 57a:	4f 5f       	subi	r20, 0xFF	; 255
 57c:	5f 4f       	sbci	r21, 0xFF	; 255
 57e:	80 81       	ld	r24, Z
 580:	0e 94 af 05 	call	0xb5e	; 0xb5e <DIO_readPIN>
		for(j=0;j<3;j++)
		{
			DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
			if(value==0)
			{  
				 while(value==0)
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	88 23       	and	r24, r24
 588:	99 f3       	breq	.-26     	; 0x570 <KEYPAD_read+0x80>
				 {
					 DIO_readPIN(st_gs_keypadConfig.u8_row1Pin[0],st_gs_keypadConfig.u8_row1Pin[1]+j,&value);
				 }
				*u8_data=keypad[i][j];
 58a:	80 2f       	mov	r24, r16
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	fc 01       	movw	r30, r24
 590:	ee 0f       	add	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	e8 0f       	add	r30, r24
 596:	f9 1f       	adc	r31, r25
 598:	e5 51       	subi	r30, 0x15	; 21
 59a:	ff 4f       	sbci	r31, 0xFF	; 255
 59c:	e1 0f       	add	r30, r17
 59e:	f1 1d       	adc	r31, r1
 5a0:	80 81       	ld	r24, Z
 5a2:	f7 01       	movw	r30, r14
 5a4:	80 83       	st	Z, r24
				flag=1;
 5a6:	dd 24       	eor	r13, r13
 5a8:	d3 94       	inc	r13
				
				break;
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <KEYPAD_read+0xc2>
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
	{
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_LOW);
		for(j=0;j<3;j++)
 5ac:	1f 5f       	subi	r17, 0xFF	; 255
 5ae:	13 30       	cpi	r17, 0x03	; 3
 5b0:	88 f2       	brcs	.-94     	; 0x554 <KEYPAD_read+0x64>
				
				break;
			}
			
		}
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
 5b2:	e2 e2       	ldi	r30, 0x22	; 34
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	67 81       	ldd	r22, Z+7	; 0x07
 5b8:	60 0f       	add	r22, r16
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	86 81       	ldd	r24, Z+6	; 0x06
 5be:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col2Pin[0],st_gs_keypadConfig.u8_col2Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col3Pin[0],st_gs_keypadConfig.u8_col3Pin[1],STD_HIGH);
	DIO_writePIN(st_gs_keypadConfig.u8_col4Pin[0],st_gs_keypadConfig.u8_col4Pin[1],STD_HIGH);
	uint8_t i,j;
	for(i=0;i<4;i++)
 5c2:	0f 5f       	subi	r16, 0xFF	; 255
 5c4:	04 30       	cpi	r16, 0x04	; 4
 5c6:	08 f4       	brcc	.+2      	; 0x5ca <KEYPAD_read+0xda>
 5c8:	bb cf       	rjmp	.-138    	; 0x540 <KEYPAD_read+0x50>
		DIO_writePIN(st_gs_keypadConfig.u8_col1Pin[0],st_gs_keypadConfig.u8_col1Pin[1]+i,STD_HIGH);
	}
	
	
	
	if(flag==1)
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	df 16       	cp	r13, r31
 5ce:	19 f0       	breq	.+6      	; 0x5d6 <KEYPAD_read+0xe6>
		
		return ret_val;
	}
	else
	{
		*u8_data='N';
 5d0:	8e e4       	ldi	r24, 0x4E	; 78
 5d2:	f7 01       	movw	r30, r14
 5d4:	80 83       	st	Z, r24
		return ret_val;
	}
	
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0f 90       	pop	r0
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
 5e4:	ef 90       	pop	r14
 5e6:	df 90       	pop	r13
 5e8:	08 95       	ret

000005ea <ENABLE>:
	{
		//do nothing
	}
}
void ENABLE(void)
{
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
	
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_HIGH);
 5ee:	cb e0       	ldi	r28, 0x0B	; 11
 5f0:	d1 e0       	ldi	r29, 0x01	; 1
 5f2:	6e 89       	ldd	r22, Y+22	; 0x16
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	8d 89       	ldd	r24, Y+21	; 0x15
 5f8:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	8a 95       	dec	r24
 600:	f1 f7       	brne	.-4      	; 0x5fe <ENABLE+0x14>
 602:	00 c0       	rjmp	.+0      	; 0x604 <ENABLE+0x1a>
	_delay_us(1);
	DIO_writePIN(st_gs_lcdConfig.u8_Epin[0],st_gs_lcdConfig.u8_Epin[1],STD_LOW);
 604:	6e 89       	ldd	r22, Y+22	; 0x16
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	8d 89       	ldd	r24, Y+21	; 0x15
 60a:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	//_delay_us(1);

 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <LCD_cmd>:
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	ec 01       	movw	r28, r24
 61c:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 61e:	6e 89       	ldd	r22, Y+22	; 0x16
 620:	40 e0       	ldi	r20, 0x00	; 0
 622:	8d 89       	ldd	r24, Y+21	; 0x15
 624:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_LOW);
 628:	6a 89       	ldd	r22, Y+18	; 0x12
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	89 89       	ldd	r24, Y+17	; 0x11
 62e:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 632:	6c 89       	ldd	r22, Y+20	; 0x14
 634:	40 e0       	ldi	r20, 0x00	; 0
 636:	8b 89       	ldd	r24, Y+19	; 0x13
 638:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 63c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mode>
 640:	81 11       	cpse	r24, r1
 642:	4a c0       	rjmp	.+148    	; 0x6d8 <LCD_cmd+0xc4>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 644:	68 89       	ldd	r22, Y+16	; 0x10
 646:	41 2f       	mov	r20, r17
 648:	44 1f       	adc	r20, r20
 64a:	44 27       	eor	r20, r20
 64c:	44 1f       	adc	r20, r20
 64e:	8f 85       	ldd	r24, Y+15	; 0x0f
 650:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 654:	6e 85       	ldd	r22, Y+14	; 0x0e
 656:	16 fb       	bst	r17, 6
 658:	44 27       	eor	r20, r20
 65a:	40 f9       	bld	r20, 0
 65c:	8d 85       	ldd	r24, Y+13	; 0x0d
 65e:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 662:	6c 85       	ldd	r22, Y+12	; 0x0c
 664:	15 fb       	bst	r17, 5
 666:	44 27       	eor	r20, r20
 668:	40 f9       	bld	r20, 0
 66a:	8b 85       	ldd	r24, Y+11	; 0x0b
 66c:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 670:	6a 85       	ldd	r22, Y+10	; 0x0a
 672:	14 fb       	bst	r17, 4
 674:	44 27       	eor	r20, r20
 676:	40 f9       	bld	r20, 0
 678:	89 85       	ldd	r24, Y+9	; 0x09
 67a:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		ENABLE();
 67e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 682:	8f e6       	ldi	r24, 0x6F	; 111
 684:	97 e1       	ldi	r25, 0x17	; 23
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <LCD_cmd+0x72>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <LCD_cmd+0x78>
 68c:	00 00       	nop
		_delay_ms(3);
	    DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 68e:	68 89       	ldd	r22, Y+16	; 0x10
 690:	13 fb       	bst	r17, 3
 692:	44 27       	eor	r20, r20
 694:	40 f9       	bld	r20, 0
 696:	8f 85       	ldd	r24, Y+15	; 0x0f
 698:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 69c:	6e 85       	ldd	r22, Y+14	; 0x0e
 69e:	12 fb       	bst	r17, 2
 6a0:	44 27       	eor	r20, r20
 6a2:	40 f9       	bld	r20, 0
 6a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 6a6:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 6aa:	6c 85       	ldd	r22, Y+12	; 0x0c
 6ac:	11 fb       	bst	r17, 1
 6ae:	44 27       	eor	r20, r20
 6b0:	40 f9       	bld	r20, 0
 6b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 6b4:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 6b8:	6a 85       	ldd	r22, Y+10	; 0x0a
 6ba:	41 2f       	mov	r20, r17
 6bc:	41 70       	andi	r20, 0x01	; 1
 6be:	89 85       	ldd	r24, Y+9	; 0x09
 6c0:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		ENABLE();
 6c4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ENABLE>
 6c8:	8f e6       	ldi	r24, 0x6F	; 111
 6ca:	97 e1       	ldi	r25, 0x17	; 23
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <LCD_cmd+0xb8>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <LCD_cmd+0xbe>
 6d2:	00 00       	nop
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <LCD_cmd+0xce>
    	DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
	    DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
		ENABLE();
		_delay_ms(3);
	}
	else if(mode==LCD_8_BIT_MODE)
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	11 f4       	brne	.+4      	; 0x6e0 <LCD_cmd+0xcc>
	LCD_cmd(&st_gs_lcdConfig,0xc0);
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
	return ret_val;
}
u8_en_lcdErrorsType LCD_cmd(st_lcdConfigType* st_config,uint8_t cmd)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <LCD_cmd+0xce>
		
	}
	else
	{
		//do nothing
		ret_val=LCD_E_NOT_OK;
 6e0:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ret_val;
}
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	08 95       	ret

000006ea <LCD_init>:
#include<util/delay.h>
extern st_lcdConfigType st_gs_lcdConfig;
static uint8_t mode;
static void ENABLE(void);
u8_en_lcdErrorsType LCD_init (st_lcdConfigType* st_config)
{
 6ea:	1f 93       	push	r17
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	ec 01       	movw	r28, r24
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=DIO_init(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_OUTPUT);
 6f2:	6a 89       	ldd	r22, Y+18	; 0x12
 6f4:	41 e0       	ldi	r20, 0x01	; 1
 6f6:	89 89       	ldd	r24, Y+17	; 0x11
 6f8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 6fc:	18 2f       	mov	r17, r24
	ret_val |=DIO_init(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_OUTPUT);
 6fe:	6c 89       	ldd	r22, Y+20	; 0x14
 700:	41 e0       	ldi	r20, 0x01	; 1
 702:	8b 89       	ldd	r24, Y+19	; 0x13
 704:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 708:	18 2b       	or	r17, r24
	ret_val |=DIO_init(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_OUTPUT);
 70a:	6e 89       	ldd	r22, Y+22	; 0x16
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	8d 89       	ldd	r24, Y+21	; 0x15
 710:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 714:	18 2b       	or	r17, r24
	switch(st_config->u8_mode)
 716:	88 81       	ld	r24, Y
 718:	88 23       	and	r24, r24
 71a:	19 f0       	breq	.+6      	; 0x722 <LCD_init+0x38>
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	99 f1       	breq	.+102    	; 0x786 <LCD_init+0x9c>
 720:	77 c0       	rjmp	.+238    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	{
		case LCD_4_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x02);
 722:	62 e0       	ldi	r22, 0x02	; 2
 724:	8b e0       	ldi	r24, 0x0B	; 11
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x28);
 72c:	68 e2       	ldi	r22, 0x28	; 40
 72e:	8b e0       	ldi	r24, 0x0B	; 11
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 736:	6c e0       	ldi	r22, 0x0C	; 12
 738:	8b e0       	ldi	r24, 0x0B	; 11
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 740:	66 e0       	ldi	r22, 0x06	; 6
 742:	8b e0       	ldi	r24, 0x0B	; 11
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	8b e0       	ldi	r24, 0x0B	; 11
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 754:	6a 85       	ldd	r22, Y+10	; 0x0a
 756:	41 e0       	ldi	r20, 0x01	; 1
 758:	89 85       	ldd	r24, Y+9	; 0x09
 75a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 75e:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 760:	6c 85       	ldd	r22, Y+12	; 0x0c
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	8b 85       	ldd	r24, Y+11	; 0x0b
 766:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 76a:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 76c:	6e 85       	ldd	r22, Y+14	; 0x0e
 76e:	41 e0       	ldi	r20, 0x01	; 1
 770:	8d 85       	ldd	r24, Y+13	; 0x0d
 772:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 776:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 778:	68 89       	ldd	r22, Y+16	; 0x10
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	8f 85       	ldd	r24, Y+15	; 0x0f
 77e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 782:	81 2b       	or	r24, r17
								break;
 784:	46 c0       	rjmp	.+140    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
								
	case LCD_8_BIT_MODE	: 
		                        LCD_cmd(&st_gs_lcdConfig,0x38);
 786:	68 e3       	ldi	r22, 0x38	; 56
 788:	8b e0       	ldi	r24, 0x0B	; 11
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x0C);
 790:	6c e0       	ldi	r22, 0x0C	; 12
 792:	8b e0       	ldi	r24, 0x0B	; 11
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x06);
 79a:	66 e0       	ldi	r22, 0x06	; 6
 79c:	8b e0       	ldi	r24, 0x0B	; 11
 79e:	91 e0       	ldi	r25, 0x01	; 1
 7a0:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
		                        LCD_cmd(&st_gs_lcdConfig,0x01);
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	8b e0       	ldi	r24, 0x0B	; 11
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
		                        ret_val |=DIO_init(st_config->u8_d0Pin[0],st_config->u8_d0Pin[1],STD_OUTPUT);
 7ae:	6a 81       	ldd	r22, Y+2	; 0x02
 7b0:	41 e0       	ldi	r20, 0x01	; 1
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 7b8:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d1Pin[0],st_config->u8_d1Pin[1],STD_OUTPUT);
 7ba:	6c 81       	ldd	r22, Y+4	; 0x04
 7bc:	41 e0       	ldi	r20, 0x01	; 1
 7be:	8b 81       	ldd	r24, Y+3	; 0x03
 7c0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 7c4:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d2Pin[0],st_config->u8_d2Pin[1],STD_OUTPUT);
 7c6:	6e 81       	ldd	r22, Y+6	; 0x06
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	8d 81       	ldd	r24, Y+5	; 0x05
 7cc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 7d0:	18 2b       	or	r17, r24
		                        ret_val |=DIO_init(st_config->u8_d3Pin[0],st_config->u8_d3Pin[1],STD_OUTPUT);
 7d2:	68 85       	ldd	r22, Y+8	; 0x08
 7d4:	41 e0       	ldi	r20, 0x01	; 1
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 7dc:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],STD_OUTPUT);
 7de:	6a 85       	ldd	r22, Y+10	; 0x0a
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	89 85       	ldd	r24, Y+9	; 0x09
 7e4:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 7e8:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],STD_OUTPUT);
 7ea:	6c 85       	ldd	r22, Y+12	; 0x0c
 7ec:	41 e0       	ldi	r20, 0x01	; 1
 7ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 7f0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 7f4:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],STD_OUTPUT);
 7f6:	6e 85       	ldd	r22, Y+14	; 0x0e
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 7fc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 800:	18 2b       	or	r17, r24
								ret_val |=DIO_init(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],STD_OUTPUT);
 802:	68 89       	ldd	r22, Y+16	; 0x10
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	8f 85       	ldd	r24, Y+15	; 0x0f
 808:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_init>
 80c:	81 2b       	or	r24, r17
								break;
 80e:	01 c0       	rjmp	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	default: ret_val=LCD_E_NOT_OK;
 810:	85 e0       	ldi	r24, 0x05	; 5
				break;
								
	}
	mode=st_config->u8_mode;
 812:	98 81       	ld	r25, Y
 814:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <mode>
	return ret_val;
}
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	1f 91       	pop	r17
 81e:	08 95       	ret

00000820 <LCD_clear>:
u8_en_lcdErrorsType LCD_clear (void)
{

	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	ret_val |=LCD_cmd(&st_gs_lcdConfig,0x01);
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	8b e0       	ldi	r24, 0x0B	; 11
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
	return ret_val;

}
 82a:	08 95       	ret

0000082c <LCD_setCursor>:
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	switch(u8_row)
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	19 f0       	breq	.+6      	; 0x836 <LCD_setCursor+0xa>
 830:	82 30       	cpi	r24, 0x02	; 2
 832:	41 f0       	breq	.+16     	; 0x844 <LCD_setCursor+0x18>
 834:	0e c0       	rjmp	.+28     	; 0x852 <LCD_setCursor+0x26>
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
 836:	61 58       	subi	r22, 0x81	; 129
 838:	8b e0       	ldi	r24, 0x0B	; 11
 83a:	91 e0       	ldi	r25, 0x01	; 1
 83c:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
 840:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
 842:	08 95       	ret
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
 844:	61 54       	subi	r22, 0x41	; 65
 846:	8b e0       	ldi	r24, 0x0B	; 11
 848:	91 e0       	ldi	r25, 0x01	; 1
 84a:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
	return ret_val;

}
u8_en_lcdErrorsType LCD_setCursor (uint8_t u8_row,uint8_t u8_col)
{
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
 84e:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8_row)
	{
		case 1 : LCD_cmd(&st_gs_lcdConfig,0x80+u8_col-1);break;
		case 2 :LCD_cmd(&st_gs_lcdConfig,0xc0+u8_col-1);break;	
 850:	08 95       	ret
		default:ret_val=LCD_E_NOT_OK;break;
 852:	85 e0       	ldi	r24, 0x05	; 5
	}

	return ret_val;

}
 854:	08 95       	ret

00000856 <LCD_char>:
		ret_val=LCD_E_NOT_OK;
	}
	return ret_val;
}
  void LCD_char(st_lcdConfigType* st_config,uint8_t cmd)
{
 856:	1f 93       	push	r17
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	ec 01       	movw	r28, r24
 85e:	16 2f       	mov	r17, r22
	DIO_writePIN(st_config->u8_Epin[0],st_config->u8_Epin[1],STD_LOW);
 860:	6e 89       	ldd	r22, Y+22	; 0x16
 862:	40 e0       	ldi	r20, 0x00	; 0
 864:	8d 89       	ldd	r24, Y+21	; 0x15
 866:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RSpin[0],st_config->u8_RSpin[1],STD_HIGH);
 86a:	6a 89       	ldd	r22, Y+18	; 0x12
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	89 89       	ldd	r24, Y+17	; 0x11
 870:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	DIO_writePIN(st_config->u8_RWpin[0],st_config->u8_RWpin[1],STD_LOW);
 874:	6c 89       	ldd	r22, Y+20	; 0x14
 876:	40 e0       	ldi	r20, 0x00	; 0
 878:	8b 89       	ldd	r24, Y+19	; 0x13
 87a:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
	if(mode==LCD_4_BIT_MODE)
 87e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mode>
 882:	81 11       	cpse	r24, r1
 884:	48 c0       	rjmp	.+144    	; 0x916 <__stack+0xb7>
	{
		
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,7));
 886:	68 89       	ldd	r22, Y+16	; 0x10
 888:	41 2f       	mov	r20, r17
 88a:	44 1f       	adc	r20, r20
 88c:	44 27       	eor	r20, r20
 88e:	44 1f       	adc	r20, r20
 890:	8f 85       	ldd	r24, Y+15	; 0x0f
 892:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,6));
 896:	6e 85       	ldd	r22, Y+14	; 0x0e
 898:	16 fb       	bst	r17, 6
 89a:	44 27       	eor	r20, r20
 89c:	40 f9       	bld	r20, 0
 89e:	8d 85       	ldd	r24, Y+13	; 0x0d
 8a0:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,5));
 8a4:	6c 85       	ldd	r22, Y+12	; 0x0c
 8a6:	15 fb       	bst	r17, 5
 8a8:	44 27       	eor	r20, r20
 8aa:	40 f9       	bld	r20, 0
 8ac:	8b 85       	ldd	r24, Y+11	; 0x0b
 8ae:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,4));
 8b2:	6a 85       	ldd	r22, Y+10	; 0x0a
 8b4:	14 fb       	bst	r17, 4
 8b6:	44 27       	eor	r20, r20
 8b8:	40 f9       	bld	r20, 0
 8ba:	89 85       	ldd	r24, Y+9	; 0x09
 8bc:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		ENABLE();
 8c0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ENABLE>
 8c4:	8f e6       	ldi	r24, 0x6F	; 111
 8c6:	97 e1       	ldi	r25, 0x17	; 23
 8c8:	01 97       	sbiw	r24, 0x01	; 1
 8ca:	f1 f7       	brne	.-4      	; 0x8c8 <__stack+0x69>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <__stack+0x6f>
 8ce:	00 00       	nop
		_delay_ms(3);
		DIO_writePIN(st_config->u8_d7Pin[0],st_config->u8_d7Pin[1],READ_BIT(cmd,3));
 8d0:	68 89       	ldd	r22, Y+16	; 0x10
 8d2:	13 fb       	bst	r17, 3
 8d4:	44 27       	eor	r20, r20
 8d6:	40 f9       	bld	r20, 0
 8d8:	8f 85       	ldd	r24, Y+15	; 0x0f
 8da:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d6Pin[0],st_config->u8_d6Pin[1],READ_BIT(cmd,2));
 8de:	6e 85       	ldd	r22, Y+14	; 0x0e
 8e0:	12 fb       	bst	r17, 2
 8e2:	44 27       	eor	r20, r20
 8e4:	40 f9       	bld	r20, 0
 8e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 8e8:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d5Pin[0],st_config->u8_d5Pin[1],READ_BIT(cmd,1));
 8ec:	6c 85       	ldd	r22, Y+12	; 0x0c
 8ee:	11 fb       	bst	r17, 1
 8f0:	44 27       	eor	r20, r20
 8f2:	40 f9       	bld	r20, 0
 8f4:	8b 85       	ldd	r24, Y+11	; 0x0b
 8f6:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		DIO_writePIN(st_config->u8_d4Pin[0],st_config->u8_d4Pin[1],READ_BIT(cmd,0));
 8fa:	6a 85       	ldd	r22, Y+10	; 0x0a
 8fc:	41 2f       	mov	r20, r17
 8fe:	41 70       	andi	r20, 0x01	; 1
 900:	89 85       	ldd	r24, Y+9	; 0x09
 902:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_writePIN>
		ENABLE();
 906:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ENABLE>
 90a:	8f e6       	ldi	r24, 0x6F	; 111
 90c:	97 e1       	ldi	r25, 0x17	; 23
 90e:	01 97       	sbiw	r24, 0x01	; 1
 910:	f1 f7       	brne	.-4      	; 0x90e <__stack+0xaf>
 912:	00 c0       	rjmp	.+0      	; 0x914 <__stack+0xb5>
 914:	00 00       	nop
	}
	else
	{
		//do nothing
	}
}
 916:	df 91       	pop	r29
 918:	cf 91       	pop	r28
 91a:	1f 91       	pop	r17
 91c:	08 95       	ret

0000091e <LCD_writeString>:

	return ret_val;

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
 922:	cf 93       	push	r28
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
	if(u8_data==(void*)0)
 924:	00 97       	sbiw	r24, 0x00	; 0
 926:	81 f0       	breq	.+32     	; 0x948 <LCD_writeString+0x2a>
 928:	8c 01       	movw	r16, r24
 92a:	c0 e0       	ldi	r28, 0x00	; 0
 92c:	05 c0       	rjmp	.+10     	; 0x938 <LCD_writeString+0x1a>

	else
	{
		while(u8_data[i] !='\0')
		{
			LCD_char(&st_gs_lcdConfig,u8_data[i]);
 92e:	8b e0       	ldi	r24, 0x0B	; 11
 930:	91 e0       	ldi	r25, 0x01	; 1
 932:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_char>
			i++;
 936:	cf 5f       	subi	r28, 0xFF	; 255
		ret_val=LCD_E_NOT_OK;
	}

	else
	{
		while(u8_data[i] !='\0')
 938:	f8 01       	movw	r30, r16
 93a:	ec 0f       	add	r30, r28
 93c:	f1 1d       	adc	r31, r1
 93e:	60 81       	ld	r22, Z
 940:	61 11       	cpse	r22, r1
 942:	f5 cf       	rjmp	.-22     	; 0x92e <LCD_writeString+0x10>

}
u8_en_lcdErrorsType LCD_writeString (uint8_t* u8_data)
{
	uint8_t i=0;
	u8_en_lcdErrorsType ret_val=LCD_E_OK;
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	01 c0       	rjmp	.+2      	; 0x94a <LCD_writeString+0x2c>
	if(u8_data==(void*)0)
	{
		ret_val=LCD_E_NOT_OK;
 948:	85 e0       	ldi	r24, 0x05	; 5
		}
	}
	return ret_val;
	

}
 94a:	cf 91       	pop	r28
 94c:	1f 91       	pop	r17
 94e:	0f 91       	pop	r16
 950:	08 95       	ret

00000952 <LCD_writeSpChar>:
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	cd b7       	in	r28, 0x3d	; 61
 95a:	de b7       	in	r29, 0x3e	; 62
 95c:	28 97       	sbiw	r28, 0x08	; 8
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
 968:	98 e0       	ldi	r25, 0x08	; 8
 96a:	e1 e6       	ldi	r30, 0x61	; 97
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	de 01       	movw	r26, r28
 970:	11 96       	adiw	r26, 0x01	; 1
 972:	01 90       	ld	r0, Z+
 974:	0d 92       	st	X+, r0
 976:	9a 95       	dec	r25
 978:	e1 f7       	brne	.-8      	; 0x972 <LCD_writeSpChar+0x20>
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
 97a:	68 2f       	mov	r22, r24
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	68 5f       	subi	r22, 0xF8	; 248
 980:	7f 4f       	sbci	r23, 0xFF	; 255
 982:	66 0f       	add	r22, r22
 984:	66 0f       	add	r22, r22
 986:	66 0f       	add	r22, r22
 988:	8b e0       	ldi	r24, 0x0B	; 11
 98a:	91 e0       	ldi	r25, 0x01	; 1
 98c:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
	for(i=0;i<8;i++)
 990:	10 e0       	ldi	r17, 0x00	; 0
 992:	0c c0       	rjmp	.+24     	; 0x9ac <LCD_writeSpChar+0x5a>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
 994:	e1 e0       	ldi	r30, 0x01	; 1
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	ec 0f       	add	r30, r28
 99a:	fd 1f       	adc	r31, r29
 99c:	e1 0f       	add	r30, r17
 99e:	f1 1d       	adc	r31, r1
 9a0:	60 81       	ld	r22, Z
 9a2:	8b e0       	ldi	r24, 0x0B	; 11
 9a4:	91 e0       	ldi	r25, 0x01	; 1
 9a6:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_char>
u8_en_lcdErrorsType LCD_writeSpChar (u8_en_lcdSpCharType u8_SpChar)
{   u8_en_lcdErrorsType ret_val=LCD_E_OK;
	uint8_t sp_char[]= {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00};
	uint8_t i;
	LCD_cmd(&st_gs_lcdConfig,0x40+( u8_SpChar* 8));
	for(i=0;i<8;i++)
 9aa:	1f 5f       	subi	r17, 0xFF	; 255
 9ac:	18 30       	cpi	r17, 0x08	; 8
 9ae:	90 f3       	brcs	.-28     	; 0x994 <LCD_writeSpChar+0x42>
	{
		LCD_char(&st_gs_lcdConfig,sp_char[i]);
	}	
	
	LCD_cmd(&st_gs_lcdConfig,0xc0);
 9b0:	60 ec       	ldi	r22, 0xC0	; 192
 9b2:	8b e0       	ldi	r24, 0x0B	; 11
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_cmd>
	LCD_char(&st_gs_lcdConfig,LCD_BELL);
 9ba:	63 e0       	ldi	r22, 0x03	; 3
 9bc:	8b e0       	ldi	r24, 0x0B	; 11
 9be:	91 e0       	ldi	r25, 0x01	; 1
 9c0:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_char>
	return ret_val;
}
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	28 96       	adiw	r28, 0x08	; 8
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	08 95       	ret

000009da <TEMP_SENSOR_init>:


u8_en_tempSensorErrorsType TEMP_SENSOR_init (st_tempSensorConfigType* st_config)
{
	return 0;
}
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	08 95       	ret

000009de <TEMP_SENSOR_read>:

u8_en_tempSensorErrorsType TEMP_SENSOR_read (st_tempSensorConfigType* st_config, uint8_t * u8_data)
{
	return 0;
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	08 95       	ret

000009e2 <TIMER_Manager_init>:
	return 0;
}
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	return 0;
}
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	08 95       	ret

000009e6 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	return 0;
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	08 95       	ret

000009ea <main>:

#include "APP/app.h"

int main(void)
{
	APP_start();
 9ea:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <APP_start>
}
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	08 95       	ret

000009f4 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 9f4:	68 30       	cpi	r22, 0x08	; 8
 9f6:	a0 f5       	brcc	.+104    	; 0xa60 <DIO_init+0x6c>
	{
		if (port == porta)
 9f8:	81 11       	cpse	r24, r1
 9fa:	0b c0       	rjmp	.+22     	; 0xa12 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 9fc:	8a b3       	in	r24, 0x1a	; 26
 9fe:	50 e0       	ldi	r21, 0x00	; 0
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_init+0x12>
 a02:	44 0f       	add	r20, r20
 a04:	55 1f       	adc	r21, r21
 a06:	6a 95       	dec	r22
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_init+0xe>
 a0a:	48 2b       	or	r20, r24
 a0c:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	08 95       	ret
		}
		else if (port == portb)
 a12:	81 30       	cpi	r24, 0x01	; 1
 a14:	59 f4       	brne	.+22     	; 0xa2c <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 a16:	87 b3       	in	r24, 0x17	; 23
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <DIO_init+0x2c>
 a1c:	44 0f       	add	r20, r20
 a1e:	55 1f       	adc	r21, r21
 a20:	6a 95       	dec	r22
 a22:	e2 f7       	brpl	.-8      	; 0xa1c <DIO_init+0x28>
 a24:	48 2b       	or	r20, r24
 a26:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	08 95       	ret
		}
		else if (port == portc)
 a2c:	82 30       	cpi	r24, 0x02	; 2
 a2e:	59 f4       	brne	.+22     	; 0xa46 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 a30:	84 b3       	in	r24, 0x14	; 20
 a32:	50 e0       	ldi	r21, 0x00	; 0
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_init+0x46>
 a36:	44 0f       	add	r20, r20
 a38:	55 1f       	adc	r21, r21
 a3a:	6a 95       	dec	r22
 a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_init+0x42>
 a3e:	48 2b       	or	r20, r24
 a40:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	08 95       	ret
		}
		else if (port == portd)
 a46:	83 30       	cpi	r24, 0x03	; 3
 a48:	69 f4       	brne	.+26     	; 0xa64 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 a4a:	81 b3       	in	r24, 0x11	; 17
 a4c:	50 e0       	ldi	r21, 0x00	; 0
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_init+0x60>
 a50:	44 0f       	add	r20, r20
 a52:	55 1f       	adc	r21, r21
 a54:	6a 95       	dec	r22
 a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_init+0x5c>
 a58:	48 2b       	or	r20, r24
 a5a:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 a64:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 a66:	08 95       	ret

00000a68 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 a68:	68 30       	cpi	r22, 0x08	; 8
 a6a:	08 f0       	brcs	.+2      	; 0xa6e <DIO_writePIN+0x6>
 a6c:	74 c0       	rjmp	.+232    	; 0xb56 <DIO_writePIN+0xee>
	{
		if (port == porta)
 a6e:	81 11       	cpse	r24, r1
 a70:	1b c0       	rjmp	.+54     	; 0xaa8 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 a72:	41 30       	cpi	r20, 0x01	; 1
 a74:	61 f4       	brne	.+24     	; 0xa8e <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 a76:	2b b3       	in	r18, 0x1b	; 27
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <DIO_writePIN+0x1a>
 a7e:	88 0f       	add	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	6a 95       	dec	r22
 a84:	e2 f7       	brpl	.-8      	; 0xa7e <DIO_writePIN+0x16>
 a86:	82 2b       	or	r24, r18
 a88:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 a8a:	80 e0       	ldi	r24, 0x00	; 0
 a8c:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 a8e:	2b b3       	in	r18, 0x1b	; 27
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_writePIN+0x32>
 a96:	88 0f       	add	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	6a 95       	dec	r22
 a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_writePIN+0x2e>
 a9e:	80 95       	com	r24
 aa0:	82 23       	and	r24, r18
 aa2:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	08 95       	ret
		}
		else if (port == portb)
 aa8:	81 30       	cpi	r24, 0x01	; 1
 aaa:	d9 f4       	brne	.+54     	; 0xae2 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 aac:	41 30       	cpi	r20, 0x01	; 1
 aae:	61 f4       	brne	.+24     	; 0xac8 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 ab0:	28 b3       	in	r18, 0x18	; 24
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_writePIN+0x54>
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	6a 95       	dec	r22
 abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_writePIN+0x50>
 ac0:	82 2b       	or	r24, r18
 ac2:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 ac4:	80 e0       	ldi	r24, 0x00	; 0
 ac6:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 ac8:	28 b3       	in	r18, 0x18	; 24
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <DIO_writePIN+0x6c>
 ad0:	88 0f       	add	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	6a 95       	dec	r22
 ad6:	e2 f7       	brpl	.-8      	; 0xad0 <DIO_writePIN+0x68>
 ad8:	80 95       	com	r24
 ada:	82 23       	and	r24, r18
 adc:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 ade:	80 e0       	ldi	r24, 0x00	; 0
 ae0:	08 95       	ret
		}
		else if (port == portc)
 ae2:	82 30       	cpi	r24, 0x02	; 2
 ae4:	d9 f4       	brne	.+54     	; 0xb1c <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 ae6:	41 30       	cpi	r20, 0x01	; 1
 ae8:	61 f4       	brne	.+24     	; 0xb02 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 aea:	25 b3       	in	r18, 0x15	; 21
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <DIO_writePIN+0x8e>
 af2:	88 0f       	add	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	6a 95       	dec	r22
 af8:	e2 f7       	brpl	.-8      	; 0xaf2 <DIO_writePIN+0x8a>
 afa:	82 2b       	or	r24, r18
 afc:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 b02:	25 b3       	in	r18, 0x15	; 21
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_writePIN+0xa6>
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	6a 95       	dec	r22
 b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_writePIN+0xa2>
 b12:	80 95       	com	r24
 b14:	82 23       	and	r24, r18
 b16:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	08 95       	ret
		}
		else if (port == portd)
 b1c:	83 30       	cpi	r24, 0x03	; 3
 b1e:	e9 f4       	brne	.+58     	; 0xb5a <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
 b20:	41 30       	cpi	r20, 0x01	; 1
 b22:	61 f4       	brne	.+24     	; 0xb3c <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
 b24:	22 b3       	in	r18, 0x12	; 18
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_writePIN+0xc8>
 b2c:	88 0f       	add	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	6a 95       	dec	r22
 b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_writePIN+0xc4>
 b34:	82 2b       	or	r24, r18
 b36:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 b3c:	22 b3       	in	r18, 0x12	; 18
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <DIO_writePIN+0xe0>
 b44:	88 0f       	add	r24, r24
 b46:	99 1f       	adc	r25, r25
 b48:	6a 95       	dec	r22
 b4a:	e2 f7       	brpl	.-8      	; 0xb44 <DIO_writePIN+0xdc>
 b4c:	80 95       	com	r24
 b4e:	82 23       	and	r24, r18
 b50:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 b5a:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 b5c:	08 95       	ret

00000b5e <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
 b5e:	68 30       	cpi	r22, 0x08	; 8
 b60:	08 f0       	brcs	.+2      	; 0xb64 <DIO_readPIN+0x6>
 b62:	64 c0       	rjmp	.+200    	; 0xc2c <DIO_readPIN+0xce>
	{
		if (port == porta)
 b64:	81 11       	cpse	r24, r1
 b66:	17 c0       	rjmp	.+46     	; 0xb96 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
 b68:	79 b3       	in	r23, 0x19	; 25
 b6a:	81 e0       	ldi	r24, 0x01	; 1
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	9c 01       	movw	r18, r24
 b70:	06 2e       	mov	r0, r22
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <DIO_readPIN+0x1a>
 b74:	22 0f       	add	r18, r18
 b76:	33 1f       	adc	r19, r19
 b78:	0a 94       	dec	r0
 b7a:	e2 f7       	brpl	.-8      	; 0xb74 <DIO_readPIN+0x16>
 b7c:	87 2f       	mov	r24, r23
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	82 23       	and	r24, r18
 b82:	93 23       	and	r25, r19
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <DIO_readPIN+0x2c>
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	6a 95       	dec	r22
 b8c:	e2 f7       	brpl	.-8      	; 0xb86 <DIO_readPIN+0x28>
 b8e:	fa 01       	movw	r30, r20
 b90:	80 83       	st	Z, r24
			return DIO_E_OK;
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	08 95       	ret
		}
		else if (port == portb)
 b96:	81 30       	cpi	r24, 0x01	; 1
 b98:	b9 f4       	brne	.+46     	; 0xbc8 <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
 b9a:	76 b3       	in	r23, 0x16	; 22
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	9c 01       	movw	r18, r24
 ba2:	06 2e       	mov	r0, r22
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_readPIN+0x4c>
 ba6:	22 0f       	add	r18, r18
 ba8:	33 1f       	adc	r19, r19
 baa:	0a 94       	dec	r0
 bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_readPIN+0x48>
 bae:	87 2f       	mov	r24, r23
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	82 23       	and	r24, r18
 bb4:	93 23       	and	r25, r19
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <DIO_readPIN+0x5e>
 bb8:	96 95       	lsr	r25
 bba:	87 95       	ror	r24
 bbc:	6a 95       	dec	r22
 bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <DIO_readPIN+0x5a>
 bc0:	fa 01       	movw	r30, r20
 bc2:	80 83       	st	Z, r24
			return DIO_E_OK;
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	08 95       	ret
		}
		else if (port == portc)
 bc8:	82 30       	cpi	r24, 0x02	; 2
 bca:	b9 f4       	brne	.+46     	; 0xbfa <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
 bcc:	73 b3       	in	r23, 0x13	; 19
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	9c 01       	movw	r18, r24
 bd4:	06 2e       	mov	r0, r22
 bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_readPIN+0x7e>
 bd8:	22 0f       	add	r18, r18
 bda:	33 1f       	adc	r19, r19
 bdc:	0a 94       	dec	r0
 bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_readPIN+0x7a>
 be0:	87 2f       	mov	r24, r23
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	82 23       	and	r24, r18
 be6:	93 23       	and	r25, r19
 be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_readPIN+0x90>
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	6a 95       	dec	r22
 bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_readPIN+0x8c>
 bf2:	fa 01       	movw	r30, r20
 bf4:	80 83       	st	Z, r24
			return DIO_E_OK;
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	08 95       	ret
		}
		else if (port == portd)
 bfa:	83 30       	cpi	r24, 0x03	; 3
 bfc:	c9 f4       	brne	.+50     	; 0xc30 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
 bfe:	70 b3       	in	r23, 0x10	; 16
 c00:	81 e0       	ldi	r24, 0x01	; 1
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	9c 01       	movw	r18, r24
 c06:	06 2e       	mov	r0, r22
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_readPIN+0xb0>
 c0a:	22 0f       	add	r18, r18
 c0c:	33 1f       	adc	r19, r19
 c0e:	0a 94       	dec	r0
 c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_readPIN+0xac>
 c12:	87 2f       	mov	r24, r23
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	82 23       	and	r24, r18
 c18:	93 23       	and	r25, r19
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_readPIN+0xc2>
 c1c:	96 95       	lsr	r25
 c1e:	87 95       	ror	r24
 c20:	6a 95       	dec	r22
 c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_readPIN+0xbe>
 c24:	fa 01       	movw	r30, r20
 c26:	80 83       	st	Z, r24
			return DIO_E_OK;
 c28:	80 e0       	ldi	r24, 0x00	; 0
 c2a:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 c30:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
 c32:	08 95       	ret

00000c34 <__itoa_ncheck>:
 c34:	bb 27       	eor	r27, r27
 c36:	4a 30       	cpi	r20, 0x0A	; 10
 c38:	31 f4       	brne	.+12     	; 0xc46 <__itoa_ncheck+0x12>
 c3a:	99 23       	and	r25, r25
 c3c:	22 f4       	brpl	.+8      	; 0xc46 <__itoa_ncheck+0x12>
 c3e:	bd e2       	ldi	r27, 0x2D	; 45
 c40:	90 95       	com	r25
 c42:	81 95       	neg	r24
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__utoa_common>

00000c4a <__utoa_ncheck>:
 c4a:	bb 27       	eor	r27, r27

00000c4c <__utoa_common>:
 c4c:	fb 01       	movw	r30, r22
 c4e:	55 27       	eor	r21, r21
 c50:	aa 27       	eor	r26, r26
 c52:	88 0f       	add	r24, r24
 c54:	99 1f       	adc	r25, r25
 c56:	aa 1f       	adc	r26, r26
 c58:	a4 17       	cp	r26, r20
 c5a:	10 f0       	brcs	.+4      	; 0xc60 <__utoa_common+0x14>
 c5c:	a4 1b       	sub	r26, r20
 c5e:	83 95       	inc	r24
 c60:	50 51       	subi	r21, 0x10	; 16
 c62:	b9 f7       	brne	.-18     	; 0xc52 <__utoa_common+0x6>
 c64:	a0 5d       	subi	r26, 0xD0	; 208
 c66:	aa 33       	cpi	r26, 0x3A	; 58
 c68:	08 f0       	brcs	.+2      	; 0xc6c <__utoa_common+0x20>
 c6a:	a9 5d       	subi	r26, 0xD9	; 217
 c6c:	a1 93       	st	Z+, r26
 c6e:	00 97       	sbiw	r24, 0x00	; 0
 c70:	79 f7       	brne	.-34     	; 0xc50 <__utoa_common+0x4>
 c72:	b1 11       	cpse	r27, r1
 c74:	b1 93       	st	Z+, r27
 c76:	11 92       	st	Z+, r1
 c78:	cb 01       	movw	r24, r22
 c7a:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <strrev>

00000c7e <strrev>:
 c7e:	dc 01       	movw	r26, r24
 c80:	fc 01       	movw	r30, r24
 c82:	67 2f       	mov	r22, r23
 c84:	71 91       	ld	r23, Z+
 c86:	77 23       	and	r23, r23
 c88:	e1 f7       	brne	.-8      	; 0xc82 <strrev+0x4>
 c8a:	32 97       	sbiw	r30, 0x02	; 2
 c8c:	04 c0       	rjmp	.+8      	; 0xc96 <strrev+0x18>
 c8e:	7c 91       	ld	r23, X
 c90:	6d 93       	st	X+, r22
 c92:	70 83       	st	Z, r23
 c94:	62 91       	ld	r22, -Z
 c96:	ae 17       	cp	r26, r30
 c98:	bf 07       	cpc	r27, r31
 c9a:	c8 f3       	brcs	.-14     	; 0xc8e <strrev+0x10>
 c9c:	08 95       	ret

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
